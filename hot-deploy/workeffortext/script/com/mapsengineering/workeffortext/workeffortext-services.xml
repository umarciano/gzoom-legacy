<?xml version="1.0" encoding="UTF-8"?>

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <!-- ************************************************************** -->
    <!-- dummyService -->
    <!-- ************************************************************** -->

    <simple-method method-name="dummyService" short-description="dummyService" login-required="false">
    </simple-method>

    <!-- ************************************************************** -->
    <!-- Common -->
    <!-- ************************************************************** -->

    <simple-method method-name="checkUpdateDeleteByIsPosted" short-description="checkUpdateDeleteByIsPosted">
        <if-compare field="parameters.isPosted" operator="equals" value="Y">
            <add-error>
                <fail-property resource="BaseErrorLabels" property="UpdateDeleteOperationNotAllowed"/>
            </add-error>
            <check-errors/>
        </if-compare>
    </simple-method>

    <!-- ************************************************************** -->
    <!-- WorkEffortTypeStatus -->
    <!-- ************************************************************** -->

    <simple-method method-name="crudServiceValueValidation_WorkEffortTypeStatus" short-description="crudServiceValueValidation_WorkEffortTypeStatus">

        <log level="verbose" message="**** parameters=${parameters}"/>
        <set field="parameters" from-field="parameters.parameters"/>
        <if>
            <condition>
                <or>
                    <if-compare field="parameters.operation" operator="equals" value="CREATE"/>
                    <if-compare field="parameters.operation" operator="equals" value="UPDATE"/>
                </or>
            </condition>
            <then>
                <set field="managementRoleTypeId" from-field="parameters.managementRoleTypeId" default-value="${null}"/>
                <set field="currentStatusId" from-field="parameters.currentStatusId" default-value="${null}"/>
                <set field="nextStatusId" from-field="parameters.nextStatusId" default-value="${null}"/>
                <set field="managWeStatusEnumId" from-field="parameters.managWeStatusEnumId" default-value="${null}"/>
                <set field="workEffortTypeRootId" from-field="parameters.workEffortTypeRootId" default-value="${null}"/>

                <entity-one entity-name="WorkEffortType" value-field="workEffortType" auto-field-map="false" use-cache="true">
                    <field-map field-name="workEffortTypeId" from-field="workEffortTypeRootId"/>
                </entity-one>
                <set field="isTemplate" from-field="workEffortType.isTemplate"/>
                <log level="verbose" message=" *** isTemplate ${isTemplate}"/>
                <log level="verbose" message=" *** managWeStatusEnumId ${managWeStatusEnumId}"/>
                <entity-one entity-name="StatusItem" value-field="statusItem" auto-field-map="false" use-cache="true">
                    <field-map field-name="statusId" from-field="currentStatusId"/>
                </entity-one>
                <set field="currentStatusTypeId" from-field="statusItem.statusTypeId" default-value="${null}"/>
                <log level="verbose" message=" *** currentStatusTypeId ${currentStatusTypeId}"/>

                <!-- controlli su statusTypeId e currentStatusId bug 4279  -->
                <entity-and entity-name="StatusItemAndTypeView" list="statusItemAndTypeViewList" use-cache="false">
                    <field-map field-name="statusTypeId" from-field="parameters.statusTypeId"/>
                    <field-map field-name="statusId" from-field="currentStatusId"/>
                </entity-and>
                <if-empty field="statusItemAndTypeViewList">
                    <add-error>
                        <fail-property resource="BaseErrorLabels" property="DataNotAllowed"/>
                    </add-error>
                    <check-errors/>
                </if-empty>

                <!-- managWeStatusEnumId -->
                <log level="verbose" message=" *** managWeStatusEnumId ${managWeStatusEnumId}"/>
                <log level="verbose" message=" *** managementRoleTypeId ${managementRoleTypeId}"/>
                <log level="verbose" message=" *** workEffortTypeRootId ${workEffortTypeRootId}"/>
                <if>
                    <condition>
                        <if-compare operator="equals" value="ORGMANAGER" field="managWeStatusEnumId"/>
                    </condition>
                    <then>
                        <if-compare field="parameters.operation" operator="equals" value="UPDATE">
                            <entity-one entity-name="WorkEffortTypeStatus" value-field="workEffortTypeStatus" auto-field-map="false" use-cache="false">
                                <field-map field-name="workEffortTypeRootId" from-field="workEffortTypeRootId"/>
                                <field-map field-name="currentStatusId" from-field="currentStatusId"/>
                            </entity-one>
                            <if-not-empty field="workEffortTypeStatus.managementRoleTypeId">
                                <log level="verbose" message=" *** workEffortTypeStatus.managementRoleTypeId ${workEffortTypeStatus.managementRoleTypeId}"/>
                                <clear-field field="workEffortTypeStatus.managementRoleTypeId"/>
                                <store-value value-field="workEffortTypeStatus"/>
                                <log level="verbose" message=" *** workEffortTypeStatus.managementRoleTypeId ${workEffortTypeStatus.managementRoleTypeId}"/>
                            </if-not-empty>
                            <set field="parameters.managementRoleTypeId" value="${null}"/>
                        </if-compare>
                    </then>
                </if>
                <log level="verbose" message=" *** managementRoleTypeId ${managementRoleTypeId}"/>
                <if>
                    <condition>
                        <and>
                            <if-compare operator="equals" value="ROLE" field="managWeStatusEnumId"/>
                            <if-empty field="managementRoleTypeId"/>
                        </and>
                    </condition>
                    <then>
                        <add-error>
                            <fail-property resource="BaseErrorLabels" property="DataNotAllowed"/>
                        </add-error>
                        <check-errors/>
                    </then>
                </if>
                
                <!-- GN-3257 -->
                <if-compare operator="equals" value="ROLE" field="managWeStatusEnumId">
                    <if-compare operator="equals" value="Y" field="parameters.onlyResponsible">
                        <add-error>
                            <fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortTypeStatus_onlyResponsibleError"/>
                        </add-error>
                        <check-errors/>                    
                    </if-compare>
                </if-compare>

                <log level="verbose" message=" *** workEffortType.parentTypeId ${workEffortType.parentTypeId}"/>
                <log level="verbose" message=" *** isTemplate ${isTemplate}"/>
                <if>
                    <condition>
                        <if-compare field="isTemplate" operator="equals" value="Y"/>
                    </condition>
                    <then>
                        <if-compare field="managWeStatusEnumId" operator="not-equals" value="ORGMANAGER">
                            <add-error>
                                <fail-property resource="BaseErrorLabels" property="DataNotAllowed"/>
                            </add-error>
                            <check-errors/>
                        </if-compare>
                        <log level="verbose" message=" *** workEffortType.parentTypeId ${workEffortType.parentTypeId}"/>
                    </then>
                    <else>
                        <!-- controlli sui non template -->
                        <!-- managementRoleTypeId -->
                        <if>
                            <condition>
                                <and>
                                    <not>
                                        <if-empty field="managementRoleTypeId"/>
                                    </not>
                                    <not>
                                        <if-regexp field-name="managementRoleTypeId" expr="^WEM.*"/>
                                    </not>
                                </and>
                            </condition>
                            <then>
                                <add-error>
                                    <fail-property resource="BaseErrorLabels" property="DataNotAllowed"/>
                                </add-error>
                                <check-errors/>
                            </then>
                        </if>
                    </else>
                </if>
                <log level="verbose" message="statusItem.actStEnumId = ${statusItem.actStEnumId}"/>
                <if>
                    <condition>
                        <not>
                            <or>
                                <if-compare field="statusItem.actStEnumId" operator="equals" value="ACTSTATUS_PENDING"/>
                                <if-compare field="statusItem.actStEnumId" operator="equals" value="ACTSTATUS_ACTIVE"/>
                                <if-compare field="statusItem.actStEnumId" operator="equals" value="ACTSTATUS_CLOSED"/>
                            </or>
                        </not>
                    </condition>
                    <then>
                        <add-error>
                            <fail-property resource="BaseErrorLabels" property="DataNotAllowed"/>
                        </add-error>
                        <check-errors/>
                    </then>
                </if>
            </then>
        </if>
        <check-errors/>
    </simple-method>


    <simple-method method-name="crudServiceOperation_WorkEffortTypeStatus" short-description="crudServiceValueValidation_WorkEffortTypeStatus">
        <log level="verbose" message="**** parameters=${parameters}"/>
        <set-service-fields service-name="crudServiceOperation" to-map="crudServiceOperationMap" map="parameters"/>
        <set field="parameters" from-field="parameters.parameters"/>
        <if>
            <condition>
                <or>
                    <if-compare field="parameters.operation" operator="equals" value="CREATE"/>
                    <if-compare field="parameters.operation" operator="equals" value="UPDATE"/>
                </or>
            </condition>
            <then>
                <!-- aggiungere SVC bug 4279 rimosso nextStatusId Togliere dalla mappa
                    Stato Seguente; il passaggio di stato sarà regolato dalla gestione standard
                    dei passaggi di stato.  -->
            </then>
        </if>
        <if-empty field="parameters.ctrlScoreEnumId">
        	<set field="ctrlScoreEnumId" value="CTRL_SCORE_NONE" />
        </if-empty>
        <call-service service-name="crudServiceOperation" in-map-name="crudServiceOperationMap">
            <result-to-field result-name="id"/>
        </call-service>
        <check-errors/>
        <field-to-result field="id"/>
    </simple-method>

    <!-- ************************************************************** -->
    <!-- WorkEffort -->
    <!-- ************************************************************** -->

    <simple-method method-name="crudServiceOperation_WorkEffort" short-description="crudServiceOperation_WorkEffort">
        <log level="verbose" message="**** parameters=${parameters}"/>
        <set field="parametersCrud" from-field="parameters"/>
        <set field="parameters" from-field="parameters.parameters"/>
        <if>
            <condition>
                <or>
                    <if-compare field="parameters.operation" operator="equals" value="CREATE"/>
                    <if-compare field="parameters.operation" operator="equals" value="UPDATE"/>
                </or>
            </condition>
            <then>
       
                <set field="orgUnitRoleTypeId" from-field="parameters.orgUnitRoleTypeId"/>
                <set field="orgUnitId" from-field="parameters.orgUnitId"/>

                <if-compare field="parameters.operation" operator="equals" value="UPDATE">
                    <!-- Carica il workEffort attuale -->
                    <entity-one entity-name="WorkEffort" value-field="workEffort" auto-field-map="false" use-cache="true">
                        <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
                    </entity-one>

                    <!-- eseguo controllo note/pesi se sto modificando lo stato. Nel caso
                        di scheda estendo il controllo a tutta la gerarchia -->
                    <if-not-empty field="workEffort">
                        <if-not-empty field="parameters.currentStatusId">
                            <if-compare-field operator="not-equals" field="workEffort.currentStatusId" to-field="parameters.currentStatusId">
                                <entity-one entity-name="WorkEffortType" value-field="workEffortType" auto-field-map="false">
                                    <field-map field-name="workEffortTypeId" from-field="workEffort.workEffortTypeId"/>
                                    <select-field field-name="isRoot"/>
                                </entity-one>

                                <if-not-empty field="workEffortType">
                                    <if>
                                        <condition>
                                            <if-compare operator="equals" value="Y" field="workEffortType.isRoot"/>
                                        </condition>
                                        <then>
                                            <!-- prendo l'obiettivo root -->
                                            <set field="workEffortIdRootFrom" value=""/>
                                            <entity-condition list="workEffortAssocFromList" entity-name="WorkEffortAssoc">
                                                <condition-list>
                                                    <condition-expr field-name="workEffortIdTo" from-field="parameters.workEffortId"/>
                                                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                                                </condition-list>
                                            </entity-condition>
                                            <first-from-list entry="workEffortAssocFrom" list="workEffortAssocFromList"/>

                                            <if-not-empty field="workEffortAssocFrom">
                                                <set field="workEffortIdRootFrom" from-field="workEffortAssocFrom.workEffortIdFrom"/>

                                                <set-service-fields service-name="checkWorkEffortStatusService" to-map="checkWorkEffortStatusServiceMap" map="parameters"/>
                                                <set field="checkWorkEffortStatusServiceMap.workEffortId" from-field="workEffortIdRootFrom"/>
                                                <set field="checkWorkEffortStatusServiceMap.statusId" from-field="parameters.currentStatusId"/>

                                                <call-service service-name="checkWorkEffortStatusService" in-map-name="checkWorkEffortStatusServiceMap"/>
                                                <check-errors/>
                                            </if-not-empty>

                                            <!-- prendo i discendenti partendo dal root appena trovato -->
                                            <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssoc" use-cache="true">
                                                <condition-list>
                                                    <condition-expr field-name="workEffortIdFrom" from-field="workEffortIdRootFrom"/>
                                                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                                                </condition-list>
                                            </entity-condition>

                                            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                                                <clear-field field="checkWorkEffortStatusServiceMap"/>
                                                <set-service-fields service-name="checkWorkEffortStatusService" to-map="checkWorkEffortStatusServiceMap" map="parameters"/>
                                                <set field="checkWorkEffortStatusServiceMap.workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                                                <set field="checkWorkEffortStatusServiceMap.statusId" from-field="parameters.currentStatusId"/>

                                                <call-service service-name="checkWorkEffortStatusService" in-map-name="checkWorkEffortStatusServiceMap"/>
                                                <check-errors/>
                                            </iterate>
                                        </then>
                                        <else>
                                            <set-service-fields service-name="checkWorkEffortStatusService" to-map="checkWorkEffortStatusServiceMap" map="parameters"/>
                                            <set field="checkWorkEffortStatusServiceMap.statusId" from-field="parameters.currentStatusId"/>

                                            <call-service service-name="checkWorkEffortStatusService" in-map-name="checkWorkEffortStatusServiceMap"/>
                                            <check-errors/>

                                            <!-- l'obiettivo potrebbe discendere da una scheda, quindi ripeto
                                                la gestione di prima -->
                                            <set field="workEffortIdRootFrom" value=""/>
                                            <entity-condition list="workEffortAssocFromList" entity-name="WorkEffortAssoc">
                                                <condition-list>
                                                    <condition-expr field-name="workEffortIdTo" from-field="parameters.workEffortId"/>
                                                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                                                </condition-list>
                                            </entity-condition>
                                            <first-from-list entry="workEffortAssocFrom" list="workEffortAssocFromList"/>

                                            <if-not-empty field="workEffortAssocFrom">
                                                <set field="workEffortIdRootFrom" from-field="workEffortAssocFrom.workEffortIdFrom"/>
                                            </if-not-empty>

                                            <!-- prendo i discendenti partendo dal root appena trovato -->
                                            <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssoc" use-cache="true">
                                                <condition-list>
                                                    <condition-expr field-name="workEffortIdFrom" from-field="workEffortIdRootFrom"/>
                                                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                                                </condition-list>
                                            </entity-condition>

                                            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                                                <clear-field field="checkWorkEffortStatusServiceMap"/>
                                                <set-service-fields service-name="checkWorkEffortStatusService" to-map="checkWorkEffortStatusServiceMap" map="parameters"/>
                                                <set field="checkWorkEffortStatusServiceMap.workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                                                <set field="checkWorkEffortStatusServiceMap.statusId" from-field="parameters.currentStatusId"/>

                                                <call-service service-name="checkWorkEffortStatusService" in-map-name="checkWorkEffortStatusServiceMap"/>
                                                <check-errors/>
                                            </iterate>
                                        </else>
                                    </if>
                                </if-not-empty>
                            </if-compare-field>
                        </if-not-empty>
                    </if-not-empty>
                    <!-- fine controllo note/pesi -->

                    <if>
                        <condition>
                            <and>
                                <if-empty field="orgUnitRoleTypeId"/>
                                <not>
                                    <if-empty field="orgUnitId"/>
                                </not>
                            </and>
                        </condition>
                        <then>
                            <set field="orgUnitRoleTypeId" from-field="workEffort.orgUnitRoleTypeId"/>
                        </then>
                    </if>
                    
                    <if>
                        <condition>
                            <and>
                                <if-empty field="orgUnitId"/>
                                <not>
                                    <if-empty field="orgUnitRoleTypeId"/>
                                </not>
                            </and>
                        </condition>
                        <then>
                            <set field="orgUnitId" from-field="workEffort.orgUnitId"/>
                        </then>
                    </if>

                </if-compare>

                <!-- Verifica organizationId -->
                <if-not-empty field="parameters.organizationId">
                    <entity-one entity-name="PartyRoleIntOrgView" value-field="partyRoleIntOrgView" auto-field-map="false" use-cache="true">
                        <field-map field-name="partyId" from-field="parameters.organizationId"/>
                    </entity-one>
                    <if-empty field="partyRoleIntOrgView">
                        <add-error>
                            <fail-property resource="WorkeffortExtErrorLabels" property="OrganizationRoleNotAllowed"/>
                        </add-error>
                        <check-errors/>
                    </if-empty>
                </if-not-empty>
                   
                <!-- Verifica orgUnitRoleTypeId e workEffortType orgUnitRoleTypeId -->              
                <log level="always" message="*********************************************** orgUnitId = ${orgUnitId}"></log>
                <log level="always" message="*********************************************** orgUnitRoleTypeId = ${orgUnitRoleTypeId}"></log>
                <log level="always" message="*********************************************** parameters.workEffortTypeId = ${parameters.workEffortTypeId}"></log>
                <if>
                	<condition>
                	    <and>
                            <not>
                                <if-empty field="orgUnitRoleTypeId"/>
                            </not>
                            <not>
                                <if-empty field="parameters.workEffortTypeId"/>
                            </not>                	    
                	    </and>
                	</condition>
                	<then>
                   		<entity-one entity-name="WorkEffortType" value-field="workEffortType" auto-field-map="false">
                        	<field-map field-name="workEffortTypeId" from-field="parameters.workEffortTypeId"/>
                    	</entity-one>
                        <log level="always" message="*********************************************** workEffortType.orgUnitRoleTypeId = ${workEffortType.orgUnitRoleTypeId}"></log>
		                <log level="always" message="*********************************************** workEffortType.orgUnitRoleTypeId2 = ${workEffortType.orgUnitRoleTypeId2}"></log>
		                <log level="always" message="*********************************************** workEffortType.orgUnitRoleTypeId3 = ${workEffortType.orgUnitRoleTypeId3}"></log>
		                <if-not-empty field="workEffortType">
                    		<if-not-empty field="workEffortType.orgUnitRoleTypeId">
                    			<if-empty field="workEffortType.orgUnitRoleTypeId2">
                                	<if-compare-field field="orgUnitRoleTypeId" operator="not-equals" to-field="workEffortType.orgUnitRoleTypeId">
                                		<add-error>
                                    		<fail-property resource="WorkeffortExtErrorLabels" property="OrgUnitRoleWorkEffortAndTypeNotMatch"/>
                                		</add-error>
                                		<check-errors/>                    			
                    				</if-compare-field>                    			
                    			</if-empty>
                    			<if-not-empty field="workEffortType.orgUnitRoleTypeId2">
                    				<if-empty field="workEffortType.orgUnitRoleTypeId3">
                    					<if>
                    					    <condition>
                    					        <and>
                    					            <if-compare-field field="orgUnitRoleTypeId"  operator="not-equals" to-field="workEffortType.orgUnitRoleTypeId"/>
                    					            <if-compare-field field="orgUnitRoleTypeId" operator="not-equals" to-field="workEffortType.orgUnitRoleTypeId2"/>
                    					        </and>
                    					    </condition>
                    					    <then>
                                				<add-error>
                                    				<fail-property resource="WorkeffortExtErrorLabels" property="OrgUnitRoleWorkEffortAndTypeNotMatch"/>
                                				</add-error>
                                				<check-errors/>                       					    
                    					    </then>
                    					</if>
                    				</if-empty>
                    				<if-not-empty field="workEffortType.orgUnitRoleTypeId3">
                    				    <if>
                    				        <condition>
                    				            <and>
                    				                <if-compare-field field="orgUnitRoleTypeId" operator="not-equals" to-field="workEffortType.orgUnitRoleTypeId"/>
                    				                <if-compare-field field="orgUnitRoleTypeId" operator="not-equals" to-field="workEffortType.orgUnitRoleTypeId2"/>
                    				                <if-compare-field field="orgUnitRoleTypeId" operator="not-equals" to-field="workEffortType.orgUnitRoleTypeId3"/>
                    				            </and>
                    				        </condition>
                    				        <then>
                    				            <add-error>
                                    				<fail-property resource="WorkeffortExtErrorLabels" property="OrgUnitRoleWorkEffortAndTypeNotMatch"/>
                                				</add-error>
                                				<check-errors/>
                    				        </then>
                    				    </if>
                    				</if-not-empty>
                    			</if-not-empty>
                    		</if-not-empty>
                    	</if-not-empty>
                    	<clear-field field="workEffortType"/>                                   	
                	</then>
                </if>
            </then>
        </if>

        <if-compare field="parameters.operation" operator="equals" value="CREATE">
            <!-- ************************************************************** -->
            <!-- CREATE -->
            <!-- ************************************************************** -->
            <if-not-empty field="parameters.workEffortName2">
                <set field="parameters.workEffortName" from-field="parameters.workEffortName2"/>
                <set field="parameters.workEffortNameLang" from-field="parameters.workEffortNameLang2"/>
            </if-not-empty>
            
            <set-service-fields service-name="createWorkEffort" map="parameters" to-map="createWorkEffortMap"/>
            <set field="createWorkEffortMap.workEffortAssocTypeId" from-field="parameters.weAssocTypeId"/>
			
			<!-- Carica il WorkEffortType -->
            <log message="createWorkEffortMap.workEffortTypeId ${createWorkEffortMap.workEffortTypeId}" level="always" />                       
            <entity-one entity-name="WorkEffortType" value-field="workEffortType" auto-field-map="false">
                <field-map field-name="workEffortTypeId" from-field="createWorkEffortMap.workEffortTypeId"/>
            </entity-one>			
						            
            <!-- Imposta il default per date -->
            <if-compare field="workEffortType.isRoot" operator="equals" value="Y">
                <if-empty field="createWorkEffortMap.estimatedStartDate">
                    <set field="createWorkEffortMap.estimatedStartDate" from-field="workEffortType.fromDate"/>
                </if-empty>
                <if-empty field="createWorkEffortMap.estimatedCompletionDate">
                    <set field="createWorkEffortMap.estimatedCompletionDate" from-field="workEffortType.thruDate"/>
                </if-empty>
            </if-compare>
            
            <if-empty field="parameters.workEffortRevisionId">
                <!-- GN-4033 begin -->
				<if-compare operator="not-equals" field="parameters.isObiettivo" value="Y">				     	
					<if-not-empty field="workEffortType">
						<clear-field field="workEffortTypeContent"/>
						<entity-one value-field="workEffortTypeContent" entity-name="WorkEffortTypeContent" auto-field-map="false">
							<field-map field-name="workEffortTypeId" from-field="workEffortType.workEffortTypeId"/>
							<field-map field-name="contentId" value="WEFLD_MAIN"/>
						</entity-one>
					
						<if>
							<condition>
								<and>
									<not>
										<if-empty field="workEffortTypeContent"/>
									</not>
									<not>
										<if-empty field="workEffortTypeContent.params"/>
									</not>
								</and>
							</condition>
							<then>
								<call-bsh>
									<![CDATA[
		   								wetcContext = new java.util.HashMap();
		       							org.ofbiz.base.util.BshUtil.eval(workEffortTypeContent.get("params"), wetcContext);
		   									
										result = new java.util.HashMap();
							    		if (org.ofbiz.base.util.UtilValidate.isNotEmpty(wetcContext.get("onlyRefDate"))) {
							        		result.put("onlyRefDate", wetcContext.get("onlyRefDate"));
							    		}
							    		if (org.ofbiz.base.util.UtilValidate.isNotEmpty(wetcContext.get("usePeriod"))) {
							        		result.put("usePeriod", wetcContext.get("usePeriod"));
							    		}								    									    								           
							    		return result;								
									]]>
								</call-bsh>
							
								<if-compare field="onlyRefDate" operator="equals" value="Y">
								    <if-not-empty field="usePeriod">
								        <entity-one value-field="customTimePeriodThru2" entity-name="CustomTimePeriod" auto-field-map="false">
        									<field-map field-name="customTimePeriodId" from-field="parameters.periodThruDate2"/>
        								</entity-one>
        								<if-not-empty field="customTimePeriodThru2">
        								    <set field="createWorkEffortMap.estimatedStartDate" from-field="customTimePeriodThru2.thruDate" type="Timestamp"/>
        								    <set field="createWorkEffortMap.estimatedCompletionDate" from-field="customTimePeriodThru2.thruDate" type="Timestamp"/>
        								</if-not-empty>
								    <else>
										<set field="createWorkEffortMap.estimatedStartDate" from-field="parameters.estimatedCompletionDate2" type="Timestamp"/>
										<set field="createWorkEffortMap.estimatedCompletionDate" from-field="parameters.estimatedCompletionDate2" type="Timestamp"/>
									</else>
									</if-not-empty>
								<else>
								    <if-not-empty field="usePeriod">
								        <entity-one value-field="customTimePeriodFrom" entity-name="CustomTimePeriod" auto-field-map="false">
        							    	<field-map field-name="customTimePeriodId" from-field="parameters.periodFromDate"/>
        			                	</entity-one>
        								<if-not-empty field="customTimePeriodFrom">
        									<set field="createWorkEffortMap.estimatedStartDate" from-field="customTimePeriodFrom.fromDate" type="Timestamp"/>
        								</if-not-empty>
								        <entity-one value-field="customTimePeriodThru" entity-name="CustomTimePeriod" auto-field-map="false">
        							    	<field-map field-name="customTimePeriodId" from-field="parameters.periodThruDate"/>
        			                	</entity-one>
        								<if-not-empty field="customTimePeriodThru">
        									<set field="createWorkEffortMap.estimatedCompletionDate" from-field="customTimePeriodThru.thruDate" type="Timestamp"/>
        								</if-not-empty>        								
								    </if-not-empty>
								</else>
								</if-compare>					
							</then>
						</if>				
					</if-not-empty>
				</if-compare>			
			    <!-- GN-4033 end -->
            </if-empty>            
            
			<set field="estimatedStartDate" from-field="createWorkEffortMap.estimatedStartDate" type="Timestamp"/>
            <set field="estimatedCompletionDate" from-field="createWorkEffortMap.estimatedCompletionDate" type="Timestamp"/>                        
			
			<set field="createWorkEffortMap.isPosted" from-field="parameters.isPosted"/>


            <!-- Imposta il default per campo sourceReferenceId -->
            <!-- Bug 3994 il meccanismo é sostituito dal metodo WorkEffortSequence.processWorkEffortSequence -->

            <if-not-empty field="workEffortType">
                <set field="createWorkEffortMap.weightKpi" from-field="workEffortType.weightKpi" type="Double" set-if-empty="false"/>
                <set field="createWorkEffortMap.weightSons" from-field="parameters.weightSons" default-value="${workEffortType.weightSons}" type="Double" set-if-empty="false"/>
                <set field="createWorkEffortMap.weightAssocWorkEffort" from-field="workEffortType.weightAssocWorkEffort" type="Double" set-if-empty="false"/>
                <set field="createWorkEffortMap.totalEnumIdKpi" from-field="workEffortType.totalEnumIdKpi" set-if-empty="false"/>
                <set field="createWorkEffortMap.totalEnumIdSons" from-field="workEffortType.totalEnumIdSons" set-if-empty="false"/>
                <set field="createWorkEffortMap.totalEnumIdAssoc" from-field="workEffortType.totalEnumIdAssoc" set-if-empty="false"/>
                <set field="createWorkEffortMap.workEffortAssocTypeId" from-field="workEffortType.workEffortAssocTypeId" set-if-empty="false"/>

                <log message="createWorkEffortMap.workEffortTypeId ${createWorkEffortMap.workEffortTypeId}" level="always"/> 
                <log message="estimatedStartDate ${estimatedStartDate}" level="always"/> 
                <log message="estimatedCompletionDate ${estimatedCompletionDate}" level="always"/> 
                        
                <!-- bug 4279 Nel caso l’utente crei una nuova scheda il nuovo attributo
                    WORK_EFFORT_TYPE_PERIOD_ID dovra essere eventualmente valorizzato automaticamente
                    selezionando quello con Fase Previsto in stato Aperto o Riaperto oppure quello con Fase consuntivo in stato Aperto riferibile al Tipo Scheda in oggetto.
                    GN-1894: si richiede inoltre che le date del periodo intersechino le date del workEffort -->
                <!-- inoltre, se al servizio non arriva nessuno stato configurato, 
                    allora La scheda dovra riportare lo stato iniziale del processo (se esiste) assegnato
                    alla rilevazione (Status_item con sequenza piu bassa) -->
                <!-- se non esiste nessun processo attivo, allora si usa l'eventuale defaultStatusPrefix -->
            	<if>
                	<condition>
                    	<and>
                        	<not>
                            	<if-empty field="estimatedStartDate"/>
                        	</not>
                        	<not>
                            	<if-empty field="estimatedCompletionDate"/>
                        	</not>
                    	</and>
                	</condition>
                	<then>
                		<entity-condition list="workEffortTypePeriodList" entity-name="WorkEffortTypePeriodAndFromThruDate">
            				<condition-list>
            					<condition-expr field-name="organizationId" from-field="createWorkEffortMap.organizationId"/>
                        		<condition-expr field-name="workEffortTypeId" from-field="createWorkEffortMap.workEffortTypeId"/>
                        		<condition-expr field-name="glFiscalTypeEnumId" value="GLFISCTYPE_TARGET"/>
            					<condition-list combine="or">
            						<condition-expr field-name="statusEnumId" value="OPEN"/>
            						<condition-expr field-name="statusEnumId" value="REOPEN"/>
            					</condition-list>
            					<condition-expr field-name="fromDate" operator="less-equals" from-field="estimatedCompletionDate"/>
            					<condition-expr field-name="thruDate" operator="greater-equals" from-field="estimatedStartDate"/>
            				</condition-list>
            				<order-by field-name="-thruDate"/>
            			</entity-condition>
                        <log message="workEffortTypePeriodList ${workEffortTypePeriodList}" level="always"/> 
            			<if-empty field="workEffortTypePeriodList">
	            			<entity-condition list="workEffortTypePeriodList" entity-name="WorkEffortTypePeriodAndFromThruDate">
	            				<condition-list>
	            					<condition-expr field-name="organizationId" from-field="createWorkEffortMap.organizationId"/>
                        			<condition-expr field-name="workEffortTypeId" from-field="createWorkEffortMap.workEffortTypeId"/>
                        			<condition-expr field-name="glFiscalTypeEnumId" value="GLFISCTYPE_ACTUAL"/>
            						<condition-expr field-name="statusEnumId" value="OPEN"/>
            						<condition-expr field-name="fromDate" operator="less-equals" from-field="estimatedCompletionDate"/>
            						<condition-expr field-name="thruDate" operator="greater-equals" from-field="estimatedStartDate"/>
	            				</condition-list>
	            			</entity-condition>
            			</if-empty>
                        <log message="workEffortTypePeriodList ${workEffortTypePeriodList}" level="always"/> 
                	</then>
            	</if>
            	<if-not-empty field="workEffortTypePeriodList">
                    <first-from-list entry="workEffortTypePeriod" list="workEffortTypePeriodList"/>
                    <set field="createWorkEffortMap.workEffortTypePeriodId" from-field="workEffortTypePeriod.workEffortTypePeriodId"/>
                    <log message="parameters.currentStatusId ${parameters.currentStatusId}" level="always"/> 
                    <if>
                        <condition>
                            <not>
                                <if-empty field="parameters.currentStatusId"/>
                            </not>
                        </condition>
                        <then>
                            <set field="createWorkEffortMap.currentStatusId" from-field="parameters.currentStatusId"/>
                        </then>
                        <else>
                            <!-- La scheda dovra riportare lo stato iniziale del processo assegnato
                                alla rilevazione (Status_item con sequenza piu bassa) -->
                            <entity-condition list="statusItemList" entity-name="StatusItem">
                                <condition-expr field-name="statusTypeId" from-field="workEffortTypePeriod.statusTypeId"/>
                                <order-by field-name="sequenceId"/>
                            </entity-condition>
                            <first-from-list entry="initStatus" list="statusItemList"/>
                            <if-not-empty field="initStatus">
                                <set field="createWorkEffortMap.currentStatusId" from-field="initStatus.statusId"/>
                            </if-not-empty>
                        </else>
                    </if>
                </if-not-empty>
                <log message="createWorkEffortMap.currentStatusId ${createWorkEffortMap.currentStatusId}" level="always"/> 
                <log message="parameters.defaultStatusPrefix ${parameters.defaultStatusPrefix}" level="always"/> 
                    
                <if>
                    <condition>
                        <if-empty field="createWorkEffortMap.currentStatusId"/>
                    </condition>
                    <then>
                        <if>
                            <condition>
                                <not>
                                    <if-empty field="parameters.defaultStatusPrefix"/>
                                </not>
                            </condition>
                            <then>
                                <entity-condition list="statusItemList" entity-name="StatusItem">
                                    <condition-expr field-name="statusId" operator="like" value="${parameters.defaultStatusPrefix}%"/>
                                    <order-by field-name="sequenceId"/>
                                </entity-condition>
                                <first-from-list entry="initStatus" list="statusItemList"/>
                                <set field="createWorkEffortMap.currentStatusId" from-field="initStatus.statusId"/>
                            </then>
                            <else>
                                <set field="createWorkEffortMap.currentStatusId" from-field="parameters.currentStatusId"/>
                            </else>
                        </if>
                    </then>
                </if>
                
                <!-- mettere dentro il tag seguente le implementazioni da fare in tutti i casi tranne la storicizzazione PRIMA che il workEffort venga creato -->
                <if-empty field="parameters.workEffortRevisionId">
                	<!-- gn602 begin -->
					<!-- valorizzare le date scheduled come le estimated, se le scheduled sono significative per il tipo obiettivo 
				     	ossia se il param corrispondente del workEffortType e' Y, e se NON sto inserendo un obiettivo semplice -->
				    <if-compare operator="not-equals" field="parameters.isObiettivo" value="Y">				     	
						<if-not-empty field="workEffortType">
							<clear-field field="workEffortTypeContent"/>
							<entity-one value-field="workEffortTypeContent" entity-name="WorkEffortTypeContent" auto-field-map="false">
								<field-map field-name="workEffortTypeId" from-field="workEffortType.workEffortTypeId"/>
								<field-map field-name="contentId" value="WEFLD_MAIN"/>
							</entity-one>
					
							<if>
								<condition>
									<and>
										<not>
											<if-empty field="workEffortTypeContent"/>
										</not>
										<not>
											<if-empty field="workEffortTypeContent.params"/>
										</not>
									</and>
								</condition>
								<then>
									<call-bsh>
										<![CDATA[
		   									wetcContext2 = new java.util.HashMap();
		       								org.ofbiz.base.util.BshUtil.eval(workEffortTypeContent.get("params"), wetcContext2);
		   									
											result2 = new java.util.HashMap();
							    			if (org.ofbiz.base.util.UtilValidate.isNotEmpty(wetcContext2.get("showScheduledDates"))) {
							        			result2.put("showScheduledDates", wetcContext2.get("showScheduledDates"));
							    			}	
							    			if (org.ofbiz.base.util.UtilValidate.isNotEmpty(wetcContext2.get("descrOrgUnitNoteInsert"))) {
							        			result2.put("descrOrgUnitNoteInsert", wetcContext2.get("descrOrgUnitNoteInsert"));
							    			}							    								           
							    			return result2;								
										]]>
									</call-bsh>
							
									<if-compare field="showScheduledDates" operator="equals" value="Y">
										<if-empty field="parameters.scheduledStartDate">
											<set field="createWorkEffortMap.scheduledStartDate" from-field="createWorkEffortMap.estimatedStartDate" type="Timestamp"/>
										</if-empty>
										<if-empty field="parameters.scheduledCompletionDate">
	            							<set field="createWorkEffortMap.scheduledCompletionDate" from-field="createWorkEffortMap.estimatedCompletionDate" type="Timestamp"/>
	            						</if-empty>   
									</if-compare>							
								</then>
							</if>				
						</if-not-empty>
					</if-compare>			
					<!-- gn602 end -->
                </if-empty>

            </if-not-empty>

            <if>
                <condition>
                    <and>
                        <not>
                            <if-empty field="parameters.partyId"/>
                        </not>
                        <not>
                            <if-empty field="parameters.roleTypeId"/>
                        </not>
                    </and>
                </condition>
                <then>
                    <set-service-fields service-name="createWorkEffortAndPartyAssign" map="parameters" to-map="createWorkEffortAndPartyAssignParams"/>
                    <set field="createWorkEffortAndPartyAssignParams.workEffortId" from-field="id.workEffortId"/>

                    <call-service service-name="createWorkEffortAndPartyAssign" in-map-name="createWorkEffortAndPartyAssignParams">
                        <result-to-field result-name="workEffortId" field="id.workEffortId"/>
                    </call-service>
                    <check-errors/>
                </then>
                <else>
                    <call-service service-name="createWorkEffort" in-map-name="createWorkEffortMap">
                        <result-to-field result-name="workEffortId" field="id.workEffortId"/>
                    </call-service>
                    <check-errors/>
                </else>
            </if>

            <if-not-empty field="id.workEffortId">          
            	<if-empty field="parameters.workEffortRevisionId">
                	<!-- GN-4034 begin -->
					<if-compare operator="not-equals" field="parameters.isObiettivo" value="Y">				     	
						<if-not-empty field="workEffortType">
							<clear-field field="workEffortTypeContent"/>
							<entity-one value-field="workEffortTypeContent" entity-name="WorkEffortTypeContent" auto-field-map="false">
								<field-map field-name="workEffortTypeId" from-field="workEffortType.workEffortTypeId"/>
								<field-map field-name="contentId" value="WEFLD_MAIN"/>
							</entity-one>
					
							<if>
								<condition>
									<and>
										<not>
											<if-empty field="workEffortTypeContent"/>
										</not>
										<not>
											<if-empty field="workEffortTypeContent.params"/>
										</not>
									</and>
								</condition>
								<then>
									<call-bsh>
										<![CDATA[
		   									wetcContext3 = new java.util.HashMap();
		       								org.ofbiz.base.util.BshUtil.eval(workEffortTypeContent.get("params"), wetcContext3);
		   									
											result3 = new java.util.HashMap();
							    			if (org.ofbiz.base.util.UtilValidate.isNotEmpty(wetcContext3.get("roleTypeId"))) {
							        			result3.put("insertRoleTypeId", wetcContext3.get("roleTypeId"));
							    			}							    								           
							    			return result3;								
										]]>
									</call-bsh>
							
									<if-not-empty field="insertRoleTypeId">
									    <clear-field field="insertWorkEffortPartyAssignment"/>
									    <make-value value-field="insertWorkEffortPartyAssignment" entity-name="WorkEffortPartyAssignment"/>
									    <set field="insertWorkEffortPartyAssignment.workEffortId" from-field="id.workEffortId"/>
									    <set field="insertWorkEffortPartyAssignment.partyId" from-field="userLogin.partyId"/>
									    <set field="insertWorkEffortPartyAssignment.roleTypeId" from-field="insertRoleTypeId"/>
									    <set field="insertWorkEffortPartyAssignment.fromDate" from-field="estimatedStartDate" type="Timestamp"/>
									    <set field="insertWorkEffortPartyAssignment.thruDate" from-field="estimatedCompletionDate" type="Timestamp"/>
                						<set field="insertWorkEffortPartyAssignment.roleTypeWeight" value="0" type="Double"/>
                						<set field="insertWorkEffortPartyAssignment.sequenceNum" value="1" type="Long"/>
                						<set field="insertWorkEffortPartyAssignment.isPosted" value="N"/>
                						<create-value value-field="insertWorkEffortPartyAssignment"/>
									</if-not-empty>							
								</then>
							</if>				
						</if-not-empty>
					</if-compare>			
			    	<!-- GN-4034 end -->
            	</if-empty>
            
                <if-not-empty field="workEffortType">
                    <entity-one value-field="we" entity-name="WorkEffort">
                        <field-map field-name="workEffortId" from-field="id.workEffortId"/>
                    </entity-one>
                    <entity-condition list="workEffortAttributeList" entity-name="WorkEffortTypeAttr">
                        <condition-list>
                            <condition-expr field-name="workEffortTypeId" from-field="workEffortType.workEffortTypeId"/>
                            <condition-expr field-name="isDefault" value="Y"/>
                            <condition-expr field-name="isAttribute" value="Y"/>
                        </condition-list>
                    </entity-condition>

                    <if-not-empty field="workEffortAttributeList">
                        <iterate entry="workEffortAttribute" list="workEffortAttributeList">
                            <set field="createWorkEffortAttributeParams.entityName" value="WorkEffortAttribute"/>
                            <set field="createWorkEffortAttributeParams.operation" value="CREATE"/>
                            <make-value value-field="createWorkEffortAttributeParams.parameters" entity-name="WorkEffortAttribute"/>
                            <set field="createWorkEffortAttributeParams.parameters.workEffortId" from-field="id.workEffortId"/>
                            <set field="createWorkEffortAttributeParams.parameters.attrName" from-field="workEffortAttribute.attrName"/>
                            <set field="createWorkEffortAttributeParams.parameters.sequenceId" from-field="workEffortAttribute.sequenceId"/>
                            <set field="createWorkEffortAttributeParams.parameters.attrValue" value=" "/>
                            <call-object-method method-name="getAllFields" obj-field="createWorkEffortAttributeParams.parameters" ret-field="createWorkEffortAttributeParams.parameters"/>
                            <call-service service-name="crudServiceDefaultOrchestration" in-map-name="createWorkEffortAttributeParams"/>
                            <check-errors/>
                        </iterate>
                    </if-not-empty>

                    <!-- La creazione delle note di default non deve essere eseguita quando
                        viene copiata o storicizzata una scheda, ma solo in caso di COPY_ALL ! -->
                    <log message="parameters.skipAutomaticServiceNote ${parameters.skipAutomaticServiceNote}" level="always"/>
                    <if>
                        <condition>
                            <or>
                                <if-empty field="parameters.skipAutomaticServiceNote"/>
                                <if-compare operator="not-equals" value="Y" field="parameters.skipAutomaticServiceNote"/>
                            </or>
                        </condition>
                        <then>
                            <entity-one value-field="orgUnitParty" entity-name="Party" auto-field-map="false">
                                <field-map field-name="partyId" from-field="orgUnitId"/>
                            </entity-one>
                            <entity-condition list="workEffortNoteList" entity-name="WorkEffortTypeAttrAndNoteData">
                                <condition-list>
                                    <condition-expr field-name="workEffortTypeId" from-field="workEffortType.workEffortTypeId"/>
                                    <condition-expr field-name="isDefault" value="Y"/>
                                    <condition-expr field-name="isNote" value="Y"/>
                                </condition-list>
                            </entity-condition>

                            <if-not-empty field="workEffortNoteList">
                                <iterate entry="workEffortAttrNote" list="workEffortNoteList">
                                    <make-value value-field="noteData" entity-name="NoteData"/>
                                    <sequenced-id sequence-name="NoteData" field="noteData.noteId"/>
                                    <set field="noteData.noteName" from-field="workEffortAttrNote.attrName"/>
                                    <set field="noteData.noteNameLang" from-field="workEffortAttrNote.attrNameLang"/>
                                    <if-not-empty field="descrOrgUnitNoteInsert">
                                        <if-compare-field operator="equals" field="workEffortAttrNote.sequenceId" to-field="descrOrgUnitNoteInsert" type="Double">
                                            <if-not-empty field="orgUnitParty">
                                                <set field="noteData.noteInfo" from-field="orgUnitParty.partyName"/>
                                                <set field="noteData.noteInfoLang" from-field="orgUnitParty.partyNameLang"/>
                                            </if-not-empty>                                      
                                            <else>
                                                <set field="noteData.noteInfo" from-field="workEffortAttrNote.noteInfo"/>
                                                <set field="noteData.noteInfoLang" from-field="workEffortAttrNote.noteInfoLang"/>
                                            </else>
                                        </if-compare-field>
                                        <else>                                                                         
                                            <set field="noteData.noteInfo" from-field="workEffortAttrNote.noteInfo"/>
                                            <set field="noteData.noteInfoLang" from-field="workEffortAttrNote.noteInfoLang"/>
                                        </else>
                                    </if-not-empty>
                                    <set field="noteData.noteParty" from-field="userLogin.partyId"/>
                                    <!-- data inizio workEffort -->
                                    <set field="noteData.noteDateTime" from-field="we.estimatedStartDate"/>
                                    <create-value value-field="noteData"/>
                                    <check-errors/>

                                    <make-value value-field="workEffortNote" entity-name="WorkEffortNote"/>
                                    <set field="workEffortNote.workEffortId" from-field="id.workEffortId"/>
                                    <set field="workEffortNote.noteId" from-field="noteData.noteId"/>
                                    <set field="workEffortNote.sequenceId" from-field="workEffortAttrNote.sequenceId"/>
                                    <!-- default delle note viene dal tipologia -->
                                    <set field="workEffortNote.internalNote" from-field="workEffortAttrNote.internalNote"/>
                                    <set field="workEffortNote.isMain" from-field="workEffortAttrNote.isMain"/>
                                    <set field="workEffortNote.isHtml" from-field="workEffortAttrNote.isHtml"/>
                                    <set field="workEffortNote.isPosted" from-field="workEffortAttrNote.isPosted"/>
                                    <create-value value-field="workEffortNote"/>
                                    <check-errors/>
                                </iterate>
                            </if-not-empty>
                        </then>
                    </if>
                    
					<if-not-empty field="descrOrgUnitNoteInsert">
                        <entity-condition list="workEffortNoteDescrOrgUnitList" entity-name="WorkEffortTypeAttrAndNoteData">
                            <condition-list>
                                <condition-expr field-name="workEffortTypeId" from-field="workEffortType.workEffortTypeId"/>
                                <condition-expr field-name="sequenceId" from-field="descrOrgUnitNoteInsert"/>
                                <condition-list combine="or">
                                    <condition-expr field-name="isDefault" value="Y" operator="not-equals"/>
                                    <condition-expr field-name="isNote" value="Y" operator="not-equals"/>
                                </condition-list>
                            </condition-list>
                        </entity-condition>

                        <if-not-empty field="workEffortNoteDescrOrgUnitList">
                            <entity-one value-field="orgUnitParty" entity-name="Party" auto-field-map="false">
                                <field-map field-name="partyId" from-field="orgUnitId"/>
                            </entity-one>
                            			
                            <iterate entry="workEffortNoteDescrOrgUnitItem" list="workEffortNoteDescrOrgUnitList">
                                <make-value value-field="noteDataDescrOrgUnit" entity-name="NoteData"/>
                                <sequenced-id sequence-name="NoteData" field="noteDataDescrOrgUnit.noteId"/>
                                <set field="noteDataDescrOrgUnit.noteName" from-field="workEffortNoteDescrOrgUnitItem.attrName"/>
                                <set field="noteDataDescrOrgUnit.noteNameLang" from-field="workEffortNoteDescrOrgUnitItem.attrNameLang"/>
                                <if-not-empty field="orgUnitParty">
                                    <set field="noteDataDescrOrgUnit.noteInfo" from-field="orgUnitParty.partyName"/>
                                    <set field="noteDataDescrOrgUnit.noteInfoLang" from-field="orgUnitParty.partyNameLang"/>                                     			
                                 </if-not-empty>                                    			
                                 <set field="noteDataDescrOrgUnit.noteParty" from-field="userLogin.partyId"/>
                                 <set field="noteDataDescrOrgUnit.noteDateTime" from-field="we.estimatedStartDate"/>
                                 <create-value value-field="noteDataDescrOrgUnit"/>
                                 <check-errors/>

                                 <make-value value-field="workEffortNoteDescrOrgUnit" entity-name="WorkEffortNote"/>
                                 <set field="workEffortNoteDescrOrgUnit.workEffortId" from-field="id.workEffortId"/>
                                 <set field="workEffortNoteDescrOrgUnit.noteId" from-field="noteDataDescrOrgUnit.noteId"/>
                                 <set field="workEffortNoteDescrOrgUnit.sequenceId" from-field="workEffortNoteDescrOrgUnitItem.sequenceId"/>
                                 <set field="workEffortNoteDescrOrgUnit.internalNote" from-field="workEffortNoteDescrOrgUnitItem.internalNote"/>
                                 <set field="workEffortNoteDescrOrgUnit.isMain" from-field="workEffortNoteDescrOrgUnitItem.isMain"/>
                                 <set field="workEffortNoteDescrOrgUnit.isHtml" from-field="workEffortNoteDescrOrgUnitItem.isHtml"/>
                                 <set field="workEffortNoteDescrOrgUnit.isPosted" from-field="workEffortNoteDescrOrgUnitItem.isPosted"/>
                                 <create-value value-field="workEffortNoteDescrOrgUnit"/>
                                 <check-errors/>
                            </iterate>
                        </if-not-empty>									
				    </if-not-empty>                    
                </if-not-empty>

                <if-compare field="workEffortType.isRoot" operator="equals" value="Y">
                    <entity-one value-field="justSavedWorkEffort" entity-name="WorkEffort">
                        <field-map field-name="workEffortId" from-field="id.workEffortId"/>
                    </entity-one>
                    <set field="justSavedWorkEffort.workEffortParentId" from-field="id.workEffortId"/>
                    <store-value value-field="justSavedWorkEffort"/>
                    <check-errors/>

                    <set field="parameters.workEffortIdRoot" from-field="id.workEffortId"/>
                </if-compare>

                <if-not-empty field="parameters.workEffortIdRoot">
                    <set field="createWorkEffortAssocParams.entityName" value="WorkEffortAssoc"/>
                    <set field="createWorkEffortAssocParams.operation" value="CREATE"/>
                    <make-value value-field="createWorkEffortAssocParams.parameters" entity-name="WorkEffortAssoc"/>
                    <set field="createWorkEffortAssocParams.parameters.workEffortIdFrom" from-field="parameters.workEffortIdRoot"/>
                    <set field="createWorkEffortAssocParams.parameters.workEffortIdTo" from-field="id.workEffortId"/>
                    <set field="createWorkEffortAssocParams.parameters.workEffortAssocTypeId" value="ROOT"/>
                    <set field="createWorkEffortAssocParams.parameters.fromDate" from-field="createWorkEffortMap.estimatedStartDate" type="Timestamp"/>
                    <set field="createWorkEffortAssocParams.parameters.thruDate" from-field="createWorkEffortMap.estimatedCompletionDate" type="Timestamp"/>
                    <set field="createWorkEffortAssocParams.parameters.assocWeight" value="0" type="Double"/>
                    <set field="createWorkEffortAssocParams.parameters.sequenceNum" value="1" type="Long"/>
                    <if-not-empty field="parameters.workEffortRevisionIdAssoc">
                        <set field="createWorkEffortAssocParams.parameters.workEffortRevisionId" from-field="parameters.workEffortRevisionIdAssoc"/>
                    </if-not-empty>
                    <call-service service-name="crudServiceDefaultOrchestration_WorkEffortAssoc" in-map-name="createWorkEffortAssocParams"/>
                </if-not-empty>
                <if-not-empty field="parameters.workEffortIdFrom">
                    <set field="createWorkEffortAssocParams.entityName" value="WorkEffortAssoc"/>
                    <set field="createWorkEffortAssocParams.operation" value="CREATE"/>
                    <make-value value-field="createWorkEffortAssocParams.parameters" entity-name="WorkEffortAssoc"/>
                    <set field="createWorkEffortAssocParams.parameters.workEffortIdFrom" from-field="parameters.workEffortIdFrom"/>
                    <set field="createWorkEffortAssocParams.parameters.workEffortIdTo" from-field="id.workEffortId"/>
                    <set field="createWorkEffortAssocParams.parameters.workEffortAssocTypeId" from-field="parameters.weHierarchyTypeId"/>
                    <set field="createWorkEffortAssocParams.parameters.fromDate" from-field="createWorkEffortMap.estimatedStartDate" type="Timestamp"/>
                    <set field="createWorkEffortAssocParams.parameters.thruDate" from-field="createWorkEffortMap.estimatedCompletionDate" type="Timestamp"/>
                    <set field="createWorkEffortAssocParams.parameters.assocWeight" default-value="100" type="Double" from-field="parameters.assocWeight" />
                    <set field="createWorkEffortAssocParams.parameters.sequenceNum" default-value="1" type="Long" from-field="parameters.sequenceNum"/>
                    <if-not-empty field="parameters.workEffortRevisionIdAssoc">
                        <set field="createWorkEffortAssocParams.parameters.workEffortRevisionId" from-field="parameters.workEffortRevisionIdAssoc"/>
                    </if-not-empty>
                    <call-service service-name="crudServiceDefaultOrchestration_WorkEffortAssoc" in-map-name="createWorkEffortAssocParams"/>
                </if-not-empty>
            </if-not-empty>

            <log message="parameters.skipAutomaticServiceMeasure ${parameters.skipAutomaticServiceMeasure}" level="always"/>
            <if>
                <condition>
                    <or>
                        <if-empty field="parameters.skipAutomaticServiceMeasure"/>
                        <if-compare operator="not-equals" value="Y" field="parameters.skipAutomaticServiceMeasure"/>
                    </or>
                </condition>
                <then>
                    <!-- Bug 3883 inserimento automatico measure, sempre tranne che se e' una storicizzazione oppure una Copia oppure un Clone -->
                    <!-- controllo se è attivata la indic. automatica -->
                    <if-compare operator="equals" field="workEffortType.isIndicAuto" value="Y">
                        <entity-and list="workEffortAndTypePurposeAccountList" entity-name="WorkEffortAndTypePurposeAccount">
                            <field-map field-name="workEffortId" from-field="id.workEffortId"/>
                        </entity-and>
                        <iterate entry="workEffortAndTypePurposeAccount" list="workEffortAndTypePurposeAccountList">
                            <clear-field field="insertWorkEffortMeasure"/>

                            <set field="insertWorkEffortMeasure.entityName" value="WorkEffortMeasure"/>
                            <set field="insertWorkEffortMeasure.operation" value="CREATE"/>

                            <sequenced-id sequence-name="WorkEffortMeasure" field="insertWorkEffortMeasure.parameters.workEffortMeasureId"/>

                            <set field="insertWorkEffortMeasure.parameters.weScoreRangeEnumId" value="WESCORE_ISVALUE"/>
                            <set field="insertWorkEffortMeasure.parameters.weScoreConvEnumId" value="WECONVER_NOCONVERSIO"/>
                            <set field="insertWorkEffortMeasure.parameters.weAlertRuleEnumId" value="WEALERT_TARGETUP"/>
                            <set field="insertWorkEffortMeasure.parameters.weWithoutPerf" value="WEWITHPERF_PERF_0"/>
                            <set field="insertWorkEffortMeasure.parameters.weOtherGoalEnumId" value="WEMOMG_WEFF"/>
                            <set field="insertWorkEffortMeasure.parameters.weMeasureTypeEnumId" value="WEMT_OUTPUT"/>
                            
							<entity-one value-field="glAccount" entity-name="GlAccount">
                                <field-map field-name="glAccountId" from-field="workEffortAndTypePurposeAccount.glAccountId"/>
                            </entity-one>
                            <if-not-empty field="glAccount">
                                <set field="insertWorkEffortMeasure.parameters.weMeasureTypeEnumId" from-field="glAccount.weMeasureTypeEnumId"/>
                                <set field="insertWorkEffortMeasure.parameters.weScoreRangeEnumId" from-field="glAccount.weScoreRangeEnumId"/>
								<set field="insertWorkEffortMeasure.parameters.weScoreConvEnumId" from-field="glAccount.weScoreConvEnumId"/>
								<set field="insertWorkEffortMeasure.parameters.weAlertRuleEnumId" from-field="glAccount.weAlertRuleEnumId"/>
								<set field="insertWorkEffortMeasure.parameters.weWithoutPerf" from-field="glAccount.weWithoutPerf"/>
								<set field="insertWorkEffortMeasure.parameters.uomRangeId" from-field="glAccount.uomRangeId"/>
                            
                                <if-compare operator="equals" value="Y" field="glAccount.detectOrgUnitIdFlag">
                            		<!-- in realta' la gestione del WEMOMG_ORG non deve essere piu' utilizzata:
            						per sapere se il movimento va memorizzato con l'unita' organizzativa del workeffort, 
            						ci si basa sul valore di detectOrgUnitIdFlag -->
                            		<set field="insertWorkEffortMeasure.parameters.weOtherGoalEnumId" value="WEMOMG_ORG"/>
                            	</if-compare>
                            </if-not-empty>
                            
                            <set field="insertWorkEffortMeasure.parameters.isPosted" value="N"/>

                            <if-not-empty field="workEffortAndTypePurposeAccount.weProductId">
                                <set field="insertWorkEffortMeasure.parameters.productId" from-field="workEffortAndTypePurposeAccount.weProductId"/>
                                <else>
                                    <if-not-empty field="workEffortAndTypePurposeAccount.acProductId">
                                        <set field="insertWorkEffortMeasure.parameters.productId" from-field="workEffortAndTypePurposeAccount.acProductId"/>
                                    </if-not-empty>
                                </else>
                            </if-not-empty>

							<if-not-empty field="workEffortAndTypePurposeAccount.acPeriodTypeId">
                                <set field="insertWorkEffortMeasure.parameters.periodTypeId" from-field="workEffortAndTypePurposeAccount.acPeriodTypeId"/>
                                <else>
                                    <if-not-empty field="workEffortAndTypePurposeAccount.wtPeriodTypeId">
                                        <set field="insertWorkEffortMeasure.parameters.periodTypeId" from-field="workEffortAndTypePurposeAccount.wtPeriodTypeId"/>
                                    </if-not-empty>
                                </else>
                            </if-not-empty>

                            <set field="insertWorkEffortMeasure.parameters.glAccountId" from-field="workEffortAndTypePurposeAccount.glAccountId"/>
                            <set field="insertWorkEffortMeasure.parameters.workEffortId" from-field="workEffortAndTypePurposeAccount.workEffortId"/>
                            <set field="insertWorkEffortMeasure.parameters.fromDate" from-field="workEffortAndTypePurposeAccount.estimatedStartDate"/>
                            <set field="insertWorkEffortMeasure.parameters.thruDate" from-field="workEffortAndTypePurposeAccount.estimatedCompletionDate"/>

                            <clear-field field="lastFailMessage"/>
                            <call-service service-name="crudServiceDefaultOrchestration_WorkEffortMeasure" in-map-name="insertWorkEffortMeasure">
                                <result-to-field result-name="failMessage" field="lastFailMessage"/>
                            </call-service>
                            <if-not-empty field="lastFailMessage">
                                <field-to-result result-name="failMessage" field="lastFailMessage"/>
                            </if-not-empty>
                            <check-errors/>
                        </iterate>
                    </if-compare>
                </then>
            </if>

            <!-- bug 4904 inserimento alla creazione dell'assoc TO -->
            <set field="WETATOWorkEffortIdFrom" from-field="parameters.WETATOWorkEffortIdFrom"/>
            <if-empty field="WETATOWorkEffortIdFrom">
                <set field="WETATOWorkEffortIdFrom" from-field="parameters.WETATOWorkEffortIdFrom_2"/>
            </if-empty>
            <if-empty field="WETATOWorkEffortIdFrom">
                <set field="WETATOWorkEffortIdFrom" from-field="parameters.WETATOWorkEffortIdFrom_3"/>
            </if-empty>
            <if-empty field="WETATOWorkEffortIdFrom">
                <set field="WETATOWorkEffortIdFrom" from-field="parameters.WETATOWorkEffortIdFrom_4"/>
            </if-empty>                        
            <if>
                <condition>
                    <and>
                        <not>
                            <if-empty field="parameters.WETATOWorkEffortAssocTypeId"/>
                        </not>
                        <not>
                            <if-empty field="WETATOWorkEffortIdFrom"/>
                        </not>
                    </and>
                </condition>
                <then>
                    <clear-field field="workEffortAssocMap"/>
                    <set field="workEffortAssocMap.entityName" value="WorkEffortAssoc"/>
                    <set field="workEffortAssocMap.operation" value="CREATE"/>
                    
                    <entity-one value-field="workEffortFrom" entity-name="WorkEffort" auto-field-map="false">
					    <field-map field-name="workEffortId" from-field="WETATOWorkEffortIdFrom"/>
					</entity-one>
					<if-compare-field operator="greater-equals" field="workEffortFrom.estimatedStartDate" to-field="createWorkEffortMap.estimatedStartDate" type="Timestamp">
					    <set field="assocStartDate" from-field="workEffortFrom.estimatedStartDate" type="Timestamp"/>
					<else>
					    <set field="assocStartDate" from-field="createWorkEffortMap.estimatedStartDate" type="Timestamp"/>
					</else>
					</if-compare-field>					
					<if-compare-field operator="less-equals" field="workEffortFrom.estimatedCompletionDate" to-field="createWorkEffortMap.estimatedCompletionDate" type="Timestamp">
					    <set field="assocCompletionDate" from-field="workEffortFrom.estimatedCompletionDate" type="Timestamp"/>
					<else>
					    <set field="assocCompletionDate" from-field="createWorkEffortMap.estimatedCompletionDate" type="Timestamp"/>
					</else>
					</if-compare-field>

                    <set field="workEffortAssocMap.parameters.workEffortIdFrom" from-field="WETATOWorkEffortIdFrom"/>
                    <set field="workEffortAssocMap.parameters.workEffortIdTo" from-field="id.workEffortId"/>
                    <set field="workEffortAssocMap.parameters.workEffortAssocTypeId" from-field="parameters.WETATOWorkEffortAssocTypeId"/>
                    <set field="workEffortAssocMap.parameters.assocWeight" from-field="parameters.WETATOAassocWeight"/>
                    <set field="workEffortAssocMap.parameters.fromDate" from-field="assocStartDate" type="Timestamp"/>
                    <set field="workEffortAssocMap.parameters.thruDate" from-field="assocCompletionDate" type="Timestamp"/>
                    <set field="workEffortAssocMap.parameters.sequenceNum" value="1" type="Long"/>
                    <if-not-empty field="parameters.workEffortRevisionIdAssoc">
                        <set field="workEffortAssocMap.parameters.workEffortRevisionId" from-field="parameters.workEffortRevisionIdAssoc"/>
                    </if-not-empty>

                    <call-service service-name="crudServiceDefaultOrchestration_WorkEffortAssoc" in-map-name="workEffortAssocMap"/>
                    <check-errors/>

                </then>
            </if>
            
            <!-- mettere dentro il tag seguente le implementazioni da fare in tutti i casi tranne la storicizzazione o la copia o il clone DOPO che il workEffort e' stato creato -->           
            <log message="parameters.skipAutomaticServiceAssoc ${parameters.skipAutomaticServiceAssoc}" level="always"/>
            <if>
                <condition>
                    <or>
                        <if-empty field="parameters.skipAutomaticServiceAssoc" />
                        <if-compare operator="not-equals" value="Y" field="parameters.skipAutomaticServiceAssoc"/>
                    </or>
                </condition>
                <then>
    				<if-not-empty field="parameters.orgUnitId">
    					<!-- gn1942 insert begin -->
    					<clear-field field="createResponsibleWorkEffortAssocParams"/>
    					<set field="createResponsibleWorkEffortAssocParams.workEffortId" from-field="id.workEffortId"/>
    					<set field="createResponsibleWorkEffortAssocParams.workEffortTypeId" from-field="workEffortType.workEffortTypeId"/>
    					<set field="createResponsibleWorkEffortAssocParams.orgUnitId" from-field="parameters.orgUnitId"/>
    					<set field="createResponsibleWorkEffortAssocParams.assocWeightFROMHasResp" default-value="100" from-field="parameters.assocWeightFROMHasResp" type="Double"/>
    					<set field="createResponsibleWorkEffortAssocParams.assocWeightTOHasResp" default-value="100" from-field="parameters.assocWeightTOHasResp" type="Double"/>
    					<set field="createResponsibleWorkEffortAssocParams.estimatedStartDate" from-field="estimatedStartDate" type="Timestamp"/>
    					<set field="createResponsibleWorkEffortAssocParams.estimatedCompletionDate" from-field="estimatedCompletionDate" type="Timestamp"/>
    					<call-service service-name="createResponsibleWorkEffortAssoc" in-map-name="createResponsibleWorkEffortAssocParams"/> 
    				</if-not-empty>
						
				    <!-- gn1942 insert end -->
				
				
                    <!-- gn1787 begin -->
                	<if>
                		<condition>
                			<and>
                				<not>
                					<if-empty field="workEffortType"/>
                				</not>
                				<not>
                					<if-empty field="id.workEffortId"/>
                				</not>
                				<not>
                					<if-empty field="estimatedStartDate"/>
                				</not>
                				<not>
                					<if-empty field="estimatedCompletionDate"/>
                				</not>
                				<if-compare field="workEffortType.isRoleTypeIdAuto" operator="equals" value="Y"/>
                				<not>
                					<if-empty field="workEffortType.roleTypeIdAuto"/>
                				</not>
                			</and>
                		</condition>
                		<then>
                		    <if-not-empty field="workEffortType.partyRelTypeIdAuto">
                				<entity-condition list="partyRelList" entity-name="PartyRelationshipPartyRoleTo">
                					<condition-list combine="and">
             							<condition-expr field-name="partyIdFrom" from-field="orgUnitId"/>
                						<condition-expr field-name="roleTypeIdFrom" from-field="orgUnitRoleTypeId"/>
                						<condition-expr field-name="partyRelationshipTypeId" from-field="workEffortType.partyRelTypeIdAuto"/>
                						<condition-expr field-name="roleTypeIdTo" from-field="workEffortType.roleTypeIdAuto"/>
                						<condition-expr field-name="fromDate" operator="less-equals" from-field="estimatedCompletionDate"/>
                						<condition-list combine="or">
                							<condition-expr field-name="thruDate" operator="greater-equals" from-field="estimatedStartDate" />
                							<condition-expr field-name="thruDate" operator="equals" value="${null}"/>
                						</condition-list>
                					</condition-list>  
                				</entity-condition>
                				
                				<if-not-empty field="partyRelList">
                					<iterate entry="partyRelItem" list="partyRelList">
                						<clear-field field="partyRelThruDate"/>
                						<clear-field field="makeWepaFromPartyRel"/>
                						
                						<if-not-empty field="partyRelItem.thruDate">
                							<set field="partyRelThruDate" from-field="partyRelItem.thruDate" type="Timestamp"/>
                							<set field="makeWepaFromPartyRel" value="Y"/>
                						<else>
                							<set field="partyRelThruDate" value="2099-12-31 00:00:00.000" type="Timestamp"/>
                							<if-compare-field field="estimatedStartDate" operator="less-equals" to-field="partyRelThruDate">
                								<set field="makeWepaFromPartyRel" value="Y"/>
                							<else>
                								<set field="makeWepaFromPartyRel" value="N"/>
                							</else>
                							</if-compare-field>
                						</else>
                						</if-not-empty>
                						
                						<if-compare field="makeWepaFromPartyRel" operator="equals" value="Y">
                							<clear-field field="workEffortPartyAssignment"/>
                							<make-value value-field="workEffortPartyAssignment" entity-name="WorkEffortPartyAssignment"/>
                							<set field="workEffortPartyAssignment.workEffortId" from-field="id.workEffortId"/>            							
                							<set field="workEffortPartyAssignment.partyId" from-field="partyRelItem.partyIdTo"/>
                							<set field="workEffortPartyAssignment.roleTypeId" from-field="workEffortType.roleTypeIdAuto"/>
                							<set field="workEffortPartyAssignment.roleTypeWeight" value="0" type="Double"/>
                							<set field="workEffortPartyAssignment.sequenceNum" value="1" type="Long"/>
                							<set field="workEffortPartyAssignment.isPosted" value="N"/>
                							<if-compare-field field="partyRelItem.fromDate" operator="greater-equals" to-field="estimatedStartDate">
                								<set field="workEffortPartyAssignment.fromDate" from-field="partyRelItem.fromDate"/>
                							<else>
                								<set field="workEffortPartyAssignment.fromDate" from-field="estimatedStartDate"/>
                							</else>
                							</if-compare-field>
                							<if-compare-field field="partyRelThruDate" operator="less-equals" to-field="estimatedCompletionDate">
                								<set field="workEffortPartyAssignment.thruDate" from-field="partyRelThruDate"/>
                							<else>
                								<set field="workEffortPartyAssignment.thruDate" from-field="estimatedCompletionDate"/>
                							</else>
                							</if-compare-field>
                							
                							<create-value value-field="workEffortPartyAssignment"/>
                							<clear-field field="workEffortPartyAssignment"/>            						
                						</if-compare>            				           					
                					</iterate>
                				</if-not-empty>  
                			<else>
                				<entity-and list="partyRoleList" entity-name="PartyRole">
                				    <field-map field-name="roleTypeId" from-field="workEffortType.roleTypeIdAuto"/>
                				</entity-and>
                				<if-not-empty field="partyRoleList">
                				    <iterate entry="partyRoleItem" list="partyRoleList">
                				    	<clear-field field="workEffortPartyAssignment"/>
                				    	<make-value value-field="workEffortPartyAssignment" entity-name="WorkEffortPartyAssignment"/>
                				    	<set field="workEffortPartyAssignment.workEffortId" from-field="id.workEffortId"/> 
                				    	<set field="workEffortPartyAssignment.partyId" from-field="partyRoleItem.partyId"/>
                						<set field="workEffortPartyAssignment.roleTypeId" from-field="partyRoleItem.roleTypeId"/>
                						<set field="workEffortPartyAssignment.roleTypeWeight" value="0" type="Double"/>
                						<set field="workEffortPartyAssignment.sequenceNum" value="1" type="Long"/>
                						<set field="workEffortPartyAssignment.isPosted" value="N"/>
                						<set field="workEffortPartyAssignment.fromDate" from-field="estimatedStartDate"/>
                						<set field="workEffortPartyAssignment.thruDate" from-field="estimatedCompletionDate"/>
                						<create-value value-field="workEffortPartyAssignment"/>
                				    </iterate>
                				</if-not-empty>
                			</else>              		    
                		    </if-not-empty>
                		</then>
                	</if>
    				<!-- gn1787 end -->
    				
    				<!-- gn1984 begin -->
    				<if>
    					<condition>
    						<and>
    							<not>
    								<if-empty field="workEffortType"/>            				
    							</not>
    							<if-compare field="workEffortType.isRoot" operator="equals" value="Y"/>
    							<if-compare field="workEffortType.periodOpenEnumId" operator="equals" value="ONLY_OPEN_PERIOD"/>
    						</and>
    					</condition>
    					<then>
    						<clear-field field="workEffortTypePeriodList"/> 
    						<entity-condition list="workEffortTypePeriodList" entity-name="WorkEffortTypePeriodAndFromThruDate">
    	            			<condition-list>
    	            				<condition-expr field-name="workEffortTypeId" from-field="workEffortType.workEffortTypeId"/>
                					<condition-expr field-name="statusEnumId" value="OPEN"/>
                					<condition-expr field-name="fromDate" operator="less-equals" from-field="estimatedCompletionDate"/>
                					<condition-expr field-name="thruDate" operator="greater-equals" from-field="estimatedStartDate"/>
    	            			</condition-list>
    	            		</entity-condition>
    						<if-empty field="workEffortTypePeriodList">
    							<add-error>
    								<fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortRootPeriodOpenRequiredError"/>
    							</add-error>
    							<check-errors/> 
    						</if-empty>						
    					</then>
    				</if>				
    				<!-- gn1984 end -->
                </then>
            </if>
            
            <!-- gn1674 begin -->
            <if>
            	<condition>
            		<and>
            		    <if-compare field="parameters.fromCard" operator="equals" value="S"/>
            			<not>
            				<if-empty field="workEffortType"/>            				
            			</not>
            			<if-compare field="workEffortType.frameEnumId" operator="equals" value="PFAAUOET"/>
            		</and>
            	</condition>
            	<then>
            		<if-empty field="createWorkEffortMap.etch">
                    	<add-error>
                        	<fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortFrameEtchError"/>
                        </add-error>
                        <check-errors/> 
            		</if-empty>
            	</then>
            </if>
            <!-- gn1674 end -->

            <field-to-result field="id"/>
            
            <!-- GN-3060 -->
            <if>
            	<condition>
            		<and>
            		    <if-compare operator="equals" value="N" field="parameters.showCode"/>
            		    <not>
            		    	<if-empty field="workEffortType"/>
            		    </not>
            		    <if-compare field="workEffortType.frameEnumId" operator="equals" value="MANUAL"/>
            		</and>
            	</condition>
            	<then>
            		<entity-one value-field="workEffortCreated" entity-name="WorkEffort" auto-field-map="false">
            			<field-map field-name="workEffortId" from-field="id.workEffortId"/>
            		</entity-one>
            		<if-not-empty field="workEffortCreated">
            			<set field="workEffortCreated.sourceReferenceId" from-field="workEffortCreated.workEffortId"/>
            			<store-value value-field="workEffortCreated"/>
            		</if-not-empty>
            	</then>
            </if>

            <else>

                <!-- Carica il workEffort attuale -->
                <entity-one entity-name="WorkEffort" value-field="workEffort" auto-field-map="false" use-cache="false">
                    <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
                </entity-one>

                <!-- Carica lo stato attuale -->
                <entity-one entity-name="StatusItem" value-field="statusItem" auto-field-map="false" use-cache="true">
                    <field-map field-name="statusId" from-field="workEffort.currentStatusId"/>
                </entity-one>

                <if-compare field="parameters.operation" operator="equals" value="UPDATE">
            		<if-empty field="parameters.workEffortRevisionId">
                		<!-- GN-4033 begin -->
						<if-compare operator="not-equals" field="parameters.isObiettivo" value="Y">				     	
							<clear-field field="workEffortTypeContent"/>
							<entity-one value-field="workEffortTypeContent" entity-name="WorkEffortTypeContent" auto-field-map="false">
								<field-map field-name="workEffortTypeId" from-field="workEffort.workEffortTypeId"/>
								<field-map field-name="contentId" value="WEFLD_MAIN"/>
							</entity-one>				
							<if>
								<condition>
									<and>
										<not>
											<if-empty field="workEffortTypeContent"/>
										</not>
										<not>
											<if-empty field="workEffortTypeContent.params"/>
										</not>
									</and>
								</condition>
								<then>
									<call-bsh>
										<![CDATA[
		   									wetcContext = new java.util.HashMap();
		       								org.ofbiz.base.util.BshUtil.eval(workEffortTypeContent.get("params"), wetcContext);
		   									
											result = new java.util.HashMap();
							    			if (org.ofbiz.base.util.UtilValidate.isNotEmpty(wetcContext.get("onlyRefDate"))) {
							        			result.put("onlyRefDate", wetcContext.get("onlyRefDate"));
							    			}
							    			if (org.ofbiz.base.util.UtilValidate.isNotEmpty(wetcContext.get("usePeriod"))) {
							        			result.put("usePeriod", wetcContext.get("usePeriod"));
							    			}							    										    								           
							    			return result;								
										]]>
									</call-bsh>
																
									<if-compare field="onlyRefDate" operator="equals" value="Y">
								    	<if-not-empty field="usePeriod">
								        	<entity-one value-field="customTimePeriodThru2" entity-name="CustomTimePeriod" auto-field-map="false">
        										<field-map field-name="customTimePeriodId" from-field="parameters.periodThruDate2"/>
        									</entity-one>
        									<if-not-empty field="customTimePeriodThru2">
        								    	<set field="parameters.estimatedStartDate" from-field="customTimePeriodThru2.thruDate" type="Timestamp"/>
        								    	<set field="parameters.estimatedCompletionDate" from-field="customTimePeriodThru2.thruDate" type="Timestamp"/>
        									</if-not-empty>
								    	<else>
											<set field="parameters.estimatedStartDate" from-field="parameters.estimatedCompletionDate2" type="Timestamp"/>
											<set field="parameters.estimatedCompletionDate" from-field="parameters.estimatedCompletionDate2" type="Timestamp"/>
										</else>
										</if-not-empty>
									<else>
								    	<if-not-empty field="usePeriod">
								        	<entity-one value-field="customTimePeriodFrom" entity-name="CustomTimePeriod" auto-field-map="false">
        							    		<field-map field-name="customTimePeriodId" from-field="parameters.periodFromDate"/>
        			                		</entity-one>
        									<if-not-empty field="customTimePeriodFrom">
        										<set field="parameters.estimatedStartDate" from-field="customTimePeriodFrom.fromDate" type="Timestamp"/>
        									</if-not-empty>
								        	<entity-one value-field="customTimePeriodThru" entity-name="CustomTimePeriod" auto-field-map="false">
        							    		<field-map field-name="customTimePeriodId" from-field="parameters.periodThruDate"/>
        			                		</entity-one>
        									<if-not-empty field="customTimePeriodThru">
        										<set field="parameters.estimatedCompletionDate" from-field="customTimePeriodThru.thruDate" type="Timestamp"/>
        									</if-not-empty>        								
								    	</if-not-empty>
									</else>
									</if-compare>								
								</then>
							</if>				
						</if-compare>			
			    		<!-- GN-4033 end -->
            		</if-empty> 
                    <!-- ************************************************************** -->
                    <!-- UPDATE -->
                    <!-- ************************************************************** -->
                    
                    <!--  GN-3218 begin -->
                    <if-not-empty field="parameters.estimatedCompletionDate">
                        <if-not-empty field="parameters.estimatedStartDate">
                            <if-compare-field operator="less" field="parameters.estimatedCompletionDate" to-field="parameters.estimatedStartDate" type="Timestamp">
                                <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="toTimeZone" ret-field="currentTimeZone">
        							<string value=""/>
        						</call-class-method>
        				        <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getDateFormat" ret-field="format">
        							<field field="locale" type="java.util.Locale"/>
        						</call-class-method>
        						<set field="estimatedStartDateStr" from-field="parameters.estimatedStartDate" type="PlainString" />
        						<set field="estimatedCompletionDateStr" from-field="parameters.estimatedCompletionDate" type="PlainString" />
        						<call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getFormattedDate" ret-field="fromDateFormatted">
        							<field field="estimatedStartDateStr" type="java.lang.String"/>
        							<field field="format" type="java.lang.String"/>
        							<field field="currentTimeZone" type="java.util.TimeZone"/>
        							<field field="locale" type="java.util.Locale"/>
        						</call-class-method>
        						<call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getFormattedDate" ret-field="thruDateFormatted">
        							<field field="estimatedCompletionDateStr" type="java.lang.String"/>
        							<field field="format" type="java.lang.String"/>
        							<field field="currentTimeZone" type="java.util.TimeZone"/>
        							<field field="locale" type="java.util.Locale"/>
        						</call-class-method>
                                <add-error>
                                    <fail-property resource="BaseErrorLabels" property="FromAndThruDateNotAllowedParams"/>
                                </add-error>
                                <check-errors/>
                            </if-compare-field>
                        </if-not-empty>
                    </if-not-empty>
                    <!-- GN-3218 end -->

                    <!-- Carica i campi da aggiornare -->
                    <set-service-fields service-name="updateWorkEffort" map="parameters" to-map="updateWorkEffortMap"/>
                    <make-value entity-name="WorkEffort" value-field="workEffortUpdateFields"/>
                    <set-nonpk-fields value-field="workEffortUpdateFields" map="updateWorkEffortMap"/>
                    <log level="verbose" message="**** workEffortUpdateFields=${workEffortUpdateFields}"/>

                    <!-- ToDo 3820 -->
                    <if-compare operator="not-equals" field="parameters.isObiettivo" value="Y">
                        <clear-field field="serviceMap"/>
                        <set field="serviceMap.isPosted" from-field="workEffort.isPosted"/>
                        <call-service service-name="checkUpdateDeleteByIsPosted" in-map-name="serviceMap"/>
                    </if-compare>

                    <!-- Verifica campo Data Stato -->

                    <set field="lastStatusUpdateOld" from-field="workEffort.lastStatusUpdate" type="Date"/>
                    <set field="lastStatusUpdateNew" from-field="workEffortUpdateFields.lastStatusUpdate" type="Date"/>

                    <if>
                        <condition>
                            <and>
                                <not>
                                    <if-empty field="lastStatusUpdateOld"/>
                                </not>
                                <not>
                                    <if-empty field="lastStatusUpdateNew"/>
                                </not>
                                <if-compare-field field="lastStatusUpdateOld" operator="greater" to-field="lastStatusUpdateNew" type="Date"/>
                            </and>
                        </condition>
                        <then>
                            <add-error>
                                <fail-property resource="WorkeffortExtErrorLabels" property="NewStatusDateBeforeTheOldOne"/>
                            </add-error>
                            <check-errors/>
                        </then>
                    </if>

                    <set field="updateWorkEffortMap.workEffortAssocTypeId" from-field="parameters.weAssocTypeId"/>

                    <!-- GZ-NT 32 -->
                    <if-compare field="parameters.isObiettivo" operator="equals" value="Y">
                        <if-not-empty field="updateWorkEffortMap.currentStatusId">
                            <set field="oldStatus" from-field="updateWorkEffortMap.currentStatusId"/>
                            <clear-field field="updateWorkEffortMap.currentStatusId"/>
                        </if-not-empty>
                    </if-compare>

                    <!-- GN-1877 controllo passaggio di stato e label di errore localizzata -->
        			<if>
            			<condition>
                			<and>
                    			<not><if-empty field="updateWorkEffortMap.currentStatusId"/></not>
                    			<not><if-empty field="workEffort.currentStatusId"/></not>
                    			<if-compare-field field="updateWorkEffortMap.currentStatusId" to-field="workEffort.currentStatusId" operator="not-equals"/>
                			</and>
            			</condition>
            			<then>
                    		<!-- check if the status change is a valid change -->
                    		<entity-and entity-name="StatusValidChange" list="validChange">
                        		<field-map field-name="statusId" from-field="workEffort.currentStatusId"/>
                        		<field-map field-name="statusIdTo" from-field="updateWorkEffortMap.currentStatusId"/>
                    		</entity-and>
                    
                    		<if-empty field="validChange">
                    			<entity-one value-field="statusItemTo" entity-name="StatusItem" auto-field-map="false">
                    				<field-map field-name="statusId" from-field="updateWorkEffortMap.currentStatusId"/>
                    			</entity-one>
                    			<if-not-empty field="statusItemTo">
                    				<set field="statusDesc" from-field="statusItemTo.description"/>
                    			</if-not-empty>
                    			<if-not-empty field="updateWorkEffortMap.sourceReferenceId">
                    				<set field="sourceId" from-field="updateWorkEffortMap.sourceReferenceId"/>                    					
                    			<else>
                    				<if-not-empty field="workEffort.sourceReferenceId">
                    					<set field="sourceId" from-field="workEffort.sourceReferenceId"/>
                    					<else>
                    						<set field="sourceId" from-field="workEffort.workEffortId"/>
                    					</else>
                    				</if-not-empty>
                    			</else>
                    			</if-not-empty>
                    			<if-not-empty field="updateWorkEffortMap.workEffortTypeId">
                    				<set field="typeId" from-field="updateWorkEffortMap.workEffortTypeId"/>                    					
                    			<else>
                    				<set field="typeId" from-field="workEffort.workEffortTypeId"/>
                    			</else>
                    			</if-not-empty>                    			
                    			<add-error>
                                	<fail-property resource="WorkeffortExtErrorLabels" property="StatusChangeNotAllowed"/>
                            	</add-error>
                            	<check-errors/>
                    		</if-empty>
            			</then>
        			</if>
        			
					<!-- GN-2150 BEGIN -->
					<!-- verifico che workeffortTypePeriodId sia coerente col tipo obiettivo -->
					<if-not-empty field="updateWorkEffortMap.workEffortTypePeriodId">
						<entity-one value-field="workEffortTypePeriodCheck" entity-name="WorkEffortTypePeriod" auto-field-map="false">
							<field-map field-name="workEffortTypePeriodId" from-field="updateWorkEffortMap.workEffortTypePeriodId"/>
						</entity-one>
						
						<if-empty field="workEffortTypePeriodCheck">
							<add-error>
                                <fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortTypePeriodNotFoundError"/>
                            </add-error>
                            <check-errors/>	
						</if-empty>
						<if-not-empty field="workEffortTypePeriodCheck">												
							<if-compare operator="not-equals" value="${workEffortTypePeriodCheck.workEffortTypeId}" field="workEffort.workEffortTypeId">
                    			<add-error>
                                	<fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortTypePeriodTypeError"/>
                            	</add-error>
                            	<check-errors/>							
							</if-compare>
						</if-not-empty>
					</if-not-empty>
					<!-- GN-2150 END -->
                    
                    <call-service service-name="updateWorkEffort" in-map-name="updateWorkEffortMap"/>

                    <entity-one value-field="w" entity-name="WorkEffort"/>
                    <log level="verbose" message="**** w=${w.lastStatusUpdate}"/>

                    <!-- GZ-NT 32 -->
                    <if-compare field="parameters.isObiettivo" operator="equals" value="Y">
                        <if-not-empty field="oldStatus">
                            <entity-one value-field="updatedWrk" entity-name="WorkEffort">
                                <field-map field-name="workEffortId" from-field="updateWorkEffortMap.workEffortId"/>
                            </entity-one>
                            <set field="updatedWrk.currentStatusId" from-field="oldStatus"/>
                            <store-value value-field="updatedWrk"/>
                        </if-not-empty>
                    </if-compare>
                    <check-errors/>

                    <!-- Gestion delle note nel folder principale -->
                    <if-not-empty field="parameters.noteId1">
                        <set field="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters.parameters" type="NewMap" set-if-empty="true" set-if-null="true"/>
                        <call-object-method method-name="putAll" obj-field="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters.parameters">
                            <field field="parameters" type="java.util.Map"/>
                        </call-object-method>
                        <set field="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters.operation" value="UPDATE"/>
                        <set field="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters.entityName" value="WorkEffortNoteAndData"/>
                        <set field="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters.parameters.workEffortId" from-field="parameters.workEffortId"/>
                        <set field="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters.parameters.noteId" from-field="parameters.noteId1"/>
                        <set field="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters.parameters.noteInfo" from-field="parameters.noteInfo1"/>
                        <set field="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters.parameters.noteInfoLang" from-field="parameters.noteInfo1Lang"/>
                        <call-service service-name="crudServiceDefaultOrchestration_WorkEffortNoteAndData" in-map-name="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters"/>
                        <check-errors/>
                    </if-not-empty>
                    <if-not-empty field="parameters.noteId2">
                        <set field="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters.parameters" type="NewMap" set-if-empty="true" set-if-null="true"/>
                        <call-object-method method-name="putAll" obj-field="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters.parameters">
                            <field field="parameters" type="java.util.Map"/>
                        </call-object-method>
                        <set field="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters.operation" value="UPDATE"/>
                        <set field="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters.entityName" value="WorkEffortNoteAndData"/>
                        <set field="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters.parameters.workEffortId" from-field="parameters.workEffortId"/>
                        <set field="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters.parameters.noteId" from-field="parameters.noteId2"/>
                        <set field="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters.parameters.noteInfo" from-field="parameters.noteInfo2"/>
                        <set field="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters.parameters.noteInfoLang" from-field="parameters.noteInfo2Lang"/>
                        <call-service service-name="crudServiceDefaultOrchestration_WorkEffortNoteAndData" in-map-name="crudServiceDefaultOrchestration_WorkEffortNoteAndDataParameters"/>
                        <check-errors/>
                    </if-not-empty>
                    
					<!-- gn1942 update begin -->
					<if-compare-field field="workEffort.orgUnitId" operator="not-equals" to-field="w.orgUnitId">
						<clear-field field="deleteResponsibleWorkEffortAssocParams"/>
						<set field="deleteResponsibleWorkEffortAssocParams.workEffortId" from-field="w.workEffortId"/>
						<set field="deleteResponsibleWorkEffortAssocParams.workEffortTypeId" from-field="w.workEffortTypeId"/>
						<set field="deleteResponsibleWorkEffortAssocParams.orgUnitId" from-field="workEffort.orgUnitId"/>
						<call-service service-name="deleteResponsibleWorkEffortAssoc" in-map-name="deleteResponsibleWorkEffortAssocParams"/>
						
						<clear-field field="createResponsibleWorkEffortAssocParams"/>
						<set field="createResponsibleWorkEffortAssocParams.workEffortId" from-field="w.workEffortId"/>
						<set field="createResponsibleWorkEffortAssocParams.workEffortTypeId" from-field="w.workEffortTypeId"/>
						<set field="createResponsibleWorkEffortAssocParams.orgUnitId" from-field="w.orgUnitId"/>
						<set field="createResponsibleWorkEffortAssocParams.assocWeightFROMHasResp" default-value="100" from-field="parameters.assocWeightFROMHasResp" type="Double"/>
						<set field="createResponsibleWorkEffortAssocParams.assocWeightTOHasResp" default-value="100" from-field="parameters.assocWeightTOHasResp" type="Double"/>
						<set field="createResponsibleWorkEffortAssocParams.estimatedStartDate" from-field="w.estimatedStartDate" type="Timestamp"/>
						<set field="createResponsibleWorkEffortAssocParams.estimatedCompletionDate" from-field="w.estimatedCompletionDate" type="Timestamp"/>
						<call-service service-name="createResponsibleWorkEffortAssoc" in-map-name="createResponsibleWorkEffortAssocParams"/>
					<else>
					    <!-- gn4403 -->
					    <entity-and list="respWeTypeAssocList" entity-name="WorkEffortTypeAssoc">
        	                <field-map field-name="workEffortTypeId" from-field="w.workEffortTypeId"/>
        	                <field-map field-name="hasResp" value="Y"/>
                        </entity-and>
                        <if-not-empty field="respWeTypeAssocList">
                            <iterate entry="respWeTypeAssocItem" list="respWeTypeAssocList">
                             	<if-compare field="respWeTypeAssocItem.wefromWetoEnumId" operator="equals" value="WETAFROM">
                                 	<entity-and list="respWeAssocList" entity-name="WorkEffortAssoc">
                                     	<field-map field-name="workEffortIdFrom" from-field="w.workEffortId"/>
                                     	<field-map field-name="workEffortIdTo" from-field="parameters.workEffortIdToHasResp"/>
                                     	<field-map field-name="workEffortAssocTypeId" from-field="respWeTypeAssocItem.workEffortAssocTypeId"/>
                                 	</entity-and>
                                 	<if-not-empty field="respWeAssocList">
                                 	    <iterate entry="respWeAssocItem" list="respWeAssocList">
                                 	        <set field="respWeAssocItem.assocWeight" from-field="parameters.assocWeightFROMHasResp" default-value="100" type="Double"/>
                                 	        <store-value value-field="respWeAssocItem"/>
                                 	    </iterate>
                                 	</if-not-empty>
                             	</if-compare>
                             	<if-compare field="respWeTypeAssocItem.wefromWetoEnumId" operator="equals" value="WETATO">
                                 	<entity-and list="respWeAssocList" entity-name="WorkEffortAssoc">
                                 	    <field-map field-name="workEffortIdFrom" from-field="parameters.workEffortIdFromHasResp"/>
                                     	<field-map field-name="workEffortIdTo" from-field="w.workEffortId"/>
                                     	<field-map field-name="workEffortAssocTypeId" from-field="respWeTypeAssocItem.workEffortAssocTypeId"/>
                                 	</entity-and>
                                 	<if-not-empty field="respWeAssocList">
                                 	    <iterate entry="respWeAssocItem" list="respWeAssocList">
                                 	        <set field="respWeAssocItem.assocWeight" from-field="parameters.assocWeightTOHasResp" default-value="100" type="Double"/>
                                 	        <store-value value-field="respWeAssocItem"/>
                                 	    </iterate>
                                 	</if-not-empty>
                             	</if-compare>                             	
                            </iterate>
                        </if-not-empty>
					</else>
					</if-compare-field>
					<!-- gn1942 update end -->

					<!-- unique WorkEffortAssoc -->
					<entity-one value-field="workEffortTypeContent" entity-name="WorkEffortTypeContent" auto-field-map="false">
						<field-map field-name="workEffortTypeId" from-field="w.workEffortTypeId"/>
						<field-map field-name="contentId" value="WEFLD_MAIN"/>
					</entity-one>

					<if>
						<condition>
							<and>
								<not>
									<if-empty field="workEffortTypeContent"/>
								</not>
								<not>
									<if-empty field="workEffortTypeContent.params"/>
								</not>
							</and>
						</condition>
						<then>
							<call-bsh>
								<![CDATA[
   									wetcContext2 = new java.util.HashMap();
       								org.ofbiz.base.util.BshUtil.eval(workEffortTypeContent.get("params"), wetcContext2);
   									
									result2 = new java.util.HashMap();
					    			if (org.ofbiz.base.util.UtilValidate.isNotEmpty(wetcContext2.get("checkUniqueRelation"))) {
					        			result2.put("checkUniqueRelation", wetcContext2.get("checkUniqueRelation"));
					    			}						           
					    			return result2;								
								]]>
							</call-bsh>
						</then>
					</if>				
						
			        <loop count="10" field="uniqueWorkEffortAssocIndex">
						<!-- workEffortAssocTypeId riferiment oper sapere se la lookup esiste in pagina o meno -->
			            <if>
			                <condition>
			                    <and>
			                        <not>
			                            <if-empty field="parameters.workEffortAssocTypeId${uniqueWorkEffortAssocIndex}"/>
			                        </not>
			            		</and>
			            	</condition>
			            	<then>
			            		<set field="manageUniqueWorkEffortAssocMap.wefromWetoEnumId" from-field="parameters.wefromWetoEnumId${uniqueWorkEffortAssocIndex}"/>
			            		<if-compare operator="equals" value="WETATO" field="manageUniqueWorkEffortAssocMap.wefromWetoEnumId">
			            			<entity-one value-field="toFromWe" entity-name="WorkEffort">
						                <field-map field-name="workEffortId" from-field="parameters.workEffortIdFrom${uniqueWorkEffortAssocIndex}" />
						            </entity-one>
			            			<set field="manageUniqueWorkEffortAssocMap.workEffortAssocOtherFieldValue" from-field="parameters.workEffortIdFrom${uniqueWorkEffortAssocIndex}" />
			            			<set field="manageUniqueWorkEffortAssocMap.workEffortIdFrom" from-field="parameters.workEffortIdFrom${uniqueWorkEffortAssocIndex}" />
				            		<set field="manageUniqueWorkEffortAssocMap.workEffortIdTo" from-field="workEffort.workEffortId" />
				            		<set field="manageUniqueWorkEffortAssocMap.workEffortTypeIdFrom" from-field="toFromWe.workEffortTypeId" />
					            	<set field="manageUniqueWorkEffortAssocMap.workEffortTypeIdTo" from-field="workEffort.workEffortTypeId" />
					            	<else>
			            				<entity-one value-field="toToWe" entity-name="WorkEffort">
							                <field-map field-name="workEffortId" from-field="parameters.workEffortIdTo${uniqueWorkEffortAssocIndex}" />
							            </entity-one>
	            						<set field="manageUniqueWorkEffortAssocMap.workEffortAssocOtherFieldValue" from-field="parameters.workEffortIdTo${uniqueWorkEffortAssocIndex}" />
				            			<set field="manageUniqueWorkEffortAssocMap.workEffortIdFrom" from-field="workEffort.workEffortId" />
				            			<set field="manageUniqueWorkEffortAssocMap.workEffortIdTo" from-field="parameters.workEffortIdTo${uniqueWorkEffortAssocIndex}" />
			            				<set field="manageUniqueWorkEffortAssocMap.workEffortTypeIdFrom" from-field="workEffort.workEffortTypeId" />
				            			<set field="manageUniqueWorkEffortAssocMap.workEffortTypeIdTo" from-field="toToWe.workEffortTypeId" />
			            			</else>
			            		</if-compare>
			            		<set field="manageUniqueWorkEffortAssocMap.workEffortAssocTypeId" from-field="parameters.workEffortAssocTypeId${uniqueWorkEffortAssocIndex}"/>
			            		<set field="manageUniqueWorkEffortAssocMap.assocWeight" from-field="parameters.assocWeight${uniqueWorkEffortAssocIndex}" type="Double"/>
			            		<set field="manageUniqueWorkEffortAssocMap.fromDate" from-field="workEffort.estimatedStartDate" type="Timestamp"/>
			            		<set field="manageUniqueWorkEffortAssocMap.thruDate" from-field="workEffort.estimatedCompletionDate" type="Timestamp"/>
			            		<call-service service-name="manageUniqueWorkEffortAssoc" in-map-name="manageUniqueWorkEffortAssocMap"/>
			            	</then>
			            </if>
		            </loop>
		            
		            <set field="checkUniqueRelation" from-field="checkUniqueRelation" default-value="N"/>
			        <if-compare operator="equals" value="Y" field="checkUniqueRelation">
				 		<entity-and list="listAssocTypeTo" entity-name="WorkEffortTypeAssoc">
				 			<field-map field-name="workEffortTypeId" from-field="workEffort.workEffortTypeId"/>
				 			<field-map field-name="isUnique" value="Y"/>
				 			<field-map field-name="wefromWetoEnumId" value="WETATO"/>
				 		</entity-and>
				 		<iterate entry="assocTypeTo" list="listAssocTypeTo">
				 			<string-append prefix=", " string="${assocTypeTo.comments}" field="comments"/>
				 		</iterate>
				 		<if-not-empty field="listAssocTypeTo">
				 			<entity-condition list="checkWorkEffortAssocList" entity-name="WorkEffortAndTypeAssocToView2">
					        	<condition-list>
					            	<condition-expr field-name="workEffortId" from-field="workEffort.workEffortId"/>
									<condition-expr field-name="isUnique" value="Y"/>
			            			<condition-expr field-name="fromWorkEffortId" operator="not-equals" value="${null}"/>
				            	</condition-list>
							</entity-condition>
							<set field="res" value="${bsh: return checkWorkEffortAssocList.size();}"/>
				        	<if-compare field="res" value="1" operator="not-equals">
					        	<add-error>
					            	<fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortAssocNotUniqueType"/>
					            </add-error>
					            <check-errors/>
					        </if-compare>
				 		</if-not-empty>
				 		
				 		<entity-and list="listAssocTypeFrom" entity-name="WorkEffortTypeAssoc">
				 			<field-map field-name="workEffortTypeId" from-field="workEffort.workEffortTypeId"/>
				 			<field-map field-name="isUnique" value="Y"/>
				 			<field-map field-name="wefromWetoEnumId" value="WETAFROM"/>
				 		</entity-and>
				 		<iterate entry="assocTypeFrom" list="listAssocTypeFrom">
				 			<string-append prefix=", " string="${assocTypeFrom.comments}" field="comments"/>
				 		</iterate>
				 		<if-not-empty field="listAssocTypeFrom">
					        <entity-condition list="checkWorkEffortAssocList" entity-name="WorkEffortAndTypeAssocFromView">
					        	<condition-list>
					            	<condition-expr field-name="workEffortId" from-field="workEffort.workEffortId"/>
									<condition-expr field-name="isUnique" value="Y"/>
		            				<condition-expr field-name="toWorkEffortId" operator="not-equals" value="${null}"/>
				            	</condition-list>
							</entity-condition>
							<set field="res" value="${bsh: return checkWorkEffortAssocList.size();}"/>
				        	<if-compare field="res" value="1" operator="not-equals">
					        	<add-error>
					            	<fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortAssocNotUniqueType"/>
					            </add-error>
					            <check-errors/>
					        </if-compare>
				        </if-not-empty>
			        </if-compare>
			        
					<!-- GN-2140 BEGIN -->
					<if>
						<condition>
							<and>
								<if-compare field="parameters.fromCard" operator="equals" value="S"/>
								<if-compare-field operator="equals" field="parameters.workEffortIdRoot" to-field="parameters.workEffortId"/>
							</and>
						</condition>
						<then>
							<if>
								<condition>
									<or>
										<if-compare-field field="workEffort.orgUnitId" operator="not-equals" to-field="w.orgUnitId"/>
										<if-compare-field field="workEffort.estimatedStartDate" operator="not-equals" to-field="w.estimatedStartDate"/>
										<if-compare-field field="workEffort.estimatedCompletionDate" operator="not-equals" to-field="w.estimatedCompletionDate"/>
									</or>
								</condition>
								<then>
									<call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="toTimeZone" ret-field="currentTimeZone">
										<string value=""/>
									</call-class-method>
									<call-bsh>
										<![CDATA[
											groovyContext = new java.util.HashMap();
											groovyContext.put("dispatcher", dispatcher);
											groovyContext.put("delegator", delegator);
											groovyContext.put("locale", locale);
											groovyContext.put("timeZone", currentTimeZone);
   					
											inputFields = new java.util.HashMap();
        									inputFields.put("workEffortIdRoot", parameters.get("workEffortIdRoot"));
        									inputFields.put("oldOrgUnitId", workEffort.getString("orgUnitId"));
        									inputFields.put("orgUnitRoleTypeId", w.getString("orgUnitRoleTypeId")); 
        									inputFields.put("orgUnitId", w.getString("orgUnitId"));       									       							      									
        									inputFields.put("oldEstimatedStartDate", workEffort.getTimestamp("estimatedStartDate"));
        									inputFields.put("estimatedStartDate", w.getTimestamp("estimatedStartDate"));      					      								    																	
        									inputFields.put("oldEstimatedCompletionDate", workEffort.getTimestamp("estimatedCompletionDate"));
        									inputFields.put("estimatedCompletionDate", w.getTimestamp("estimatedCompletionDate"));
   											groovyContext.put("inputFields", inputFields);
            					
											org.ofbiz.base.util.GroovyUtil.runScriptAtLocation("component:/workeffortext/webapp/workeffortext/WEB-INF/actions/updateRootsChildrenOrgUnitAndStartDateAndCompletionDateFields.groovy", groovyContext);
        									result = new java.util.HashMap();
            								result.put("toUpdateByCompletionDateList", groovyContext.get("toUpdateByCompletionDateList"));
            
            								return result;											
										]]>
									</call-bsh>
									<check-errors/> 
									<!-- aggiornamento automatico della date fine per le misure e i soggetti collegati e le note -->
									<if-not-empty field="toUpdateByCompletionDateList">
										<iterate entry="toUpdateByCompletionDateItem" list="toUpdateByCompletionDateList">
											<clear-field field="updateByCompletionDateInMap"/>
											<set-service-fields service-name="crudServiceDefaultOrchestration_updateByWorkEffortEstimatedStartAndCompletionDate" map="parameters" to-map="updateByCompletionDateInMap"/>
											<set field="updateByCompletionDateInMap.parameters.workEffortId" from-field="toUpdateByCompletionDateItem.workEffortId"/>
											<set field="updateByCompletionDateInMap.parameters.oldEstimatedStartDate" from-field="workEffort.estimatedStartDate" type="Timestamp"/>
											<set field="updateByCompletionDateInMap.parameters.oldEstimatedCompletionDate" from-field="workEffort.estimatedCompletionDate" type="Timestamp"/>
											<call-service service-name="crudServiceDefaultOrchestration_updateByWorkEffortEstimatedStartAndCompletionDate" in-map-name="updateByCompletionDateInMap"/>
										</iterate>
									</if-not-empty>             			
								</then>
							</if>
						</then>
					</if>
					<!-- GN-2140 END -->			        
        
                    <else>
                        <if-compare field="parameters.operation" operator="equals" value="DELETE">
                            <!-- ************************************************************** -->
                            <!-- DELETE -->
                            <!-- ************************************************************** -->

                            <entity-one value-field="weToDelete" entity-name="WorkEffort">
                                <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
                            </entity-one>
                            <if-not-empty field="weToDelete">
                                <if-compare-field operator="not-equals" field="weToDelete.workEffortId" to-field="weToDelete.workEffortParentId">
                                    <entity-one value-field="weRoot" entity-name="WorkEffort" auto-field-map="false">
                                        <field-map field-name="workEffortId" from-field="weToDelete.workEffortParentId"/>
                                    </entity-one>
                                    <if-not-empty field="weRoot">
                                        <entity-one value-field="weTypeRoot" entity-name="WorkEffortType" auto-field-map="false">
                                            <field-map field-name="workEffortTypeId" from-field="weRoot.workEffortTypeId"/>
                                        </entity-one>
                                        <if-not-empty field="weTypeRoot">
                                            <if-not-empty field="weTypeRoot.hierarchyAssocTypeId">
                                                <entity-and list="weAssChildrenList" entity-name="WorkEffortAssoc">
                                                	<field-map field-name="workEffortIdFrom" from-field="parameters.workEffortId"/>
                                                	<field-map field-name="workEffortAssocTypeId" from-field="weTypeRoot.hierarchyAssocTypeId"/>
                                            	</entity-and>
                                            	<if-not-empty field="weAssChildrenList">
                                            	    <iterate entry="weAssChildrenItem" list="weAssChildrenList">
                                            	        <clear-field field="weAssGrandChildrenList"/>
                                                		<entity-and list="weAssGrandChildrenList" entity-name="WorkEffortAssoc">
                                                			<field-map field-name="workEffortIdFrom" from-field="weAssChildrenItem.workEffortIdTo"/>
                                                			<field-map field-name="workEffortAssocTypeId" from-field="weTypeRoot.hierarchyAssocTypeId"/>
                                            			</entity-and>
                                            			<if-not-empty field="weAssGrandChildrenList">
                                            			    <iterate entry="weAssGrandChildrenItem" list="weAssGrandChildrenList">
                                            			        <clear-field field="deleteWorkEffortExtGrandChildInMap"/>
                                                                <set field="deleteWorkEffortExtGrandChildInMap.workEffortId" from-field="weAssGrandChildrenItem.workEffortIdTo"/>
                                                                <set field="deleteWorkEffortExtGrandChildInMap.isObiettivo" from-field="parameters.isObiettivo"/>
                                                                <set field="deleteWorkEffortExtGrandChildInMap.copyWorkEffort" from-field="parameters.copyWorkEffort"/>
                                                                <call-service service-name="deleteWorkEffortExt" in-map-name="deleteWorkEffortExtGrandChildInMap"/>                                           			    
                                            			    </iterate>
                                            			</if-not-empty> 
                                            			<clear-field field="deleteWorkEffortExtChildInMap"/>                                         			                                            			        <clear-field field="deleteWorkEffortExtGrandChildInMap"/>
                                                        <set field="deleteWorkEffortExtChildInMap.workEffortId" from-field="weAssChildrenItem.workEffortIdTo"/>
                                                        <set field="deleteWorkEffortExtChildInMap.isObiettivo" from-field="parameters.isObiettivo"/>
                                                        <set field="deleteWorkEffortExtChildInMap.copyWorkEffort" from-field="parameters.copyWorkEffort"/>
                                                        <call-service service-name="deleteWorkEffortExt" in-map-name="deleteWorkEffortExtChildInMap"/>                                            	        
                                            	    </iterate>
                                            	</if-not-empty>
                                            </if-not-empty>
                                        </if-not-empty>
                                    </if-not-empty>
                                </if-compare-field>
                            </if-not-empty>
                            
                            <set field="deleteWorkEffortExtInMap.workEffortId" from-field="parameters.workEffortId"/>
                            <set field="deleteWorkEffortExtInMap.isObiettivo" from-field="parameters.isObiettivo"/>
                            <set field="deleteWorkEffortExtInMap.copyWorkEffort" from-field="parameters.copyWorkEffort"/>
                            <call-service service-name="deleteWorkEffortExt" in-map-name="deleteWorkEffortExtInMap"/>                     
                        </if-compare>
                    </else>
                </if-compare>
            </else>
        </if-compare>

        <check-errors/>
    </simple-method>

    <!-- ************************************************************** -->
    <!-- WorkEffortStatus -->
    <!-- ************************************************************** -->

    <simple-method method-name="crudServiceOperation_WorkEffortRootStatus" short-description="crudServiceOperation_WorkEffortRootStatus">
        <set field="parametersCrud" from-field="parameters"/>
        <set field="parameters" from-field="parameters.parameters"/>
		
		<if-empty field="parameters.sessionId">
	        <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="nowAsString" ret-field="nowStamp"/>
	        <call-class-method method-name="getDigestHash" class-name="org.ofbiz.base.crypto.HashCrypt" ret-field="sessionId">
	            <field field="nowStamp"/>
	            <string value="SHA"/>
	        </call-class-method>
	
	        <set field="beginIndex" value="37" type="Integer"/>
	        <call-object-method method-name="substring" obj-field="sessionId" ret-field="sessionId">
	            <field field="beginIndex" type="int"/>
	        </call-object-method>
	        <else>
	        	<set field="sessionId" from-field="parameters.sessionId"/>
	        </else>
        </if-empty>
        
        <!-- Carica il workEffort attuale -->
        <entity-one entity-name="WorkEffort" value-field="workEffort" auto-field-map="false" use-cache="true">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-one>
        <log level="always" message="************************************** crudServiceOperation_WorkEffortRootStatus : workEffortRootId = ${parameters.workEffortId}"/>

        <if-not-empty field="workEffort">
            <get-related-one relation-name="WorkEffortType" to-value-field="workEffortType" value-field="workEffort"/>

            <if-compare operator="equals" value="Y" field="workEffortType.isRoot">
                <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssoc" use-cache="true">
                    <condition-list>
                        <condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortId"/>
                        <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                    </condition-list>
                </entity-condition>

				<set field="workEffortRootId" from-field="parameters.workEffortId" />
                <entity-one value-field="workEffortAndTypePeriodAndThruDate" entity-name="WorkEffortAndTypePeriodAndThruDate">
                    <field-map field-name="workEffortId" from-field="workEffortRootId"/>
                </entity-one>
                <log level="always" message="************************************** workEffortAndTypePeriodAndThruDate ${workEffortAndTypePeriodAndThruDate}"/>
                
                <entity-one value-field="workEffortTypeStatus" entity-name="WorkEffortTypeStatus" auto-field-map="false">
		            <field-map field-name="workEffortTypeRootId" from-field="workEffortType.workEffortTypeId"/>
		            <field-map field-name="currentStatusId" from-field="parameters.statusId"/>
		        </entity-one>
         
                <!-- Check SCORE CALC -->
				<log level="always" message="************************************** workEffortTypeStatus.ctrlScoreEnumId ${workEffortTypeStatus.ctrlScoreEnumId}"></log>
                <!-- pre elaboration -->
                <if-compare operator="equals" value="CTRL_SCORE_CALC" field="workEffortTypeStatus.ctrlScoreEnumId">
	            	<set field="scoreDate" from-field="workEffortAndTypePeriodAndThruDate.thruDate" />
	                <!-- deafult value for score calc -->
	                <set field="scoreTarget" value="BUDGET" />
	                <set field="scorePerformance" value="ACTUAL" />
	                <set field="scoreScoreValueType" value="ACTUAL" />
							
					<!-- Recupero params -->
	                <entity-condition list="workEffortTypeContentList" entity-name="WorkEffortTypeContent" use-cache="true">
			            <condition-list>
			                <condition-expr field-name="workEffortTypeId" from-field="workEffort.workEffortTypeId"/>
			                <condition-expr field-name="params" operator="not-equals" value="null"/>
			                <condition-list combine="or">
			                    <condition-expr field-name="contentId" operator="equals" value="WEFLD_ELAB"/>
			                    <condition-expr field-name="weTypeContentTypeId" operator="equals" value="WEFLD_ELAB"/>
			                </condition-list>
			            </condition-list>
			        </entity-condition>
   					<first-from-list entry="workEffortTypeContent" list="workEffortTypeContentList"/>
    				<if-not-empty field="workEffortTypeContent">
   						<log level="always" message="************************************** workEffortTypeContent.params ${workEffortTypeContent.params}"></log>
   						<if-not-empty field="workEffortTypeContent.params">
	   			    		<call-bsh><![CDATA[
	   							groovyContext = new java.util.HashMap();
	       						org.ofbiz.base.util.BshUtil.eval(workEffortTypeContent.get("params"), groovyContext);
	   									
								result = new java.util.HashMap();
								
						    	if (org.ofbiz.base.util.UtilValidate.isNotEmpty(groovyContext.get("glFiscalTypeIdExcellentLimit"))) {
						        	result.put("scoreLimitExcellent", groovyContext.get("glFiscalTypeIdExcellentLimit"));
						    	}								
						    	if (org.ofbiz.base.util.UtilValidate.isNotEmpty(groovyContext.get("glFiscalTypeIdUpperLimit"))) {
						        	result.put("scoreLimitMax", groovyContext.get("glFiscalTypeIdUpperLimit"));
						    	}
						    	if (org.ofbiz.base.util.UtilValidate.isNotEmpty(groovyContext.get("target"))) {
						        	result.put("scoreTarget", groovyContext.get("target"));
						    	}
						    	if (org.ofbiz.base.util.UtilValidate.isNotEmpty(groovyContext.get("glFiscalTypeIdMediumLimit"))) {
						        	result.put("scoreLimitMed", groovyContext.get("glFiscalTypeIdMediumLimit"));
						    	}						    	
						    	if (org.ofbiz.base.util.UtilValidate.isNotEmpty(groovyContext.get("glFiscalTypeIdLowerLimit"))) {
						        	result.put("scoreLimitMin", groovyContext.get("glFiscalTypeIdLowerLimit"));
						    	}						    	
						    	if (org.ofbiz.base.util.UtilValidate.isNotEmpty(groovyContext.get("performance"))) {
						        	result.put("scorePerformance", groovyContext.get("performance"));
						    	}
						    	if (org.ofbiz.base.util.UtilValidate.isNotEmpty(groovyContext.get("scoreValueType"))) {
						        	result.put("scoreScoreValueType", groovyContext.get("scoreValueType"));
						    	}
						           
						    	return result;
							]]></call-bsh>
						</if-not-empty>
    				</if-not-empty>
	                	
	                <log level="always" message="************************************** scoreTarget ${scoreTarget} - scorePerformance ${scorePerformance} - scoreScoreValueType ${scoreScoreValueType}"></log>
    				<entity-condition list="scoreAccountList" entity-name="WorkEffortTransactionIndicatorViewWithScorekpi" use-cache="false">
			            <condition-list>
			                <condition-expr field-name="weTransWeId" from-field="workEffortRootId"/>
			                <condition-expr field-name="weTransAccountId" value="SCORE"/>
			                <condition-expr field-name="weTransTypeValueId" from-field="scoreScoreValueType"/>
			                <condition-expr field-name="weTransDate" from-field="scoreDate"/>
			            </condition-list>
			        </entity-condition>
			        <first-from-list entry="scoreAccount" list="scoreAccountList"/>
			        <if-not-empty field="scoreAccount">
			            <set field="oldAmount" from-field="scoreAccount.weTransValue" type="Double" />
			            <set field="scoreDecimalScale" from-field="scoreAccount.weTransDecimalScale" type="Integer" />
			        </if-not-empty>
			        <if-empty field="decimalScale">
			            <!-- get decimalScale from OTH_SCO -->
			            <entity-one value-field="uom" entity-name="Uom">
			                <field-map field-name="uomId" value="OTH_SCO"/>
			            </entity-one>
			            <set field="scoreDecimalScale" from-field="uom.decimalScale" type="Integer" />
			        </if-empty>
			        <log level="always" message="************************************** oldAmount ${oldAmount}"></log>	                
                </if-compare>
                
				<iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                    <make-value value-field="workEffortStatus" entity-name="WorkEffortStatus"/>
                    <set-pk-fields value-field="workEffortStatus" map="parameters"/>
                    <set-nonpk-fields value-field="workEffortStatus" map="parameters"/>
                    <set field="workEffortStatus.workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>

                    <call-object-method method-name="getAllFields" obj-field="workEffortStatus" ret-field="parametersCrud.parameters"/>
                    <set field="parametersCrud.parameters.searchDate" from-field="parameters.searchDate" type="Timestamp"/>
                    <call-service service-name="crudServiceDefaultOrchestration_WorkEffortStatus" in-map-name="parametersCrud">
                    	<result-to-field result-name="failMessage"/>
                    	<result-to-field result-name="failMessageList"/>
                    </call-service>
			    	<log level="verbose" message="************************************** crudServiceOperation_WorkEffortRootStatus it failMessage ${failMessage}"></log>
			    	<log level="verbose" message="************************************** crudServiceOperation_WorkEffortRootStatus it failMessageList ${failMessageList}"></log>
			    	<!-- concatenati -->
	                <if-not-empty field="failMessage">
						<string-append prefix=" " suffix=" " string="${failMessage}" field="failMessageResult"/>
					</if-not-empty>
					<if-not-empty field="failMessageList">
						<string-append prefix=" " suffix=" " string="${failMessageList}" field="failMessageListResult"/>
					</if-not-empty>
                    <log level="verbose" message="************************************** crudServiceOperation_WorkEffortRootStatus it failMessageResult ${failMessageResult}"></log>
			    	<log level="verbose" message="************************************** crudServiceOperation_WorkEffortRootStatus it failMessageListResult ${failMessageListResult}"></log>
			    	<check-errors/>
                    
                </iterate>
                <log level="verbose" message="************************************** crudServiceOperation_WorkEffortRootStatus 3 failMessageResult ${failMessageResult}"></log>
		    	<log level="verbose" message="************************************** crudServiceOperation_WorkEffortRootStatus 3 failMessageListResult ${failMessageListResult}"></log>
		    	
		    	<!-- failMessageListserve per farlo comparire nel popup in basso -->
		    	<!-- failMessage serve per farlo comparire nel popup in alto-->
		    	<set field="failMessage" from-field="failMessageListResult"/>
				<field-to-result field="failMessage" result-name="failMessage"/> 
				
                <!-- post elaboration -->
                <if-compare operator="equals" value="CTRL_SCORE_CALC" field="workEffortTypeStatus.ctrlScoreEnumId">
                	<set field="serviceParameters.thruDate" from-field="scoreDate" type="Timestamp"/>
                	<set field="serviceParameters.limitExcellent" from-field="scoreLimitExcellent"/>
                	<set field="serviceParameters.limitMax" from-field="scoreLimitMax"/>
			        <set field="serviceParameters.target" from-field="scoreTarget"/>
			        <set field="serviceParameters.limitMed" from-field="scoreLimitMed"/>
			        <set field="serviceParameters.limitMin" from-field="scoreLimitMin"/>
			        <set field="serviceParameters.performance" from-field="scorePerformance"/>
			        <set field="serviceParameters.scoreValueType" from-field="scoreScoreValueType"/>
			        <set field="serviceParameters.workEffortId" from-field="workEffortRootId"/>
			        <set field="serviceParameters.cleanOnlyScoreCard" value="N"/>
    				<set field="serviceParameters.sessionId" from-field="sessionId"/>
    								
                	<call-service service-name="scoreCardCalc" in-map-name="serviceParameters">
			            <result-to-field result-name="valueScoreCardCal" field="valueScoreCardCal"/>            
			        </call-service>
			        <check-errors/>
        			<log level="always" message="************************************** check ${oldAmount} and ${valueScoreCardCal} with decimalScale ${scoreDecimalScale}"></log>
	                <set field="newAmount" from-field="valueScoreCardCal"/>
			        
			        <calculate type="Double" field="newAmount" decimal-scale="${scoreDecimalScale}" rounding-mode="HalfUp">
		                <calcop operator="get" field="newAmount"></calcop>
		            </calculate>
			        <calculate type="Double" field="oldAmount" decimal-scale="${scoreDecimalScale}" rounding-mode="HalfUp">
		                <calcop operator="get" field="oldAmount"></calcop>
		            </calculate>
                    	    
			        <if>
			        	<condition>
			        		<or>
			        			<and>
				        			<if-empty field="oldAmount"/>
				        			<not><if-empty field="newAmount"/></not>
			        			</and>
			        			<and>
			        				<not><if-empty field="newAmount"/></not>
			        				<not><if-empty field="oldAmount"/></not>
			        				<if-compare-field operator="not-equals" field="newAmount" to-field="oldAmount" type="Double"/>
			        			</and>
			        		</or>
			        	</condition>
			        	<then>
		                	<property-to-field resource="WorkeffortExtUiLabels" property="WorkEffortScoreCardLabelFirst" field="firstLabel"/>
					        <property-to-field resource="WorkeffortExtUiLabels" property="WorkEffortScoreCardLabelSecond" field="secondLabel"/>
					        
				        	<entity-one entity-name="WorkEffort" value-field="workEffortRoot" auto-field-map="false" use-cache="true">
					            <field-map field-name="workEffortId" from-field="workEffortRootId"/>
					        </entity-one>
        					
				        	<property-to-field resource="WorkeffortExtUiLabels" property="WorkeffortRoot" field="rootLabel"/> <!-- Scheda -->
				        	<set field="errorRootPrefix" value="&lt;br&gt;${rootLabel} &lt;b&gt;${workEffortRoot.workEffortName}&lt;/b&gt;: &lt;br&gt;"/> <!-- Scheda Polo Scientifico (se possibile grassetto) -->
				        	<string-append prefix="&lt;br&gt;" suffix="&lt;br&gt;" string="${errorRootPrefix}" field="lastFailMessage"/>
				        	<string-append string="${firstLabel}" field="lastFailMessage"/>
				        	<string-append prefix=" " suffix=" " string="${newAmount}" field="lastFailMessage"/>
				        	<string-append string="${secondLabel}" field="lastFailMessage"/>
				        	<if-not-empty field="oldAmount">
								<string-append prefix=" " suffix=" " string="${oldAmount}" field="lastFailMessage"/>
							</if-not-empty>
				        	<field-to-result result-name="failMessage" field="lastFailMessage"/>
		                	<log level="always" message="************************************** failMessage ${failMessage}"></log>
	                		<check-errors/>
			        	</then>
			        </if>  
	        	</if-compare>
	        		
                <else>
                    <add-error>
                        <fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortIsNotARoot"/>
                    </add-error>
                    <check-errors/>
                </else>
            </if-compare>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="checkWorkEffortStatusHasMandatoryNoteEmpty" short-description="return true if WorkEffortTypeStatus has mandatoryAttr and has a noteInfo not null">
        <call-class-method class-name="com.mapsengineering.base.events.LanguageLocaleEvent" method-name="isPrimaryLanguage" ret-field="isPrimaryLang">
			<field field="locale" type="java.util.Locale"/>
		</call-class-method>
        <log level="always" message="###### checkWorkEffortStatusHasMandatoryNoteEmpty isPrimaryLang ${isPrimaryLang}"/>
        <log level="verbose" message="### parameters.statusId ${parameters.statusId}"/>
        <set field="hasMandatoryNoteEmpty" type="Boolean" value="false"/>

        <!-- controllo delle note obbligatorie -->
        <entity-one entity-name="WorkEffort" value-field="workEffortRoot">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-one>

        <set field="fromDate" value="" type="Timestamp"/>
        <set field="thruDate" value="" type="Timestamp"/>
        <!-- <log level="always" message="### fromDate ${fromDate}" /> -->
        <if-not-empty field="workEffortRoot">
            <get-related-one relation-name="WorkEffortType" to-value-field="workEffortTypeRoot" value-field="workEffortRoot"/>
            <if-compare operator="equals" value="Y" field="workEffortTypeRoot.isRoot">
                <if-not-empty field="workEffortRoot.workEffortTypePeriodId">
	                <set field="workEffortTypePeriodId" from-field="workEffortRoot.workEffortTypePeriodId"/>
	                
	                <entity-one entity-name="WorkEffortTypePeriod" value-field="workEffortTypePeriod">
	                    <field-map field-name="workEffortTypePeriodId" from-field="workEffortTypePeriodId"/>
	                </entity-one>
	                <if-not-empty field="workEffortTypePeriod">
	                    <set field="customTimePeriodId" from-field="workEffortTypePeriod.customTimePeriodId"/>
	                    <entity-one entity-name="CustomTimePeriod" value-field="customTimePeriod">
	                        <field-map field-name="customTimePeriodId" from-field="customTimePeriodId"/>
	                    </entity-one>
	                    <if-not-empty field="customTimePeriod">
	                        <set field="fromDate" from-field="customTimePeriod.fromDate" type="Timestamp"/>
	                        <set field="thruDate" from-field="customTimePeriod.thruDate" type="Timestamp"/>
	                    </if-not-empty>
	                </if-not-empty>
	            </if-not-empty>
				<log level="always" message="### workEffortTypePeriodId ${workEffortTypePeriodId} (${workEffortTypePeriod.customTimePeriodId}), fromDate ${fromDate} - thruDate ${thruDate} "/>
                
                <entity-one value-field="workEffortTypeStatus" entity-name="WorkEffortTypeStatus">
                    <field-map field-name="workEffortTypeRootId" from-field="workEffortTypeRoot.workEffortTypeId"/>
                    <field-map field-name="currentStatusId" from-field="parameters.statusId"/>
                </entity-one>
                <log level="always" message="### workEffortTypeStatus.hasMandatoryAttr ${workEffortTypeStatus.hasMandatoryAttr}"/>
                <if-compare operator="equals" value="Y" field="workEffortTypeStatus.hasMandatoryAttr">

                    <entity-and list="workEffortList" entity-name="WorkEffort">
                        <field-map field-name="workEffortParentId" from-field="parameters.workEffortId"/>
                        <order-by field-name="workEffortId"/>
		        	</entity-and>

                    <iterate entry="workEffort" list="workEffortList">
        				<!-- if empty note for workEffort then addWorkEffortToErrorMsg = true, otherwise false-->
                    	<set field="addWorkEffortToErrorMsg" type="Boolean" value="false"/>
                    	
                        <get-related-one relation-name="WorkEffortType" to-value-field="workEffortType" value-field="workEffort"/>

                        <!-- prendo la lista delle note obbligatorie -->
                        <entity-and list="workEffortTypeAttrList" entity-name="WorkEffortTypeAttr">
                            <field-map field-name="workEffortTypeId" from-field="workEffortType.workEffortTypeId"/>
                            <field-map field-name="isMandatory" value="Y"/>
                            <field-map field-name="isNote" value="Y"/>
                        </entity-and>
                        <iterate entry="workEffortTypeAttr" list="workEffortTypeAttrList">
                            <!-- Verifico se esiste la nota e se nn è vuota -->
                            <log level="always" message="### workEffortTypeAttr ${workEffortTypeAttr} from ${fromDate} to ${thruDate}"/>
        					<if>
                                <condition>
                                    <and>
                                        <if-empty field="fromDate"/>
                                        <if-empty field="thruDate"/>
                                    </and>
                                </condition>
                                <then>
                                    <entity-and list="workEffortNoteList" entity-name="WorkEffortNoteAndData">
                                        <field-map field-name="workEffortId" from-field="workEffort.workEffortId"/>
                                        <field-map field-name="noteName" from-field="workEffortTypeAttr.attrName"/>
                                    </entity-and>
                                </then>
                                <else>
                                    <entity-condition list="workEffortNoteList" entity-name="WorkEffortNoteAndData">
                                        <condition-list combine="and">
                                            <condition-expr field-name="workEffortId" from-field="workEffort.workEffortId"/>
                                            <condition-expr field-name="noteName" from-field="workEffortTypeAttr.attrName"/>
                                            <condition-list combine="and">
                                                <condition-expr field-name="noteDateTime" operator="less-equals" from-field="thruDate"/>
                                                <condition-expr field-name="noteDateTime" operator="greater-equals" from-field="fromDate"/>
                                            </condition-list>
                                        </condition-list>
                                    </entity-condition>
                                </else>
                            </if>
                            <iterate entry="workEffortNote" list="workEffortNoteList">
                            	<call-bsh>
									<![CDATA[
									    multiTypeLang = org.ofbiz.base.util.UtilProperties.getPropertyValue("BaseConfig", "Language.multi.type");
        								isEmptyNoteInfo = false;
        								noteInfo = workEffortNote.get("noteInfo");
									    noteInfoLang = workEffortNote.get("noteInfoLang");
									    if (org.ofbiz.base.util.UtilValidate.isEmpty(noteInfo)) {
									        isEmptyNoteInfo = true;
									    } else {
									    	if (org.ofbiz.base.util.UtilValidate.isEmpty(noteInfo.trim())) {
									        	isEmptyNoteInfo = true;
									        }
									    }
									    if ("BILING".equals(multiTypeLang)) {
									    	if (org.ofbiz.base.util.UtilValidate.isEmpty(noteInfoLang)) {
										        isEmptyNoteInfo = true;
										    } else {
										    	if (org.ofbiz.base.util.UtilValidate.isEmpty(noteInfoLang.trim())) {
										        	isEmptyNoteInfo = true;
										        }
										    }
									    }
										result = new java.util.HashMap();
							    		result.put("isEmptyNoteInfo", isEmptyNoteInfo);							    								           
							    		return result;								
									]]>
								</call-bsh>
                                <if-compare value="true" type="Boolean" operator="equals" field="isEmptyNoteInfo">
                                	<property-to-field resource="WorkeffortExtErrorLabels" property="MandatoryFieldMissing" field="errorNote"/>
                                 	<if>
								    	<condition>
								    		<if-compare field="isPrimaryLang" value="true" operator="equals" type="Boolean"/>
								    	</condition>
								    	<then>
								    		<string-append string=" ${workEffort.workEffortName} ---&gt; " field="errorNote"/>
								    		<string-append string=" ${workEffortTypeAttr.attrName}" field="errorNote"/>
                            			</then>
								    	<else>
								    		<if-not-empty field="workEffort.workEffortNameLang">
							        		    <string-append string=" ${workEffort.workEffortNameLang} ---&gt; " field="errorNote"/>
							        		    <else>
							        		    	<string-append string=" ${workEffort.workEffortName} ---&gt; " field="errorNote"/>
							        		    </else>
							        		</if-not-empty>
							        		<if-not-empty field="workEffortTypeAttr.attrNameLang">
							        		    <string-append string=" ${workEffortTypeAttr.attrNameLang}" field="errorNote"/>
							        		    <else>
							        		    	<string-append string=" ${workEffortTypeAttr.attrName}" field="errorNote"/>
							        		    </else>
							        		</if-not-empty>
								    	</else>
								    </if>
		    
                            		<string-append string="${errorNote}" field="errorMsg"/>
			                    	<string-append string="&lt;br&gt;" field="errorMsg"/> 
                                
                                    <!-- non esiste la nota -->
                                    <log level="always" message="### per obiettivo ${workEffort.workEffortId} manca il valore per la nota ${workEffortNote.noteName}  ${workEffortNote.noteNameLang}"/>
        							<set field="hasMandatoryNoteEmpty" type="Boolean" value="true"/>
                                    <set field="addWorkEffortToErrorMsg" type="Boolean" value="true"/>
                                </if-compare>
                            </iterate>
                        </iterate>                      
                    </iterate>
                </if-compare>
            </if-compare>
        </if-not-empty>
        <log level="always" message="###### parameters.workEffortId ${parameters.workEffortId} hasMandatoryNoteEmpty = ${hasMandatoryNoteEmpty}, errorMsg = ${errorMsg}"/>
        <field-to-result field="hasMandatoryNoteEmpty"/>
        <if-not-empty field="errorMsg">
        	<field-to-result field="errorMsg"/>
        </if-not-empty>
    </simple-method>


    <simple-method method-name="crudServiceOperation_WorkEffortStatus" short-description="crudServiceOperation_WorkEffortStatus">
        <log level="verbose" message="**** parameters=${parameters}"/>
        <set field="parametersCrud" from-field="parameters"/>
        <set field="parameters" from-field="parameters.parameters"/>

        
        <!-- Carica il workEffort attuale -->
        <entity-one entity-name="WorkEffort" value-field="workEffort" auto-field-map="false">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-one>

        <log level="verbose" message="************************************** crudServiceOperation_WorkEffortStatus : workEffort = ${workEffort}"></log>
        <if-not-empty field="workEffort">
            <set field="needCheckStatusItem" value="N"/>
            <set field="needUpdateWorkEffortStatus" value="N"/>

            <if-compare field="parametersCrud.operation" operator="equals" value="CREATE">
                <set field="needUpdateWorkEffortStatus" value="Y"/>
                <else>
                    <if-compare field="parametersCrud.operation" operator="equals" value="UPDATE">
                        <set field="needCheckStatusItem" value="Y"/>
                        <else>
                            <if-compare field="parametersCrud.operation" operator="equals" value="DELETE">
                                <set field="needCheckStatusItem" value="Y"/>
                                <set field="needUpdateWorkEffortStatus" value="Y"/>
                            </if-compare>
                        </else>
                    </if-compare>
                </else>
            </if-compare>

            <log level="verbose" message="************************************** crudServiceOperation_WorkEffortStatus : needUpdateWorkEffortStatus = ${needUpdateWorkEffortStatus}"></log>

            <entity-one value-field="workEffortStatus" entity-name="WorkEffortStatus"/>

            <!-- ToDo 3820 eliminato controllo sullo stato ed espressamente non -->
            <!-- inserito quello su isPosted -->
            <if>
                <condition>
                    <or>
                        <if-compare field="parametersCrud.operation" operator="not-equals" value="CREATE"/>
                        <and>
                            <if-compare field="parametersCrud.operation" operator="equals" value="CREATE"/>
                            <if-empty field="workEffortStatus"/>
                        </and>
                    </or>
                </condition>
                <then>
                    <log level="verbose" message="************************************** crudServiceOperation_WorkEffortStatus : creo nuov WorkEffortStatus"></log>
                    <log level="verbose" message="************************************** crudServiceOperation_WorkEffortStatus : parametersCrud = ${parametersCrud}"></log>

                    <set-service-fields service-name="checkWorkEffortStatusService" to-map="checkWorkEffortStatusServiceMap" map="parameters"/>

                    <call-service service-name="checkWorkEffortStatusService" in-map-name="checkWorkEffortStatusServiceMap">
	                    <results-to-map map-name="checkWorkEffortStatusServiceResult"/>
	                </call-service>
	        		
	                <log level="always" message="************************************** checkWorkEffortStatusServiceResult : ${checkWorkEffortStatusServiceResult}"></log>
                    <!-- ATTENZIONE: errorMsg in realta' non e' mai valorizzato, perche' se esce con errore ha errorMessageList valorizzato -->
	                <if-not-empty field="checkWorkEffortStatusServiceResult.errorMsg">
	                	<string-append suffix="&lt;br&gt;" string="${checkWorkEffortStatusServiceResult.errorMsg}" field="errorMessageLista"/>
	                </if-not-empty>
	                <!-- in caso di warning, si ha failMessageList valorizzato -->
	                <if-not-empty field="checkWorkEffortStatusServiceResult.failMessageList">
	                	<string-append suffix="&lt;br&gt;" string="${checkWorkEffortStatusServiceResult.failMessageList}" field="failMessageList"/>
	                </if-not-empty>
                    <log level="always" message="************************************** crudServiceOperation_WorkEffortStatus : parametersCrud = ${parametersCrud}"></log>
                    <check-errors/>


                    <!-- Call base operation -->

                    <set-service-fields service-name="crudServiceOperation" to-map="crudServiceOperationMap" map="parametersCrud"/>
                    <call-service service-name="crudServiceOperation" in-map-name="crudServiceOperationMap">
                        <result-to-field result-name="id"/>
                    </call-service>
                    <field-to-result field="id"/>
                </then>
            </if>

        	<if-compare field="needUpdateWorkEffortStatus" operator="equals" value="Y">
                <log level="verbose" message="************************************** crudServiceOperation_WorkEffortStatus : parameters.statusId = ${parameters.statusId}"></log>
                <log level="verbose" message="************************************** crudServiceOperation_WorkEffortStatus : parameters.statusDatetime = ${parameters.statusDatetime}"></log>

				<set field="oldStatusId" from-field="workEffort.currentStatusId" />
                <set field="workEffort.currentStatusId" from-field="parameters.statusId"/>
                <set field="workEffort.lastStatusUpdate" from-field="parameters.statusDatetime" type="Timestamp"/>

                <clear-field field="checkWorkEffortStatusServiceMap"/>
                <set-service-fields service-name="checkWorkEffortStatusService" to-map="checkWorkEffortStatusServiceMap" map="parameters"/>
                <call-service service-name="checkWorkEffortStatusService" in-map-name="checkWorkEffortStatusServiceMap">
                    <results-to-map map-name="checkWorkEffortStatusServiceResult"/>
                </call-service>
                <log level="always" message="************************************** crudServiceOperation_WorkEffortStatus checkWorkEffortStatusServiceResult : ${checkWorkEffortStatusServiceResult}"></log>
                <!-- ATTENZIONE: errorMsg in realta' non e' mai valorizzato, perche' se esce con errore ha errorMessageList valorizzato -->
                <if-not-empty field="checkWorkEffortStatusServiceResult.errorMsg">
                	<string-append suffix="&lt;br&gt;" string="${checkWorkEffortStatusServiceResult.errorMsg}" field="errorMessageLista"/>
                </if-not-empty>
                <!-- in caso di warning, si ha failMessageList valorizzato, ma se il servizio e' stato richiamato anche prima il failMessageList contiene gia' i warning -->
                <if-empty field="failMessageList">
	                <if-not-empty field="checkWorkEffortStatusServiceResult.failMessageList">
	                	<string-append suffix="&lt;br&gt;" string="${checkWorkEffortStatusServiceResult.failMessageList}" field="failMessageList"/>
	                </if-not-empty>
                </if-empty>
                <check-errors/>
				
                <store-value value-field="workEffort"/>
                
                <!-- GN-2435 -->
                <set field="createWorkEffortNoteFromPeriodInMap.workEffortId" from-field="workEffort.workEffortId"/>
                <set field="createWorkEffortNoteFromPeriodInMap.workEffortParentId" from-field="workEffort.workEffortParentId"/>
                <set field="createWorkEffortNoteFromPeriodInMap.workEffortTypeId" from-field="workEffort.workEffortTypeId"/>
                <set field="createWorkEffortNoteFromPeriodInMap.estimatedStartDate" from-field="workEffort.estimatedStartDate"/>
                <set field="createWorkEffortNoteFromPeriodInMap.estimatedCompletionDate" from-field="workEffort.estimatedCompletionDate"/>
                <set field="createWorkEffortNoteFromPeriodInMap.currentStatusId" from-field="oldStatusId"/>
                <set field="createWorkEffortNoteFromPeriodInMap.statusId" from-field="parameters.statusId"/>
                <call-service service-name="createWorkEffortNoteFromPeriod" in-map-name="createWorkEffortNoteFromPeriodInMap"/>
            </if-compare>
        </if-not-empty>
        <check-errors/>
        <field-to-result field="failMessageList" result-name="failMessageList"/>
    </simple-method>
    
    <simple-method method-name="createWorkEffortNoteFromPeriod" short-description="createWorkEffortNoteFromPeriod">
    	<if-not-empty field="parameters.workEffortParentId">
    		<!-- per prima cosa verifico che lo stato di partenza e quello di arrivo abbiano percorsi appr diversi -->
    		<set field="createNote" value="N"/>
    		<entity-one value-field="statusItemTo" entity-name="StatusItem">
    		</entity-one>
    		<entity-one value-field="statusItem" entity-name="StatusItem" auto-field-map="false">
    			<field-map field-name="statusId" from-field="parameters.currentStatusId"/>
    		</entity-one>
    		<if>
    			<condition>
    				<and>
    					<not>
    						<if-empty field="statusItemTo"/>
    					</not>
    					<not>
    						<if-empty field="statusItem"/>
    					</not>
    				</and>
    			</condition>
    			<then>
    				<if-compare-field to-field="statusItem.statusTypeId" operator="not-equals" field="statusItemTo.statusTypeId">
    					<set field="createNote" value="Y"/>
    				</if-compare-field>
    			</then>
    		</if>
    	
    		<if-compare operator="equals" value="Y" field="createNote">
    			<!-- poi verifico che il passaggio di stato sia in avanti -->
    			<entity-one value-field="statusValidChange" entity-name="StatusValidChange" auto-field-map="false">
    				<field-map field-name="statusId" from-field="parameters.currentStatusId"/>
    				<field-map field-name="statusIdTo" from-field="parameters.statusId"/>
    			</entity-one>
    		
    			<if-not-empty field="statusValidChange">
        			<entity-one entity-name="WorkEffort" value-field="workEffortRoot" auto-field-map="false">
            			<field-map field-name="workEffortId" from-field="parameters.workEffortParentId"/>
        			</entity-one>
        			<if-not-empty field="workEffortRoot">
        				<set field="workEffortTypeIdRoot" from-field="workEffortRoot.workEffortTypeId"/>
        		
        				<entity-one value-field="workEffortTypeRoot" entity-name="WorkEffortType" auto-field-map="false">
        					<field-map field-name="workEffortTypeId" from-field="workEffortTypeIdRoot"/>
        				</entity-one>
        			</if-not-empty>
        	      	
        			<if-not-empty field="workEffortTypeRoot">       	
        				<!-- cerco il periodo aperto o riaperto che si sovrappone alle date del workEffort -->
        				<entity-condition list="periodList" entity-name="WorkEffortTypePeriodAndCustomTimePeriodView">
        					<condition-list>
        						<condition-expr field-name="workEffortTypeId" from-field="workEffortTypeIdRoot"/>
        						<condition-expr field-name="statusTypeId" from-field="statusItemTo.statusTypeId"/>
        						<condition-list combine="or">
        							<condition-expr field-name="statusEnumId" value="OPEN"/>
        							<condition-expr field-name="statusEnumId" value="REOPEN"/>
        						</condition-list>        						
        						<condition-expr field-name="fromDate" operator="less-equals" from-field="parameters.estimatedCompletionDate"/>
        						<condition-expr field-name="thruDate" operator="greater-equals" from-field="parameters.estimatedStartDate"/>
        					</condition-list>
        					<order-by field-name="-fromDate"/>
        					<order-by field-name="sequenceId"/>
        				</entity-condition>       		
        				<first-from-list entry="periodItem" list="periodList"/>
        		
        				<!-- se ho il periodo, lo metto come periodo rilevazione della scheda e cerco le note con isAutomatic = valore periodo -->
        				<if-not-empty field="periodItem">
        					<set field="workEffortRoot.workEffortTypePeriodId" from-field="periodItem.workEffortTypePeriodId"/>
        					<store-value value-field="workEffortRoot"/>
        				
        					<entity-condition list="noteList" entity-name="WorkEffortTypeAttrAndNoteData">
								<condition-list>
									<condition-expr field-name="workEffortTypeId" from-field="parameters.workEffortTypeId"/>
									<condition-expr field-name="isNote" value="Y"/>
									<condition-expr field-name="isAutomatic" operator="equals" from-field="periodItem.glFiscalTypeEnumId"/>
								</condition-list>
							</entity-condition>
					
							<if-not-empty field="noteList">
								<if-compare operator="equals" field="periodItem.glFiscalTypeEnumId" value="GLFISCTYPE_TARGET">
									<set field="noteDateTime" from-field="periodItem.fromDate" type="Timestamp"/>
									<else>
										<set field="noteDateTime" from-field="periodItem.thruDate" type="Timestamp"/>
									</else>
								</if-compare>
															
								<iterate entry="noteItem" list="noteList">
									<!-- Prima di inserire la nota controllo che essa non è già inserita -->
									<entity-and list="workEffortNoteList" entity-name="WorkEffortNoteAndData">
										<field-map field-name="noteName" from-field="noteItem.noteName"/>
										<field-map field-name="noteDateTime" from-field="noteDateTime"/>
										<field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
									</entity-and>
							
									<if-empty field="workEffortNoteList">
										<clear-field field="mapNoteDataWorkEffort"/>
										<set field="mapNoteDataWorkEffort.operation" value="CREATE"/>
										<set field="mapNoteDataWorkEffort.entityName" value="WorkEffortNoteAndData"/>
										<set field="mapNoteDataWorkEffort.parameters._AUTOMATIC_PK_" value="Y"/>

										<set field="mapNoteDataWorkEffort.parameters.noteName" from-field="noteItem.noteName"/>
										<set field="mapNoteDataWorkEffort.parameters.noteInfo" from-field="noteItem.noteInfo"/>
										<set field="mapNoteDataWorkEffort.parameters.workEffortId" from-field="parameters.workEffortId"/>
										<set field="mapNoteDataWorkEffort.parameters.sequenceId" from-field="noteItem.sequenceId"/>
										<set field="mapNoteDataWorkEffort.parameters.internalNote" from-field="noteItem.internalNote"/>
										<set field="mapNoteDataWorkEffort.parameters.isMain" from-field="noteItem.isMain"/>
										<set field="mapNoteDataWorkEffort.parameters.isHtml" from-field="noteItem.isHtml"/>
										<set field="mapNoteDataWorkEffort.parameters.noteDateTime" from-field="noteDateTime" type="Timestamp"/>

										<set-service-fields service-name="crudServiceDefaultOrchestration_WorkEffortNoteAndData" to-map="crudServiceOperationMap" map="mapNoteDataWorkEffort"/>
										<call-service service-name="crudServiceDefaultOrchestration_WorkEffortNoteAndData" in-map-name="crudServiceOperationMap"/>
									</if-empty>						
								</iterate>
							</if-not-empty>
        				</if-not-empty>      	
        			</if-not-empty>
        		</if-not-empty>
        	</if-compare>
        </if-not-empty>   
    </simple-method>

    <!-- ************************************************************** -->
    <!-- WorkEffortAttribute -->
    <!-- ************************************************************** -->

    <simple-method method-name="crudServiceValueValidation_WorkEffortAttribute" short-description="crudServiceValueValidation_WorkEffortAttribute">
        <log level="verbose" message="**** parameters=${parameters}"/>
        <set field="parametersCrud" from-field="parameters"/>
        <set field="parameters" from-field="parameters.parameters"/>

        <!-- Carica il WorkEffortView -->
        <entity-one entity-name="WorkEffortView" value-field="workEffortView" auto-field-map="false" use-cache="false">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-one>

        <if>
            <condition>
                <or>
                    <if-compare field="parametersCrud.operation" operator="equals" value="UPDATE"/>
                    <if-compare field="parametersCrud.operation" operator="equals" value="DELETE"/>
                </or>
            </condition>
            <then>
                <entity-one value-field="workEffortAttribute" entity-name="WorkEffortAttribute" use-cache="false">
                    <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
                    <field-map field-name="attrName" from-field="parameters.attrName"/>
                </entity-one>
                <if-not-empty field="workEffortAttribute">
                    <!-- ToDo 3820 -->
                    <if-compare operator="not-equals" field="parameters.isObiettivo" value="Y">
                        <clear-field field="serviceMap"/>
                        <set field="serviceMap.isPosted" from-field="workEffortAttribute.isPosted"/>
                        <call-service service-name="checkUpdateDeleteByIsPosted" in-map-name="serviceMap"/>
                    </if-compare>
                </if-not-empty>
            </then>

            <else-if>
                <condition>
                    <or>
                        <if-compare field="parametersCrud.operation" operator="equals" value="UPDATE"/>
                        <if-compare field="parametersCrud.operation" operator="equals" value="CREATE"/>
                    </or>
                </condition>
                <then>
                    <if-not-empty field="workEffortView">
                        <!-- Verifica che l'attributo esista per il tipo di relazione -->
                        <entity-one entity-name="WorkEffortTypeAttr" value-field="workEffortTypeAttr" auto-field-map="false" use-cache="true">
                            <field-map field-name="workEffortTypeId" from-field="workEffortView.workEffortTypeId"/>
                            <field-map field-name="attrName" from-field="parameters.attrName"/>
                        </entity-one>
                        <if-empty field="workEffortTypeAttr">
                            <add-error>
                                <fail-property resource="BaseErrorLabels" property="AddedDataNotAllowed"/>
                            </add-error>
                            <check-errors/>
                        </if-empty>
                    </if-not-empty>
                </then>
            </else-if>
        </if>

        <check-errors/>
    </simple-method>

    <!-- ************************************************************** -->
    <!-- WorkEffortNoteAndData -->
    <!-- ************************************************************** -->

    <simple-method method-name="crudServiceValueValidation_WorkEffortNoteAndData" short-description="crudServiceValueValidation_WorkEffortNoteAndData">
        <log level="verbose" message="**** parameters=${parameters}"/>
        <set field="parametersCrud" from-field="parameters"/>
        <set field="parameters" from-field="parameters.parameters"/>

        <if>
            <condition>
                <or>
                    <if-compare field="parametersCrud.operation" operator="equals" value="UPDATE"/>
                    <if-compare field="parametersCrud.operation" operator="equals" value="DELETE"/>
                </or>
            </condition>
            <then>

                <entity-one value-field="workEffortNoteAndData" entity-name="WorkEffortNoteAndData">
                    <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
                    <field-map field-name="noteId" from-field="parameters.noteId"/>
                </entity-one>

                <if-not-empty field="workEffortNoteAndData">
                    <if-compare operator="not-equals" field="parameters.isObiettivo" value="Y">
                        <clear-field field="serviceMap"/>
                        <set field="serviceMap.isPosted" from-field="workEffortNoteAndData.isPosted"/>
                        <call-service service-name="checkUpdateDeleteByIsPosted" in-map-name="serviceMap"/>
                    </if-compare>
                </if-not-empty>
            </then>
        </if>

        <check-errors/>
    </simple-method>

    <simple-method method-name="crudServiceOperation_WorkEffortNoteAndData" short-description="crudServiceOperation_WorkEffortNoteAndData">
        <log level="verbose" message="**** parameters=${parameters}"/>
        <set field="parametersCrud" from-field="parameters"/>
        <set field="parameters" from-field="parameters.parameters"/>


        <if-compare field="parametersCrud.operation" operator="equals" value="DELETE">
            <set-service-fields service-name="crudServiceDefaultOrchestration" to-map="crudServiceDefaultOrchestrationParameters" map="parametersCrud"/>
            <set field="crudServiceDefaultOrchestrationParameters.entityName" value="WorkEffortNote"/>
            <call-service service-name="crudServiceDefaultOrchestration" in-map-name="crudServiceDefaultOrchestrationParameters"/>
            <check-errors/>
        </if-compare>
        
        <!-- GN-4399 -->
        <if-compare field="parametersCrud.operation" operator="not-equals" value="DELETE">
            <entity-one value-field="workEffort" entity-name="WorkEffort" auto-field-map="false">
                <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
            </entity-one>
            <if-not-empty field="workEffort">
                <set field="workEffortTypeId" from-field="workEffort.workEffortTypeId"/>
            </if-not-empty>
            <if-not-empty field="parameters.noteName">
                <entity-one value-field="workEffortTypeAttr" entity-name="WorkEffortTypeAttr" auto-field-map="false">
                    <field-map field-name="workEffortTypeId" from-field="workEffortTypeId"/>  
                    <field-map field-name="attrName" from-field="parameters.noteName"/>  
                </entity-one>
            <else>
                <entity-and list="workEffortTypeAttrList" entity-name="WorkEffortTypeAttr">
                    <field-map field-name="workEffortTypeId" from-field="workEffortTypeId"/>
                    <field-map field-name="attrNameLang" from-field="parameters.noteNameLang"/>
                </entity-and>
                <first-from-list entry="workEffortTypeAttr" list="workEffortTypeAttrList"/>
            </else>
            </if-not-empty>
            <if-not-empty field="workEffortTypeAttr">
                <set field="maxLength" from-field="workEffortTypeAttr.maxLength" type="Double"/>
                <if-not-empty field="maxLength">
                    <if-compare operator="greater" value="0" field="maxLength" type="Double">
                        <call-bsh>
                            <![CDATA[
                                noteInfoLength = 0;
                                noteInfoLangLength = 0;
	   									
								result = new java.util.HashMap();
								
						    	if (org.ofbiz.base.util.UtilValidate.isNotEmpty(parameters.get("noteInfo"))) {
						        	noteInfoLength = parameters.get("noteInfo").length();
						    	}
						        if (org.ofbiz.base.util.UtilValidate.isNotEmpty(parameters.get("noteInfoLang"))) {
						        	noteInfoLangLength = parameters.get("noteInfoLang").length();
						    	}								
						    	result.put("noteInfoLength", noteInfoLength);
						        result.put("noteInfoLangLength", noteInfoLangLength); 
						    	return result;
							]]>
						</call-bsh>
						<if>
						    <condition>
						        <or>
						            <if-compare-field operator="greater" field="noteInfoLength" to-field="maxLength" type="Double"/>
						            <if-compare-field operator="greater" field="noteInfoLangLength" to-field="maxLength" type="Double"/>
						        </or>
						    </condition>
						    <then>
						        <if-not-empty field="parameters.noteNameLang">
						            <set field="noteName" from-field="parameters.noteNameLang"/>
						        <else>
						            <set field="noteName" from-field="parameters.noteName"/>
						        </else>
						        </if-not-empty>
						        <if-compare-field operator="greater" field="noteInfoLength" to-field="maxLength" type="Double">
						            <set field="noteLength" from-field="noteInfoLength" type="Double"/>
						        </if-compare-field>
						        <if-compare-field operator="greater" field="noteInfoLangLength" to-field="maxLength" type="Double">
						            <set field="noteLength" from-field="noteInfoLangLength" type="Double"/>
						        </if-compare-field>						        
						    	<add-error>
            						<fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortNoteLengthError"/>
            					</add-error>
            					<check-errors/>
						    </then>
						</if>
                    </if-compare>
                </if-not-empty>
            </if-not-empty>
        </if-compare>
        <!-- GN-4399 end -->

        <set-service-fields service-name="crudServiceDefaultOrchestration" to-map="crudServiceDefaultOrchestrationParameters" map="parametersCrud"/>
        <set field="crudServiceDefaultOrchestrationParameters.entityName" value="NoteData"/>
        <if-empty field="crudServiceDefaultOrchestrationParameters.parameters.noteId">
            <make-value value-field="noteData" entity-name="NoteData"/>
            <sequenced-id sequence-name="NoteData" field="noteData.noteId"/>
            <set field="crudServiceDefaultOrchestrationParameters.parameters.noteId" from-field="noteData.noteId"/>
            <set field="id.noteId" from-field="crudServiceDefaultOrchestrationParameters.parameters.noteId"/>
        </if-empty>

        <call-service service-name="crudServiceDefaultOrchestration" in-map-name="crudServiceDefaultOrchestrationParameters"/>
        <check-errors/>

        <if-compare field="parametersCrud.operation" operator="not-equals" value="DELETE">
            <set-service-fields service-name="crudServiceDefaultOrchestration" to-map="crudServiceDefaultOrchestrationParameters" map="parametersCrud"/>
            <set field="crudServiceDefaultOrchestrationParameters.entityName" value="WorkEffortNote"/>
            <call-service service-name="crudServiceDefaultOrchestration" in-map-name="crudServiceDefaultOrchestrationParameters"/>
            <check-errors/>

            <if>
                <condition>
                    <and>
                        <not>
                            <if-empty field="id"/>
                        </not>
                        <if-compare field="parametersCrud.operation" operator="equals" value="CREATE"/>
                    </and>
                </condition>
                <then>
                    <set field="id.workEffortId" from-field="parameters.workEffortId"/>
                    <field-to-result field="id"/>
                </then>
            </if>
        </if-compare>
    </simple-method>
    
    
    <!-- ************************************************************** -->
    <!-- WorkEffortType -->
    <!-- ************************************************************** -->    
    
    <simple-method method-name="crudServiceOperation_WorkEffortType" short-description="crudServiceOperation_WorkEffortType">
        <log level="verbose" message="**** parameters=${parameters}"/>
        <set field="parametersCrud" from-field="parameters"/>
        <set field="parameters" from-field="parameters.parameters"/>
     
        <if>
            <condition>
                <or>
                    <if-compare field="parametersCrud.operation" operator="equals" value="CREATE"/>
                    <if-compare field="parametersCrud.operation" operator="equals" value="UPDATE"/>
                </or>
            </condition>
            <then>          
            	<if-compare field="parameters.isRoleTypeIdAuto" operator="equals" value="Y">
            		<if-empty field="parameters.roleTypeIdAuto">
             			<add-error>
            				<fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortTypeRoleTypeAutoError"/>
            			</add-error>
            			<check-errors/>           		
            		</if-empty>
            	<else>
            		<if>
            			<condition>
            				<or>
            					<not>
            						<if-empty field="parameters.roleTypeIdAuto"/>
            					</not>
            					<not>
            						<if-empty field="parameters.partyRelTypeIdAuto"/>
            					</not>
            				</or>
            			</condition>
            			<then>
            				<add-error>
            					<fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortTypeNotRoleTypeAutoError"/>
            				</add-error>
            				<check-errors/>
            			</then>
            		</if>            	
            	</else>
            	</if-compare>
            	
            	<!-- GN-1674 controllo formato codice/etichetta -->
            	<if>
            		<condition>
            			<and>
            				<if-compare field="parameters.frameEnumId" operator="equals" value="PFAAUOET"/>
            				<if-compare field="parameters.seqOnlyId" operator="equals" value="Y"/>
            			</and>            				
            		</condition>
            		<then>
            			<entity-one value-field="frameEnum" entity-name="Enumeration" auto-field-map="false">
            				<field-map field-name="enumId" from-field="parameters.frameEnumId"/>
            			</entity-one>
            			<if-not-empty field="frameEnum">
            				<set field="frameEnumDesc" from-field="frameEnum.description"/>
            			</if-not-empty>
            			<add-error>
            				<fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortTypeFrameEtchError"/>
            			</add-error>
            			<check-errors/>
            		</then>
            	</if>
            </then>
        </if>
        
        <!-- gn-2484 gestione campo isRootActive -->
        <if-compare operator="equals" value="CREATE" field="parametersCrud.operation">
        	<set field="parameters.isRootActive" value="Y"/>
        </if-compare>
        
        <set-service-fields service-name="crudServiceOperation" to-map="crudServiceOperationMap" map="parametersCrud"/>
        <call-service service-name="crudServiceOperation" in-map-name="crudServiceOperationMap">
            <result-to-field result-name="id"/>
        </call-service>  
        
        <!-- GN-1930 relazione padre -->
        <clear-field field="setWorkEffortTypeAssocParentRelServiceMap"/>
            				
        <set field="setWorkEffortTypeAssocParentRelServiceMap.workEffortTypeId" from-field="parameters.workEffortTypeId"/>
        <set field="setWorkEffortTypeAssocParentRelServiceMap.workEffortAssocTypeId" from-field="parameters.parentRelAssocTypeId"/>
        <set field="setWorkEffortTypeAssocParentRelServiceMap.workEffortTypeIdRef" from-field="parameters.parentRelTypeIdRef"/>
            				
        <call-service service-name="setWorkEffortTypeAssocParentRel" in-map-name="setWorkEffortTypeAssocParentRelServiceMap"/>               
    </simple-method> 
    
    
    <simple-method method-name="setWorkEffortTypeAssocParentRel" short-description="setWorkEffortTypeAssocParentRel">
    	<!-- estrazione delle raleazioni del workEffortTypeId e pulizia del campo isParentRel -->
    	<clear-field field="workEffortTypeAssocList"/>
    	<entity-condition list="workEffortTypeAssocList" entity-name="WorkEffortTypeAssoc">   		
    		<condition-list combine="and">
    			<condition-expr field-name="workEffortTypeId" operator="equals" from-field="parameters.workEffortTypeId"/>
    			<condition-expr field-name="isParentRel" operator="equals" value="Y"/>
    		</condition-list>
    	</entity-condition>
    	
    	<if-not-empty field="workEffortTypeAssocList">
    		<iterate list="workEffortTypeAssocList" entry="workEffortTypeAssocItem"> 
    			<clear-field field="workEffortTypeAssocItem.isParentRel"/>
    			<store-value value-field="workEffortTypeAssocItem"/>
    		</iterate>
    	</if-not-empty>
    	
    	<!-- valorizzazione campo isParentRel=Y per la relazione padre se presente -->
    	<if>
    		<condition>
    			<and>
    				<not>
    					<if-empty field="parameters.workEffortAssocTypeId"/>
    				</not>
    				<not>
    					<if-empty field="parameters.workEffortTypeIdRef"/>
    				</not>    				
    			</and>
    		</condition>
    		<then>
    			<clear-field field="workEffortTypeAssoc"/>
    			<entity-one value-field="workEffortTypeAssoc" entity-name="WorkEffortTypeAssoc" auto-field-map="false">
    				<field-map field-name="workEffortTypeId" from-field="parameters.workEffortTypeId"/>
    				<field-map field-name="workEffortAssocTypeId" from-field="parameters.workEffortAssocTypeId"/>
    				<field-map field-name="wefromWetoEnumId" value="WETATO"/>
    				<field-map field-name="workEffortTypeIdRef" from-field="parameters.workEffortTypeIdRef"/>
    			</entity-one>
    	
    			<if-not-empty field="workEffortTypeAssoc">
    				<set field="workEffortTypeAssoc.isParentRel" value="Y"/>
    				<store-value value-field="workEffortTypeAssoc"/>
    			</if-not-empty>    		
    		</then>
    	</if>
    </simple-method>   
    
    
    <!-- ************************************************************** -->
    <!-- WorkEffortPartyAssignment -->
    <!-- ************************************************************** -->

    <simple-method method-name="crudServiceValueValidation_WorkEffortPartyAssignment" short-description="crudServiceValueValidation_WorkEffortPartyAssignment">
        <log level="verbose" message="**** parameters=${parameters}"/>
        <set field="parameters" from-field="parameters.parameters"/>

        <if>
            <condition>
                <or>
                    <if-compare field="parameters.operation" operator="equals" value="UPDATE"/>
                    <if-compare field="parameters.operation" operator="equals" value="DELETE"/>
                </or>
            </condition>
            <then>

                <entity-one value-field="workEffortPartyAssignment" entity-name="WorkEffortPartyAssignment">
                    <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
                    <field-map field-name="partyId" from-field="parameters.partyId"/>
                    <field-map field-name="roleTypeId" from-field="parameters.roleTypeId"/>
                    <field-map field-name="fromDate" from-field="parameters.fromDate"/>
                </entity-one>

                <if-not-empty field="workEffortPartyAssignment">
                    <if-compare operator="not-equals" field="parameters.isObiettivo" value="Y">
                        <clear-field field="serviceMap"/>
                        <set field="serviceMap.isPosted" from-field="workEffortPartyAssignment.isPosted"/>
                        <call-service service-name="checkUpdateDeleteByIsPosted" in-map-name="serviceMap"/>
                    </if-compare>
                </if-not-empty>

            </then>
        </if>

        <if-not-empty field="parameters.fromDateOld">
            <set field="parameters.fromDateOld" from-field="parameters.fromDateOld" type="Timestamp"/>
        </if-not-empty>

        <check-errors/>
    </simple-method>

	<simple-method method-name="crudServiceFkValidation_WorkEffortPartyAssignment" short-description="Manage FK for WEPA_FR">
        <if>
        	<condition>
        		<or>
        			<not>
        				<if-empty field="parameters.parameters.wepaWorkEffortIdFrom"></if-empty>
        			</not>
        			<not>
        				<if-empty field="parameters.parameters.wepaFromDateFrom"></if-empty>
        			</not>
        		</or>
        	</condition>
        	<then>
        		<set field="parameters.parameters.workEffortIdFrom" from-field="parameters.parameters.wepaWorkEffortIdFrom"/>
       			<set field="parameters.parameters.fromDateFrom" from-field="parameters.parameters.wepaFromDateFrom" type="Timestamp"/>
        		<set field="parameters.parameters.partyIdFrom" from-field="parameters.parameters.partyId"/>
       			<set field="parameters.parameters.roleTypeIdFrom" from-field="parameters.parameters.wepaRoleTypeIdFrom"/>
        	</then>
        </if>
        
        <set-service-fields service-name="crudServiceFkValidation" to-map="crudServiceFkValidationParams" map="parameters"/>
        <call-service service-name="crudServiceFkValidation" in-map-name="crudServiceFkValidationParams"/>
        <check-errors/>
    </simple-method>
    
    <simple-method method-name="crudServiceOperation_WorkEffortPartyAssignment" short-description="crudServiceValueValidation_WorkEffortPartyAssignment">
        <log level="verbose" message="**** parameters=${parameters}"/>
        
        <if-empty field="parameters.parameters.sequenceNum">
            <set field="parameters.parameters.sequenceNum" value="1" type="Long"/>
        </if-empty>

        <if-empty field="parameters.parameters.workEffortId">
            <if-empty field="parameters.parameters.fromDate">
                <set field="parameters.parameters.fromDate" from-field="parameters.parameters.estimatedStartDate"/>
            </if-empty>

            <set-service-fields service-name="crudServiceDefaultOrchestration" to-map="crudServiceDefaultOrchestrationParams" map="parameters"/>
            <set field="crudServiceDefaultOrchestrationParams.operation" value="CREATE"/>
            <make-value value-field="crudServiceDefaultOrchestrationParams.parameters" entity-name="WorkEffort"/>
            <set-pk-fields value-field="crudServiceDefaultOrchestrationParams.parameters" map="parameters.parameters"/>
            <set-nonpk-fields value-field="crudServiceDefaultOrchestrationParams.parameters" map="parameters.parameters"/>
            <set field="crudServiceDefaultOrchestrationParams.entityName" value="WorkEffort"/>
            <call-object-method method-name="getAllFields" obj-field="crudServiceDefaultOrchestrationParams.parameters" ret-field="crudServiceDefaultOrchestrationParams.parameters"/>
            <set field="crudServiceDefaultOrchestrationParams.parameters._AUTOMATIC_PK_" value="Y"/>
            <call-service service-name="crudServiceDefaultOrchestration" in-map-name="crudServiceDefaultOrchestrationParams">
                <result-to-field result-name="id"/>
            </call-service>
            <set field="parameters.parameters.workEffortId" from-field="id.workEffortId"/>
            <check-errors/>

            <!-- Se presente un workEffortFromId creo l'associazione -->
            <if-not-empty field="parameters.parameters.workEffortIdFrom">
                <set-service-fields service-name="crudServiceDefaultOrchestration" to-map="crudServiceDefaultOrchestrationParams" map="parameters"/>
                <set field="crudServiceDefaultOrchestrationParams.entityName" value="WorkEffortAssoc"/>
                <set field="crudServiceDefaultOrchestrationParams.operation" value="CREATE"/>
                <make-value value-field="crudServiceDefaultOrchestrationParams.parameters" entity-name="WorkEffortAssoc"/>
                <set-pk-fields value-field="crudServiceDefaultOrchestrationParams.parameters" map="parameters.parameters"/>
                <set-nonpk-fields value-field="crudServiceDefaultOrchestrationParams.parameters" map="parameters.parameters"/>
                <set field="crudServiceDefaultOrchestrationParams.parameters.workEffortIdTo" from-field="parameters.parameters.workEffortId"/>

                <log level="verbose" message="**** Creazione assoc: crudServiceDefaultOrchestrationParams=${crudServiceDefaultOrchestrationParams}"/>

                <call-service service-name="crudServiceDefaultOrchestration" in-map-name="crudServiceDefaultOrchestrationParams"/>
                <check-errors/>
            </if-not-empty>
        </if-empty>
        
        <!-- GN-2740 verifica data inizio non maggiore di data fine -->
        <if>
        	<condition>
        		<or>
        			<if-compare field="parameters.operation" operator="equals" value="CREATE"/>
        			<if-compare field="parameters.operation" operator="equals" value="UPDATE"/>
        		</or>
        	</condition>
        	<then> 
        	    <!-- se ho usePeriod leggo le date inizio e fine dai periodi -->
        		<if-not-empty field="parameters.parameters.usePeriod">
        			<entity-one value-field="customTimePeriodFrom" entity-name="CustomTimePeriod" auto-field-map="false">
        				<field-map field-name="customTimePeriodId" from-field="parameters.parameters.periodFromDate"/>
        			</entity-one>
        			<if-not-empty field="customTimePeriodFrom">
        				<set field="parameters.parameters.fromDate" from-field="customTimePeriodFrom.fromDate"/>
        			</if-not-empty>
        					
        			<entity-one value-field="customTimePeriodThru" entity-name="CustomTimePeriod" auto-field-map="false">
        				<field-map field-name="customTimePeriodId" from-field="parameters.parameters.periodThruDate"/>
        			</entity-one>
        			<if-not-empty field="customTimePeriodThru">
        				<set field="parameters.parameters.thruDate" from-field="customTimePeriodThru.thruDate"/>
        			</if-not-empty>        					
        		</if-not-empty>        	
        	     		
        		<!-- GN-3000 -->
        		<if-compare-field operator="greater" field="parameters.parameters.fromDate" to-field="parameters.parameters.thruDate" type="Timestamp">
        			<add-error>
                		<fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortPartyAssignDatesError"/>
            		</add-error>
            		<check-errors/>        
        		</if-compare-field>
        		
        		<!-- se utente admin non applico nessun filtro -->
        		<!-- prendo il contesto -->
        		<if-not-empty field="parameters.parameters.workEffortId">
        			<entity-one value-field="workEffort" entity-name="WorkEffort" auto-field-map="false">
        				<field-map field-name="workEffortId" from-field="parameters.parameters.workEffortId"/>
        			</entity-one>
        			<if-not-empty field="workEffort">
        				<entity-one value-field="workEffortType" entity-name="WorkEffortType" auto-field-map="false">
        					<field-map field-name="workEffortTypeId" from-field="workEffort.workEffortTypeId"/>
        				</entity-one>
        				
        				<if-not-empty field="workEffortType">     				
        					<create-object class-name="com.mapsengineering.base.util.ContextPermission" field="contextPermission"/>
   							<call-object-method method-name="getPermission" obj-field="contextPermission" ret-field="permission" >
   								<string value="${workEffortType.parentTypeId}"/>
   							</call-object-method>
   							<if-has-permission permission="${permission}" action="_ADMIN">
   							<else>
   								<if-compare operator="equals" field="parameters.parameters.startDate" value="OPEN">
   								    <!-- controllo data inizio solo se e stata modificata, lo stesso per data fine -->
   									<set field="checkFromDate" value="Y"/>
   									<set field="checkThruDate" value="Y"/>
   									
   									<if-compare operator="equals" value="UPDATE" field="parameters.operation">
   									    <entity-one value-field="workEffortPartyAssignmentCurrent" entity-name="WorkEffortPartyAssignment" auto-field-map="false">
                                            <field-map field-name="workEffortId" from-field="parameters.parameters.workEffortId"/>
                                            <field-map field-name="partyId" from-field="parameters.parameters.partyId"/>
                                            <field-map field-name="roleTypeId" from-field="parameters.parameters.roleTypeId"/>
                                            <field-map field-name="fromDate" from-field="parameters.parameters.fromDateOld"/>
                                        </entity-one>
                                        <if-not-empty field="workEffortPartyAssignmentCurrent">
                                        	<if-compare-field operator="equals" field="workEffortPartyAssignmentCurrent.fromDate" to-field="parameters.parameters.fromDate" type="Timestamp">
                                        		<set field="checkFromDate" value="N"/>
                                        	</if-compare-field>
                                        	<if-compare-field operator="equals" field="workEffortPartyAssignmentCurrent.thruDate" to-field="parameters.parameters.thruDate" type="Timestamp">
                                        		<set field="checkThruDate" value="N"/>
                                        	</if-compare-field>                                        	
                                        </if-not-empty>                                       									
   									</if-compare>
   									
   									<if-compare operator="equals" value="Y" field="checkFromDate">					
   										<if-compare-field operator="less" field="parameters.parameters.fromDate" to-field="workEffort.estimatedStartDate" type="Timestamp">
        									<add-error>
                								<fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortPartyAssignStartDateError"/>
            								</add-error>
            								<check-errors/>     									
   										</if-compare-field>
   									</if-compare>
   									
   									<if-compare operator="equals" value="Y" field="checkThruDate">
   										<if-compare-field operator="greater" field="parameters.parameters.thruDate" to-field="workEffort.estimatedCompletionDate" type="Timestamp">
        									<add-error>
                								<fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortPartyAssignEndDateError"/>
            								</add-error>
            								<check-errors/>          		
        								</if-compare-field>
        							</if-compare>
									
   									<entity-one value-field="workEffortTypePeriod" entity-name="WorkEffortAndTypePeriodAndThruDate" auto-field-map="false">
        								<field-map field-name="workEffortId" from-field="parameters.parameters.workEffortIdRoot"/>
        							</entity-one>
        							<if-not-empty field="workEffortTypePeriod">
        								<!-- GN-3011 -->
        							    <if-compare operator="equals" value="UPDATE" field="parameters.operation">
        							    	<if-not-empty field="workEffortPartyAssignmentCurrent">
        							    		<if-compare-field operator="less" field="workEffortPartyAssignmentCurrent.fromDate" to-field="workEffortTypePeriod.fromDate" type="Timestamp">
        							    			<if>
        							    				<condition>
        							    					<or>
        							    						<if-compare-field operator="not-equals" field="workEffortPartyAssignmentCurrent.fromDate" to-field="parameters.parameters.fromDate" type="Timestamp"/>
        							    						<if-compare-field operator="not-equals" field="workEffortPartyAssignmentCurrent.roleTypeWeight" to-field="parameters.parameters.roleTypeWeight" type="Double"/>
        							    					</or>
        							    				</condition>
        							    				<then>
        													<add-error>
                												<fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortPartyAssignStartAndRoleTypeWeightNotModifyError"/>
            												</add-error>
            												<check-errors/>        							    				
        							    				</then>
        							    			</if>
        							    		</if-compare-field>
        							    	</if-not-empty>
        							    </if-compare>
       							
        							    <!-- GN-3000 errore se fromDate minore period.fromDate o thruDate minore period.fromDate-1  -->
        								<set field="diff" value="-1" type="Double"/>
        								<call-class-method method-name="addDaysToTimestamp" class-name="org.ofbiz.base.util.UtilDateTime" ret-field="perThruDate">
        									<field field="workEffortTypePeriod.fromDate" type="Timestamp"/>
        									<field field="diff" type="Double"/>
        								</call-class-method>
        								
        								<set field="perFromDate" from-field="workEffortTypePeriod.fromDate" type="Timestamp"/>
        								
        								<if-compare operator="equals" value="Y" field="checkFromDate">
        									<if-compare-field operator="less" field="parameters.parameters.fromDate" to-field="perFromDate" type="Timestamp">
        										<add-error>
                									<fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortPartyAssignStartDatePeriodError"/>
            									</add-error>
            									<check-errors/>         								
        									</if-compare-field>
        								</if-compare>
        								<if-compare operator="equals" value="Y" field="checkThruDate">
        									<if-compare-field operator="less" field="parameters.parameters.thruDate" to-field="perThruDate" type="Timestamp">
        										<add-error>
                									<fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortPartyAssignEndDatePeriodError"/>
            									</add-error>
            									<check-errors/>         								
        									</if-compare-field> 
        								</if-compare>       								
        							</if-not-empty>
   								</if-compare>
   							</else>
   							</if-has-permission>						
        				</if-not-empty>
        			</if-not-empty>        		
        		</if-not-empty>
        		
        		<!-- GN-4929 begin -->
        		<if-not-empty field="parameters.parameters.weTypeSubId">      		          		
        		    <if-not-empty field="parameters.parameters.endDate">    		    
        		        <if-not-empty field="workEffortPartyAssignmentCurrent">
        		        	<if-not-empty field="parameters.parameters.fromDate">
        		            	<set field="minEndDate" from-field="parameters.parameters.fromDate" type="Timestamp"/>
        		        	<else>
        		            	<set field="minEndDate" from-field="workEffortPartyAssignmentCurrent.fromDate" type="Timestamp"/>
        		        	</else> 
        		        	</if-not-empty>       		        
        		        	<if-not-empty field="parameters.parameters.thruDate">
        		            	<set field="thruDate" from-field="parameters.parameters.thruDate" type="Timestamp"/>
        		        	<else>
        		            	<set field="thruDate" from-field="workEffortPartyAssignmentCurrent.thruDate" type="Timestamp"/>
        		        	</else>
        		        	</if-not-empty> 
        		    	<else>
        		        	<set field="thruDate" from-field="parameters.parameters.thruDate" type="Timestamp"/>
        		        	<set field="minEndDate" from-field="parameters.parameters.fromDate" type="Timestamp"/>
        		    	</else>
        		    	</if-not-empty>
        		    	<if>
        		    	    <condition>
        		    	        <and>
        		    	            <not>
        		    	                <if-empty field="minEndDate"/>       		    	                
        		    	            </not>
        		    	            <not>
        		    	                <if-empty field="thruDate"/>
        		    	            </not>
        		    	        </and>
        		    	    </condition>
        		    	    <then>
        		        		<call-bsh>
        		        	    	<![CDATA[
        		        	        	import org.ofbiz.base.util.UtilDateTime;
        		        	        	import java.sql.Timestamp;
        		        	        
        		        	        	Timestamp maxEndDate = UtilDateTime.getDayStart(UtilDateTime.getYearEnd(UtilDateTime.addYearsToTimestamp(thruDate, 2)));
        		        	        	result = new java.util.HashMap();
                  						result.put("maxEndDate", maxEndDate);
                  						return result;
        		        	    	]]>
        		        		</call-bsh>
        		        		<if>
        		        		    <condition>
        		        		        <or>
        		        		            <if-compare-field operator="greater" field="parameters.parameters.endDate" to-field="maxEndDate" type="Timestamp"/>
        		        		            <if-compare-field operator="less" field="parameters.parameters.endDate" to-field="minEndDate" type="Timestamp"/>   
        		        		        </or>
        		        		    </condition>
        		        		    <then>
        		        				<call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="toTimeZone" ret-field="currentTimeZone">
											<string value=""/>
										</call-class-method>    		        	
        		        				<call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getDateFormat" ret-field="format">
											<field field="locale" type="java.util.Locale"/>
										</call-class-method>
										<set field="maxEndDateStr" from-field="maxEndDate" type="PlainString"/>
										<call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getFormattedDate" ret-field="maxEndDateFormatted">
											<field field="maxEndDateStr" type="java.lang.String"/>
											<field field="format" type="java.lang.String"/>
											<field field="currentTimeZone" type="java.util.TimeZone"/>
											<field field="locale" type="java.util.Locale"/>
										</call-class-method> 
										<set field="minEndDateStr" from-field="minEndDate" type="PlainString"/>
										<call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getFormattedDate" ret-field="minEndDateFormatted">
											<field field="minEndDateStr" type="java.lang.String"/>
											<field field="format" type="java.lang.String"/>
											<field field="currentTimeZone" type="java.util.TimeZone"/>
											<field field="locale" type="java.util.Locale"/>
										</call-class-method> 
        		                		<add-error>
                				    		<fail-property resource="WorkeffortExtErrorLabels" property="WeAssAssEndDateError"/>
            							</add-error>
            							<check-errors/> 										 										        		        		    
        		        		    </then>
        		        		</if>      		    	    
        		    	    </then>
        		    	</if>
        		    	       		    		    
        		        <if>
        		            <condition>
        		                <or>
        		                    <if-empty field="parameters.parameters.endCauseEnumId"/>
        		                    <if-empty field="parameters.parameters.endReplacementEnumId"/>
        		                </or>
        		            </condition>
        		            <then>
        		                <add-error>
                				    <fail-property resource="WorkeffortExtErrorLabels" property="WeAssAssEndCauseReplacementError"/>
            					</add-error>
            					<check-errors/> 
        		            </then>
        		        </if>
        		    </if-not-empty>
        		    <if-compare operator="equals" value="END_SOST_NAGR" field="parameters.parameters.endReplacementEnumId">
        		        <if-empty field="parameters.parameters.endWorkEffortId">
         		            <add-error>
                				<fail-property resource="WorkeffortExtErrorLabels" property="WeAssAssRoleGroupError"/>
            			    </add-error>
            				<check-errors/>        		        
        		        </if-empty>
        		    </if-compare>
        		    <if>
        		        <condition>
        		            <and>
        		                <if-compare operator="not-equals" value="END_SOST_NN" field="parameters.parameters.endReplacementEnumId"/>
        		                <if-compare operator="not-equals" value="END_SOST_NAGR" field="parameters.parameters.endReplacementEnumId"/>
        		            </and>
        		        </condition>
        		        <then>
        		            <clear-field field="parameters.parameters.comments"/>
        		            <clear-field field="parameters.parameters.commentsLang"/>
        		        </then>
        		    </if>
        		</if-not-empty>
        		<!-- GN-4929 end -->
        	</then>
        </if>
        
        <!-- GN-3011 -->
        <if-compare field="parameters.operation" operator="equals" value="DELETE">
        	<if-not-empty field="parameters.parameters.workEffortId">
        		<entity-one value-field="workEffort" entity-name="WorkEffort" auto-field-map="false">
        			<field-map field-name="workEffortId" from-field="parameters.parameters.workEffortId"/>
        		</entity-one>
        		<if-not-empty field="workEffort">
        			<entity-one value-field="workEffortType" entity-name="WorkEffortType" auto-field-map="false">
        				<field-map field-name="workEffortTypeId" from-field="workEffort.workEffortTypeId"/>
        			</entity-one>
        				
        			<if-not-empty field="workEffortType">     				
        				<create-object class-name="com.mapsengineering.base.util.ContextPermission" field="contextPermission"/>
   						<call-object-method method-name="getPermission" obj-field="contextPermission" ret-field="permission" >
   							<string value="${workEffortType.parentTypeId}"/>
   						</call-object-method>
   						<if-has-permission permission="${permission}" action="_ADMIN">
   						<else>
   							<if-compare operator="equals" field="parameters.parameters.startDate" value="OPEN"> 
   								<entity-one value-field="workEffortTypePeriod" entity-name="WorkEffortAndTypePeriodAndThruDate" auto-field-map="false">
        							<field-map field-name="workEffortId" from-field="parameters.parameters.workEffortIdRoot"/>
        						</entity-one>
        						<if-not-empty field="workEffortTypePeriod">
        						   	<entity-one value-field="workEffortPartyAssignmentCurrent" entity-name="WorkEffortPartyAssignment" auto-field-map="false">
                                        <field-map field-name="workEffortId" from-field="parameters.parameters.workEffortId"/>
                                        <field-map field-name="partyId" from-field="parameters.parameters.partyId"/>
                                        <field-map field-name="roleTypeId" from-field="parameters.parameters.roleTypeId"/>
                                        <field-map field-name="fromDate" from-field="parameters.parameters.fromDateOld"/>
                                    </entity-one>
                                    <if-not-empty field="workEffortPartyAssignmentCurrent">
                                    	<if-compare-field operator="less" field="workEffortPartyAssignmentCurrent.fromDate" to-field="workEffortTypePeriod.fromDate" type="Timestamp">
                                    	   <add-error>
                								<fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortPartyAssignDeleteError"/>
            								</add-error>
            								<check-errors/> 
                                    	</if-compare-field>
                                    </if-not-empty>
        						</if-not-empty>
   							</if-compare>
   						</else> 
   						</if-has-permission>
   					</if-not-empty>
   				</if-not-empty>
   			</if-not-empty>    
        </if-compare>
        
        <!-- gn1915 verifica che il soggetto in input abbia il ruolo in input -->
        <set field="checkPartyRole" from-field="parameters.parameters.checkPartyRole" default-value="N"/>
        <if>
        	<condition>
        		<and>
        			<if-compare field="parameters.operation" operator="equals" value="CREATE"/>
        			<if-compare field="checkPartyRole" operator="equals" value="Y"/>
        			<not>
        				<if-empty field="parameters.parameters.partyId"/>
        			</not>
        			<not>
        				<if-empty field="parameters.parameters.roleTypeId"/>
        			</not>        			
        		</and>
        	</condition>
        	<then>
        		<entity-one value-field="partyRoleView" entity-name="PartyRoleView">
        			<field-map field-name="partyId" from-field="parameters.parameters.partyId"/>
        			<field-map field-name="roleTypeId" from-field="parameters.parameters.roleTypeId"/>
        		</entity-one>
        		<if-empty field="partyRoleView">
            		<entity-one value-field="partyGv" entity-name="Party">
                		<field-map field-name="partyId" from-field="parameters.parameters.partyId"/>
            		</entity-one>
            		<entity-one value-field="roleTypeGv" entity-name="RoleType">
                		<field-map field-name="roleTypeId" from-field="parameters.parameters.roleTypeId"/>
            		</entity-one>
            		<if-not-empty field="partyGv">
            			<set field="partyName" from-field="partyGv.partyName"/>
            		</if-not-empty>
            		<if-not-empty field="roleTypeGv">
            			<set field="roleDesc" from-field="roleTypeGv.description"/>
            		</if-not-empty>            		
        		
        		    <add-error>
                    	<fail-property resource="WorkeffortExtErrorLabels" property="PartyRoleNotAllowed"/>
                    </add-error>
                    <check-errors/>
        		</if-empty>
        	</then>
        </if>

        <log level="verbose" message="**** parameters=${parameters}"/>

        <if-compare operator="equals" value="WorkEffortPartyAssignmentPerson" field="parameters.entityName">
            <entity-one value-field="person" entity-name="Person">
                <field-map field-name="partyId" from-field="parameters.parameters.partyId"/>
            </entity-one>
            <set field="employmentAmount" from-field="parameters.parameters.employmentAmount" type="Double"/>
            <set field="person.employmentAmount" from-field="employmentAmount" type="BigDecimal"/>
            <store-value value-field="person"/>
            <check-errors/>
        </if-compare>
        <if-compare operator="not-equals" value="WorkEffortPartyAssign" field="parameters.entityName">
            <set field="parameters.entityName" value="WorkEffortPartyAssignment"/>
            <!--<if-compare operator="not-equals" value="WorkEffortPartyAssignmentPerson"
                field="parameters.entityName"> <set field="parameters.entityName" value="WorkEffortPartyAssignment"/>
                </if-compare> -->
        </if-compare>

        <if-not-empty field="parameters.parameters.hostPartyId">
            <set-service-fields service-name="crudServiceDefaultOrchestration" to-map="crudServiceDefaultOrchestrationParams" map="parameters"/>
            <set field="crudServiceDefaultOrchestrationParams.operation" value="CREATE"/>
            <make-value value-field="crudServiceDefaultOrchestrationParams.parameters" entity-name="WorkEffortPartyAssignment"/>
            <set-pk-fields value-field="crudServiceDefaultOrchestrationParams.parameters" map="parameters.parameters"/>
            <set field="crudServiceDefaultOrchestrationParams.parameters.partyId" from-field="parameters.parameters.hostPartyId"/>
            <set field="crudServiceDefaultOrchestrationParams.parameters.roleTypeId" from-field="parameters.parameters.hostRoleTypeId"/>
            <set field="crudServiceDefaultOrchestrationParams.parameters.statusId" from-field="parameters.parameters.hostStatusId"/>

            <log level="verbose" message="**** Creazione assignment host: crudServiceDefaultOrchestrationParams.parameters=${crudServiceDefaultOrchestrationParams.parameters}"/>

            <call-service service-name="crudServiceDefaultOrchestration" in-map-name="crudServiceDefaultOrchestrationParams"/>

        </if-not-empty>

        <if>
            <condition>
                <and>
                    <if-compare field="parameters.operation" operator="equals" value="UPDATE"/>
                    <not>
                        <if-empty field="parameters.parameters.fromDateOld"/>
                    </not>
                    <if-compare-field operator="not-equals" field="parameters.parameters.fromDateOld" to-field="parameters.parameters.fromDate"/>
                </and>
            </condition>
            <then>
                <entity-one value-field="workEffortPartyAssignment" entity-name="WorkEffortPartyAssignment" auto-field-map="false">
                    <field-map field-name="workEffortId" from-field="parameters.parameters.workEffortId"/>
                    <field-map field-name="partyId" from-field="parameters.parameters.partyId"/>
                    <field-map field-name="roleTypeId" from-field="parameters.parameters.roleTypeId"/>
                    <field-map field-name="fromDate" from-field="parameters.parameters.fromDateOld"/>
                </entity-one>
                <if-not-empty field="workEffortPartyAssignment">
                    <remove-value value-field="workEffortPartyAssignment"/>
                </if-not-empty>

                <make-value value-field="workEffortPartyAssignmentNew" entity-name="WorkEffortPartyAssignment"/>
                <set-pk-fields value-field="workEffortPartyAssignmentNew" map="parameters.parameters"/>
                <set-nonpk-fields value-field="workEffortPartyAssignmentNew" map="parameters.parameters"/>
                <create-value value-field="workEffortPartyAssignmentNew"/>
            </then>
            <else>
                <set-service-fields service-name="crudServiceDefaultOrchestration" to-map="crudServiceDefaultOrchestrationParams" map="parameters"/>
                <make-value value-field="crudServiceDefaultOrchestrationParams.parameters" entity-name="WorkEffortPartyAssignment"/>
                <set-pk-fields value-field="crudServiceDefaultOrchestrationParams.parameters" map="parameters.parameters"/>
                <if-compare field="parameters.operation" operator="not-equals" value="DELETE">
                    <set-nonpk-fields value-field="crudServiceDefaultOrchestrationParams.parameters" map="parameters.parameters"/>
                </if-compare>
                <log level="verbose" message="**** crudServiceDefaultOrchestrationParams.parameters=${crudServiceDefaultOrchestrationParams.parameters}"/>
                <call-service service-name="crudServiceDefaultOrchestration" in-map-name="crudServiceDefaultOrchestrationParams">
                    <result-to-field result-name="id"/>
                    <result-to-field result-name="retValues"/>
                </call-service>
                <field-to-result field="id"/>
                <field-to-result field="retValues"/>
            </else>
        </if>

        <check-errors/>
    </simple-method>

    <!-- ************************************************************** -->
    <!-- WorkEffortAssoc -->
    <!-- ************************************************************** -->
	<simple-method method-name="WorkEffortAssoc_WorkEffortToClone" short-description="WorkEffortAssoc_WorkEffortToClone">
	
		<!-- GN-1390 - GN-760 clonazione obiettivo se valorizzato il childTemplate
			- CREATE clono
			- UPDATE : se modificata sequenza o peso aggiorno obiettivo clonato
			- DELETE : cencello anche il clone
		 -->
		<log message="executeToClone ${parameters.parameters.executeToClone} for relation ${parameters.parameters.relationTitle} and parameters.operation ${parameters.operation} " level="always" />
        <if>
            <condition>
                <and>
                  	<!-- caso modifica -->
                  	<or>
                  		<if-compare field="parameters.operation" operator="equals" value="DELETE" />
                  		<if-compare field="parameters.operation" operator="equals" value="CREATE" />
	                  	<and>
	                  		<if-compare field="parameters.operation" operator="equals" value="UPDATE" />
		                  	<or>
		                   		<if-compare-field field="oldWorkEffortAssoc.sequenceNum" operator="not-equals" to-field="parameters.parameters.sequenceNum"/>
		                   		<if-compare-field field="oldWorkEffortAssoc.assocWeight" operator="not-equals" to-field="parameters.parameters.assocWeight"/>
		                 	</or>
	                    </and>
                    </or>
                    
                    <if-compare operator="not-equals" value="Y" field="parameters.parameters.isObiettivo"/>
                    <if-compare operator="equals" value="Y" field="parameters.parameters.executeToClone"/>
                </and>
            </condition>
            <then>    
                <set field="paramsMap" from-field="parameters.parameters"/>                
            
                <clear-field field="isWorkEffortToClone"/>
                <clear-field field="cloneWorkEffortFromChildTemplateServiceMap"/>
                
                <set field="isWorkEffortToClone" value="false"/>                

                <if-compare operator="equals" value="to" field="paramsMap.relationTitle">  

	                <entity-one value-field="workEffortOriginal" entity-name="WorkEffort" auto-field-map="false">
	                    <field-map field-name="workEffortId" from-field="paramsMap.workEffortIdFrom"/>
	                </entity-one>
	                                
	                <get-related-one relation-name="WorkEffortType" to-value-field="workEffortTypeOriginal" value-field="workEffortOriginal"/>                   
	        
	                <if-not-empty field="workEffortTypeOriginal">
	                
	                    <if-not-empty field="workEffortTypeOriginal.childTemplateId"> 
	                        
	                        <entity-one value-field="workEffortCurrent" entity-name="WorkEffort" auto-field-map="false">
	                            <field-map field-name="workEffortId" from-field="paramsMap.workEffortIdTo"/>
	                        </entity-one> 
	
	                        <entity-one value-field="workEffortRoot" entity-name="WorkEffort" auto-field-map="false">
	                            <field-map field-name="workEffortId" from-field="workEffortCurrent.workEffortParentId"/>
	                        </entity-one>  
	                        
	                        <set field="isWorkEffortToClone" value="true"/>
	                    </if-not-empty>
	                </if-not-empty>
                </if-compare>
                <if-compare operator="equals" value="true" field="isWorkEffortToClone">
                	<if-compare field="parameters.operation" operator="equals" value="CREATE" >
                		<!-- chiamo il servizio che fa la clonazione -->
	                    <set field="cloneWorkEffortFromChildTemplateServiceMap.childTemplateId" from-field="workEffortTypeOriginal.childTemplateId"/>
	                    <set field="cloneWorkEffortFromChildTemplateServiceMap.workEffortRoot" from-field="workEffortRoot"/>                  
	                    <set field="cloneWorkEffortFromChildTemplateServiceMap.worEffortCurrent" from-field="workEffortCurrent"/>
	                    <set field="cloneWorkEffortFromChildTemplateServiceMap.worEffortOriginal" from-field="workEffortOriginal"/>                                  
	                    <set field="cloneWorkEffortFromChildTemplateServiceMap.sequenceNum" from-field="paramsMap.sequenceNum" type="Long"/>                  
			            <set field="cloneWorkEffortFromChildTemplateServiceMap.assocWeight" from-field="paramsMap.assocWeight"  type="Double"/>
			            <set field="cloneWorkEffortFromChildTemplateServiceMap.limitCopyWe" from-field="paramsMap.limitCopyWe"/>
			            
	                    <call-service service-name="cloneWorkEffortFromChildTemplate" in-map-name="cloneWorkEffortFromChildTemplateServiceMap"/>
	                	
	                	<else>
            			    <get-related-one relation-name="WorkEffortType" to-value-field="workEffortTypeRoot" value-field="workEffortRoot"/>                   
            
                            <!-- aggiorno il workeffortClonato -->
	                		<set field="updateDeleteWorkEffortAssocWorkEffortToClone.operation" from-field="parameters.operation"/>
	                		
		                    <set field="updateDeleteWorkEffortAssocWorkEffortToClone.workEffortIdTo" from-field="paramsMap.workEffortIdTo"/>
		                    <set field="updateDeleteWorkEffortAssocWorkEffortToClone.workEffortIdFrom" from-field="paramsMap.workEffortIdFrom"/>                  
		                    <set field="updateDeleteWorkEffortAssocWorkEffortToClone.hierarchyAssocTypeIdRoot" from-field="workEffortTypeRoot.hierarchyAssocTypeId"/>
		                    
		                    <if-compare field="parameters.operation" operator="equals" value="UPDATE" >
			                    <set field="updateDeleteWorkEffortAssocWorkEffortToClone.sequenceNum" from-field="paramsMap.sequenceNum" type="Long"/>                  
			                    <set field="updateDeleteWorkEffortAssocWorkEffortToClone.assocWeight" from-field="paramsMap.assocWeight"  type="Double"/>
		                   	</if-compare>
		                   	
		                    <call-service service-name="updateDeleteWorkEffortAssocWorkEffortToClone" in-map-name="updateDeleteWorkEffortAssocWorkEffortToClone"/>
	                	
	                	</else>
                	
                	</if-compare>
                </if-compare>
            </then>
        </if>
        	
	</simple-method>
	
	
    <simple-method method-name="crudServiceTypeValidation_WorkEffortAssoc" short-description="crudServiceTypeValidation_WorkEffortAssoc">
        <if-empty field="parameters.parameters.workEffortAssocTypeId">
            <set field="workEffortIdTo" default-value="${parameters.toFromWeId}" />
            <entity-one value-field="toFromWe" entity-name="WorkEffort">
                <field-map field-name="workEffortId" from-field="parameters.parameters.workEffortIdFrom" />
            </entity-one>
            <entity-one value-field="toToWe" entity-name="WorkEffort">
                <field-map field-name="workEffortId" from-field="parameters.parameters.workEffortIdTo" />
            </entity-one>
            <set field="parameters.parameters.workEffortTypeIdFrom" from-field="toFromWe.workEffortTypeId" />
            <set field="parameters.parameters.workEffortTypeIdTo" from-field="toToWe.workEffortTypeId" />
            <entity-condition list="workEffortTypeAssocAndAssocTypeList" entity-name="WorkEffortTypeAssocAndAssocType">
                <condition-list>
                    <condition-expr field-name="workEffortTypeId" from-field="parameters.parameters.workEffortTypeIdFrom" />
                    <condition-expr field-name="wefromWetoEnumId" value="WETAFROM" />
                    <condition-expr field-name="workEffortTypeIdRef" from-field="parameters.parameters.workEffortTypeIdTo" />
                    <condition-expr field-name="contentId" from-field="parameters.parameters.contentId" />
                </condition-list>
            </entity-condition>
            <if-not-empty field="workEffortTypeAssocAndAssocTypeList">
                <set field="parameters.parameters.workEffortAssocTypeId" value="${workEffortTypeAssocAndAssocTypeList[0].workEffortAssocTypeId}" />
                <else>
                    <entity-condition list="workEffortTypeAssocAndAssocTypeList" entity-name="WorkEffortTypeAssocAndAssocType">
                        <condition-list>
                            <condition-expr field-name="workEffortTypeId" from-field="parameters.parameters.workEffortTypeIdTo" />
                            <condition-expr field-name="wefromWetoEnumId" value="WETATO" />
                            <condition-expr field-name="workEffortTypeIdRef" from-field="parameters.parameters.workEffortTypeIdFrom" />
                            <condition-expr field-name="contentId" from-field="parameters.parameters.contentId" />
                        </condition-list>
                    </entity-condition>
                    <if-not-empty field="workEffortTypeAssocAndAssocTypeList">
                        <set field="parameters.parameters.workEffortAssocTypeId" value="${workEffortTypeAssocAndAssocTypeList[0].workEffortAssocTypeId}" />
                    </if-not-empty>
                </else> 
            </if-not-empty>
            <set-service-fields service-name="crudServicePkValidation" to-map="serviceIn" map="parameters"/>
            <call-service service-name="crudServicePkValidation" in-map-name="serviceIn">
                <results-to-map map-name="serviceOut"/>
            </call-service>
        </if-empty>
        
        <set-service-fields service-name="crudServiceTypeValidation" to-map="serviceIn" map="parameters"/>
        <call-service service-name="crudServiceTypeValidation" in-map-name="serviceIn">
            <results-to-map map-name="serviceOut"/>
        </call-service>       
        
        <check-errors/> 
    </simple-method>
    
    <simple-method method-name="crudServiceDefaultOrchestration_WorkEffortAssoc" short-description="crudServiceDefaultOrchestration_WorkEffortAssoc">
        <set field="parameters.entityName" value="WorkEffortAssoc"/>
 
 		<if-not-empty field="parameters.parameters.usePeriod">
        	<entity-one value-field="customTimePeriodFrom" entity-name="CustomTimePeriod" auto-field-map="false">
        		<field-map field-name="customTimePeriodId" from-field="parameters.parameters.periodFromDate"/>
        	</entity-one>
        	<if-not-empty field="customTimePeriodFrom">
        		<set field="parameters.parameters.fromDate" from-field="customTimePeriodFrom.fromDate" type="Timestamp"/>
        	</if-not-empty>
        					
        	<entity-one value-field="customTimePeriodThru" entity-name="CustomTimePeriod" auto-field-map="false">
        		<field-map field-name="customTimePeriodId" from-field="parameters.parameters.periodThruDate"/>
        	</entity-one>
        	<if-not-empty field="customTimePeriodThru">
        		<set field="parameters.parameters.thruDate" from-field="customTimePeriodThru.thruDate" type="Timestamp"/>
        	</if-not-empty>        					
        </if-not-empty>
        
		<entity-one value-field="oldWorkEffortAssoc" entity-name="WorkEffortAssoc">
			<field-map field-name="workEffortIdTo" from-field="parameters.parameters.workEffortIdTo"/>
			<field-map field-name="workEffortIdFrom" from-field="parameters.parameters.workEffortIdFrom"/>
			<field-map field-name="workEffortAssocTypeId" from-field="parameters.parameters.workEffortAssocTypeId"/>
			<field-map field-name="fromDate" from-field="parameters.parameters.fromDate"/>
		</entity-one>
				
        <set-service-fields service-name="crudServiceDefaultOrchestration_WorkEffortAssoc_Override" to-map="serviceIn" map="parameters"/>
        <call-service service-name="crudServiceDefaultOrchestration_WorkEffortAssoc_Override" in-map-name="serviceIn">
            <results-to-map map-name="serviceOut"/>
        </call-service>       
        
        <call-simple-method method-name="WorkEffortAssoc_WorkEffortToClone"/>
        
        <check-errors/>	
    </simple-method>

    <simple-method method-name="crudServiceValueValidation_WorkEffortAssoc" short-description="crudServiceValueValidation_WorkEffortAssoc">
        <log level="verbose" message="**** parameters=${parameters}"/>
        <set field="parameters" from-field="parameters.parameters"/>
		
		<log level="always" message="${parameters.workEffortAssocTypeId} - FROM ${parameters.workEffortIdFrom} - TO ${parameters.workEffortIdTo} - ${parameters.fromDate} - ${parameters.thruDate}"/>
        <if-compare operator="not-equals" value="DELETE" field="parameters.operation">
            <set-service-fields service-name="dateValidationService" to-map="dateValidationServiceMap" map="parameters"/>
            <call-service service-name="dateValidationService" in-map-name="dateValidationServiceMap"/>
            <check-errors/>
        </if-compare>
        
        <if>
            <condition>
                <or>
                    <if-compare field="parameters.operation" operator="equals" value="UPDATE"/>
                    <if-compare field="parameters.operation" operator="equals" value="DELETE"/>
                </or>
            </condition>
            <then>

                <entity-one value-field="workEffortAssoc" entity-name="WorkEffortAssoc">
                    <field-map field-name="workEffortIdFrom" from-field="parameters.workEffortIdFrom"/>
                    <field-map field-name="workEffortIdTo" from-field="parameters.workEffortIdTo"/>
                    <field-map field-name="workEffortAssocTypeId" from-field="parameters.workEffortAssocTypeId"/>
                    <field-map field-name="fromDate" from-field="parameters.fromDate"/>
                </entity-one>

                <if-not-empty field="workEffortAssoc">
                    <if-compare operator="not-equals" field="parameters.isObiettivo" value="Y">
                        <clear-field field="serviceMap"/>
                        <set field="serviceMap.isPosted" from-field="workEffortAssoc.isPosted"/>
                        <call-service service-name="checkUpdateDeleteByIsPosted" in-map-name="serviceMap"/>
                    </if-compare>
                </if-not-empty>
            </then>
        </if>

        <check-errors/>
    </simple-method>
    
    <simple-method method-name="checkWeightControlSum" short-description="check Weight Control Sum">
        <set field="parameters" from-field="parameters.parameters"/>
        <!-- Bug 4591 -->
        <entity-one value-field="workEffortFrom" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortIdFrom"/>
        </entity-one>
        <get-related-one relation-name="WorkEffortType" to-value-field="workEffortTypeFrom" value-field="workEffortFrom"/>
        <set field="weightControlSum" from-field="workEffortTypeFrom.weightControlSum" type="Double"/>
        <set field="assocWeight" from-field="parameters.assocWeight" type="Double"/>

        <!-- Considero solo la relazione gerarchica -->
        <entity-one value-field="workEffortParent" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="workEffortFrom.workEffortParentId"/>
        </entity-one>
        <get-related-one relation-name="WorkEffortType" to-value-field="workEffortTypeParent" value-field="workEffortParent"/>

        <if>
            <condition>
                <and>
                    <if-compare field="weightControlSum" operator="not-equals" value="0" type="Double"/>
                    <not>
                        <if-empty field="weightControlSum"/>
                    </not>
                </and>
            </condition>
            <then>          
                <if-not-empty field="parameters.searchDate">
                    <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="toTimeZone" ret-field="currentTimeZone">
						<string value=""/>
				    </call-class-method>
                    <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getYearStart" ret-field="yearStart">
					    <field field="parameters.searchDate" type="java.sql.Timestamp"/>
						<field field="currentTimeZone" type="java.util.TimeZone"/>
						<field field="locale" type="java.util.Locale"/>
					</call-class-method>
                    <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getYearEnd" ret-field="yearEnd">
					    <field field="parameters.searchDate" type="java.sql.Timestamp"/>
						<field field="currentTimeZone" type="java.util.TimeZone"/>
						<field field="locale" type="java.util.Locale"/>
					</call-class-method>
                
                	<entity-condition list="workEffortAssocList" entity-name="WorkEffortAssocWorkEffortToView" filter-by-date="false" use-cache="false">
                    	<condition-list>
                        	<condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortIdFrom"/>
                        	<condition-list combine="or">
                            	<condition-expr field-name="workEffortAssocTypeId" from-field="workEffortTypeParent.hierarchyAssocTypeId"/>
                            	<condition-expr field-name="workEffortAssocTypeId" from-field="workEffortTypeFrom.workEffortAssocTypeId"/>
                        	</condition-list>
                        	<condition-expr field-name="fromDate" operator="less-equals" from-field="yearEnd"/>
                        	<condition-expr field-name="thruDate" operator="greater-equals" from-field="yearStart"/>
                        	<condition-expr field-name="actStEnumId" operator="not-equals" value="ACTSTATUS_REPLACED"/>
                    	</condition-list>
                	</entity-condition>                  
                <else>
                	<entity-condition list="workEffortAssocList" entity-name="WorkEffortAssocWorkEffortToView" filter-by-date="false" use-cache="false">
                    	<condition-list>
                        	<condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortIdFrom"/>
                        	<condition-list combine="or">
                            	<condition-expr field-name="workEffortAssocTypeId" from-field="workEffortTypeParent.hierarchyAssocTypeId"/>
                            	<condition-expr field-name="workEffortAssocTypeId" from-field="workEffortTypeFrom.workEffortAssocTypeId"/>
                        	</condition-list>
                        	<condition-expr field-name="actStEnumId" operator="not-equals" value="ACTSTATUS_REPLACED"/>
                    	</condition-list>
                	</entity-condition>                
                </else>
                </if-not-empty>
                
                <set field="assocWeightSum" value="0" type="Double"/>
                <iterate entry="workEffortAssoc" list="workEffortAssocList">
                    <calculate field="assocWeightSum" type="Double">
                        <calcop operator="add" field="assocWeightSum">
                            <calcop operator="get" field="workEffortAssoc.assocWeight"/>
                        </calcop>
                    </calculate>
                </iterate>
                                
                <call-class-method method-name="compare" class-name="java.lang.Double" ret-field="comparison">
                    <field field="assocWeightSum" type="double"/>
                    <field field="weightControlSum" type="double"/>
                </call-class-method>
                
                <if-compare field="comparison" operator="not-equals" value="0" type="Integer">
                    <if>
                        <condition>
                            <if-compare operator="equals" value="Y" field="parameters.checkAllHierarchy"/>
                        </condition>
                        <then>
                        	<!-- Somma dei pesi sugli obiettivi collegati 99  diversa dal previsto 99 (descrizione obiettivo) -->
	                         <property-to-field resource="WorkeffortExtErrorLabels" property="WorkEffortAsscoWeightControlSumErrorCheckAllHierarchy" field="errorMsg"/>
	     
						     <if-compare-field operator="not-equals" field="workEffortFrom.workEffortId" to-field="workEffortFrom.workEffortParentId">
						     	<set field="errorMsgPrefix" value=" (${workEffortFrom.workEffortName})"/>
						     </if-compare-field>
					         <string-append suffix="&lt;br&gt;" string="${errorMsg}" field="errorMsgPrefix"/>
					         <add-error>
	                            <fail-message message="${errorMsgPrefix}"/>
	                        </add-error>
                        </then>
                        <else>
                            <add-error>
                                <fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortAsscoWeightControlSumErrorValue"/>
                            </add-error>
                        </else>
                    </if>
                </if-compare>                    
            </then>
        </if>
		<!-- error_list popolato perche' il servizio e' invocato anche alsalvataggio della workEffortAssoc, 
		errorMsg contiene il messaggi odi errrore quando questo e' invocato dal servizio di controllo stato -->
		<if-not-empty field="error_list">
			<first-from-list entry="error_list_0" list="error_list"/>
			<set field="errorMsg" from-field="error_list_0"/>
			<field-to-result field="errorMsg"/>
		</if-not-empty>
        <log level="always" message="### errorMsg = ${errorMsg}"/>
    </simple-method>

    <simple-method method-name="crudServiceEpilog_WorkEffortAssoc" short-description="crudServiceEpilog_WorkEffortAssoc">
        <call-service service-name="checkWeightControlSum" in-map-name="parameters">
        	<result-to-field result-name="errorMsg"/>
        </call-service>
        <field-to-list list="error_list" field="errorMsg"/>
        <check-errors/>
    </simple-method>
    
    <simple-method method-name="cloneWorkEffortFromChildTemplate" short-description="cloneWorkEffortFromChildTemplate">
        <clear-field field="workEffortMap"/>
        <clear-field field="workEffortServiceMap"/>
        
        <!-- prendo il frameEnumId del tipo del nuovo obiettivo, per sapere se e' manuale o no -->
        <entity-one value-field="workEffortTypeChildTemplate" entity-name="WorkEffortType" auto-field-map="false">
            <field-map field-name="workEffortTypeId" from-field="parameters.childTemplateId"/>
        </entity-one>  
        
        <!-- prendo il hierarchyAssocTypeId del tipo della scheda, che serve per creare le relazioni -->
        <entity-one value-field="workEffortTypeRoot" entity-name="WorkEffortType" auto-field-map="false">
            <field-map field-name="workEffortTypeId" from-field="parameters.workEffortRoot.workEffortTypeId"/>
        </entity-one>          
        
        <set field="workEffortMap.workEffortTypeId" from-field="parameters.childTemplateId"/>
        <set field="workEffortMap.workEffortParentId" from-field="parameters.workEffortRoot.workEffortId"/>
        
        <set field="workEffortMap.workEffortName" from-field="parameters.worEffortOriginal.workEffortName"/>
        <set field="workEffortMap.workEffortNameLang" from-field="parameters.worEffortOriginal.workEffortNameLang"/>
        <set field="workEffortMap.description" from-field="parameters.worEffortOriginal.description"/>
        <set field="workEffortMap.descriptionLang" from-field="parameters.worEffortOriginal.descriptionLang"/>
        
        <set field="workEffortMap.estimatedStartDate" from-field="parameters.worEffortCurrent.estimatedStartDate" type="Timestamp"/>
        
        <entity-one value-field="workEffortTypeContent" entity-name="WorkEffortTypeContent" auto-field-map="false">
            <field-map field-name="workEffortTypeId" from-field="parameters.childTemplateId"/>
            <field-map field-name="contentId" value="WEFLD_MAIN"/>
        </entity-one>
        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="workEffortTypeContent"/>
                    </not>
                    <not>
                        <if-empty field="workEffortTypeContent.params"/>
                    </not>
                </and>
            </condition>
            <then>
                <call-bsh>
                    <![CDATA[
                        wetcContext = new java.util.HashMap();
                        org.ofbiz.base.util.BshUtil.eval(workEffortTypeContent.get("params"), wetcContext);
                        result = new java.util.HashMap();
					    if (org.ofbiz.base.util.UtilValidate.isNotEmpty(wetcContext.get("startDate"))) {
					        result.put("startDate", wetcContext.get("startDate"));
						}							    								           
					    return result;	
                    ]]>
                </call-bsh>
                <if-compare operator="equals" value="OPEN" field="startDate">
                    <entity-one value-field="workEffortTypePeriod" entity-name="WorkEffortAndTypePeriodAndThruDate" auto-field-map="false">
                        <field-map field-name="workEffortId" from-field="parameters.workEffortRoot.workEffortId"/>
                    </entity-one>
                    <if-not-empty field="workEffortTypePeriod">
                        <if-compare operator="equals" value="GLFISCTYPE_ACTUAL" field="workEffortTypePeriod.glFiscalTypeEnumId">
                            <set field="workEffortMap.estimatedStartDate" from-field="workEffortTypePeriod.thruDate" type="Timestamp"/>
                            <else>
                                <set field="workEffortMap.estimatedStartDate" from-field="workEffortTypePeriod.fromDate" type="Timestamp"/>
                            </else>
                        </if-compare>
                    </if-not-empty>
                </if-compare>
            </then>
        </if>
        
        <set field="workEffortMap.estimatedCompletionDate" from-field="parameters.worEffortCurrent.estimatedCompletionDate" type="Timestamp"/>
        <set field="workEffortMap.orgUnitRoleTypeId" from-field="parameters.worEffortCurrent.orgUnitRoleTypeId"/>
        
        <set field="workEffortMap.orgUnitId" from-field="parameters.worEffortCurrent.orgUnitId"/>
        
        <set field="workEffortMap.currentStatusId" from-field="parameters.workEffortRoot.currentStatusId"/>
        
        <set field="workEffortMap.organizationId" from-field="parameters.worEffortCurrent.organizationId"/>
        
        <set field="workEffortMap.workEffortPurposeTypeId" from-field="parameters.worEffortOriginal.workEffortPurposeTypeId"/>
        
        <if-compare operator="not-equals" value="MANUAL" field="workEffortTypeChildTemplate.frameEnumId">
            <set field="workEffortMap.fromCard" value="S"/>   
        </if-compare>
        <if-not-empty field="parameters.worEffortOriginal.etch">
            <set field="workEffortMap.etch" from-field="parameters.worEffortOriginal.etch"/>
        </if-not-empty>
        
        <!-- parametri per le relazioni Root e hierarchy -->
        <set field="workEffortMap.workEffortIdRoot" from-field="parameters.workEffortRoot.workEffortId"/>
        <set field="workEffortMap.workEffortIdFrom" from-field="parameters.worEffortCurrent.workEffortId"/>
        <set field="workEffortMap.weHierarchyTypeId" from-field="workEffortTypeRoot.hierarchyAssocTypeId"/>
     	<set field="workEffortMap.assocWeight" from-field="parameters.assocWeight" type="Double"/>
        <set field="workEffortMap.sequenceNum" from-field="parameters.sequenceNum" type="Long"/>
     	
        <set field="workEffortMap.operationalEntityName" value="WorkEffort"/>
       
        <map-to-map map="workEffortMap" to-map="workEffortServiceMap.parameters"/>
        <set field="workEffortServiceMap.parameters.operation" value="CREATE"/>
        <set field="workEffortServiceMap.operation" value="CREATE"/>
        <set field="workEffortServiceMap.entityName" value="WorkEffort"/>
        <set field="workEffortServiceMap.parameters._AUTOMATIC_PK_" value="Y"/>            
        
        <call-service service-name="crudServiceDefaultOrchestration_WorkEffort" in-map-name="workEffortServiceMap">
            <result-to-field result-name="id" field="newWorkEffort"/>
        </call-service>
        <check-errors/>
	    
       
        <if-not-empty field="newWorkEffort">
            <!-- se formato codice manuale oppure etch di orignial not empty e != etch obiettivo creato, occorre aggiornare obiettivo-->
            <clear-field field="workEffortMap"/>
            <clear-field field="workEffortServiceMap"/>
            <clear-field field="isColonedToUpdate"/>
            <set field="isColonedToUpdate" value="false"/>
            
            <entity-one value-field="workEffortCloned" entity-name="WorkEffort" auto-field-map="false">
                <field-map field-name="workEffortId" from-field="newWorkEffort.workEffortId"/>
                <select-field field-name="sourceReferenceId"/>
                <select-field field-name="etch"/>
            </entity-one> 
       
            <if-compare operator="equals" value="MANUAL" field="workEffortTypeChildTemplate.frameEnumId">
                <set field="workEffortMap.sourceReferenceId" from-field="newWorkEffort.workEffortId"/>
                <set field="isColonedToUpdate" value="true"/>
            </if-compare>
            <if-not-empty field="parameters.worEffortOriginal.etch">
                <if-compare operator="not-equals" value="${workEffortCloned.etch}" field="parameters.worEffortOriginal.etch">
                    <set field="workEffortMap.etch" from-field="parameters.worEffortOriginal.etch"/>
                    <set field="isColonedToUpdate" value="true"/>
                </if-compare>
            </if-not-empty>
                 
            <if-compare operator="equals" value="true" field="isColonedToUpdate">               
                <set field="workEffortMap.workEffortId" from-field="newWorkEffort.workEffortId"/>
                <set field="workEffortMap.operationalEntityName" value="WorkEffort"/>
        
                <map-to-map map="workEffortMap" to-map="workEffortServiceMap.parameters"/>
                <set field="workEffortServiceMap.parameters.operation" value="UPDATE"/>
                <set field="workEffortServiceMap.operation" value="UPDATE"/>
                <set field="workEffortServiceMap.entityName" value="WorkEffort"/>
                <set field="workEffortServiceMap.parameters._AUTOMATIC_PK_" value="Y"/>           
        
                <call-service service-name="crudServiceDefaultOrchestration_WorkEffort" in-map-name="workEffortServiceMap"/>
                <check-errors/>
            </if-compare>

            <!-- creazione relazione Copy -->
            <clear-field field="createWorkEffortAssocCopyParams"/>
            
            <set field="createWorkEffortAssocCopyParams.entityName" value="WorkEffortAssoc"/>
            <set field="createWorkEffortAssocCopyParams.operation" value="CREATE"/>
            <make-value value-field="createWorkEffortAssocParams.parameters" entity-name="WorkEffortAssoc"/>
            <set field="createWorkEffortAssocCopyParams.parameters.workEffortIdFrom" from-field="parameters.worEffortOriginal.workEffortId"/>
            <set field="createWorkEffortAssocCopyParams.parameters.workEffortIdTo" from-field="newWorkEffort.workEffortId"/>
            <set field="createWorkEffortAssocCopyParams.parameters.workEffortAssocTypeId" value="COPY"/>
            <set field="createWorkEffortAssocCopyParams.parameters.fromDate" from-field="parameters.worEffortCurrent.estimatedStartDate" type="Timestamp"/>
            <set field="createWorkEffortAssocCopyParams.parameters.thruDate" from-field="parameters.worEffortCurrent.estimatedCompletionDate" type="Timestamp"/>
            <set field="createWorkEffortAssocCopyParams.parameters.assocWeight" value="0" type="Double"/>
            <set field="createWorkEffortAssocCopyParams.parameters.sequenceNum" value="1" type="Long"/>
	    
        	<call-service service-name="crudServiceDefaultOrchestration_WorkEffortAssoc" in-map-name="createWorkEffortAssocCopyParams"/>
            <check-errors/> 
            
            <if-compare operator="not-equals" value="ONLY_WE" field="parameters.limitCopyWe">
            	<!-- copia misure -->
            	<entity-condition list="workEffortMeasureList" entity-name="WorkEffortMeasure">
            		<condition-list>
            			<condition-expr field-name="weMeasureTypeEnumId" value="WEMT_SCORE" operator="not-equals"/>
            			<condition-expr field-name="workEffortId"  from-field="parameters.worEffortOriginal.workEffortId"/>
            		</condition-list>
            	</entity-condition>
            	<iterate entry="workEffortMeasure" list="workEffortMeasureList">          	
            		<set field="createWorkEffortMeasureCopyParams.entityName" value="WorkEffortMeasure"/>
	            	<set field="createWorkEffortMeasureCopyParams.operation" value="CREATE"/>
					<set field="createWorkEffortMeasureCopyParams.parameters._AUTOMATIC_PK_" value="Y"/>           
        
	            	<map-to-map map="workEffortMeasure" to-map="createWorkEffortMeasureCopyParams.parameters"/>
                
	            	<set field="createWorkEffortMeasureCopyParams.parameters.isPosted" value="N"/>
	            	<set field="createWorkEffortMeasureCopyParams.parameters.workEffortId" from-field="newWorkEffort.workEffortId"/>
	            	<set field="createWorkEffortMeasureCopyParams.parameters.fromDate" from-field="parameters.worEffortCurrent.estimatedStartDate" type="Timestamp"/>
	            	<set field="createWorkEffortMeasureCopyParams.parameters.thruDate" from-field="parameters.worEffortCurrent.estimatedCompletionDate" type="Timestamp"/>
	            
	            	<set field="oldWorkEffortMeasureId" from-field="createWorkEffortMeasureCopyParams.parameters.workEffortMeasureId"/>
	            	<clear-field field="createWorkEffortMeasureCopyParams.parameters.workEffortMeasureId"/>
        		
        			<call-service service-name="crudServiceDefaultOrchestration_WorkEffortMeasure_copy" in-map-name="createWorkEffortMeasureCopyParams">
        				<result-to-field result-name="id" field="idResultMap"/>
                    </call-service>
	            	<log level="info" message="**** oldWorkEffortMeasureId ${oldWorkEffortMeasureId} newWorkEffortMeasureId = ${idResultMap} "/>
                	<check-errors/>
	            	<set field="newWorkEffortMeasureId" from-field="idResultMap.workEffortMeasureId"/>
	            	
                
                	<!-- copia AcctgTransAndEntry with glFiscalTypeId BUDGET alla data fine periodo aperto -->
	                <entity-one value-field="workEffortTypePeriod" entity-name="WorkEffortAndTypePeriodAndThruDate" auto-field-map="false">
                        <field-map field-name="workEffortId" from-field="parameters.workEffortRoot.workEffortId"/>
                    </entity-one>
                    <if-compare operator="equals" value="OPEN" field="workEffortTypePeriod.statusEnumId">
		            	<entity-condition list="listAcctgTransAndEntry" entity-name="AcctgTransAndEntry">
	                        <condition-list>
	                            <condition-expr field-name="voucherRef" from-field ="oldWorkEffortMeasureId"/>
	                            <condition-expr field-name="transactionDate" operator="greater-equals" from-field ="workEffortTypePeriod.fromDate"/>
	                            <condition-expr field-name="transactionDate" operator="less-equals" from-field ="workEffortTypePeriod.thruDate"/>
	                        </condition-list>
	                    </entity-condition>
	                    
	                    <iterate entry="acctgTransAndEntry" list="listAcctgTransAndEntry">
	                        <if-compare field="acctgTransAndEntry.glFiscalTypeId" operator="equals" value="BUDGET">
		                        <set field="createWeTransParams.currencyUomId" from-field="acctgTransAndEntry.currencyUomId"/>
		                        <set field="createWeTransParams.isPosted" from-field="acctgTransAndEntry.isPosted"/>
		                        <set field="createWeTransParams.workEffortMeasureId" from-field="newWorkEffortMeasureId"/>
		                        <set field="createWeTransParams.transValue" from-field="acctgTransAndEntry.amount"/>
		                        <set field="createWeTransParams.transDate" from-field="acctgTransAndEntry.transactionDate"/>
		                        <set field="createWeTransParams.transDescription" from-field="acctgTransAndEntry.description"/>
		                        <set field="createWeTransParams.glFiscalTypeId" from-field="acctgTransAndEntry.glFiscalTypeId"/>
								<set field="createWeTransParams.defaultOrganizationPartyId" from-field="parameters.worEffortCurrent.organizationId"/>
		
		                        <call-service service-name="createWeTrans" in-map-name="createWeTransParams"/>
		                        <check-errors/>
		            	    </if-compare>
		            	</iterate>
		            </if-compare>
            	</iterate> 
            	
            	<!-- copia note -->
            	<entity-condition list="noteList" entity-name="WorkEffortNoteAndData">
            		<condition-expr field-name="workEffortId" from-field="parameters.worEffortOriginal.workEffortId"/>
            	</entity-condition>
            	<if-not-empty field="noteList">
            		<iterate entry="noteItem" list="noteList">
						<clear-field field="mapNoteDataWorkEffort"/>
						<set field="mapNoteDataWorkEffort.operation" value="CREATE"/>
						<set field="mapNoteDataWorkEffort.entityName" value="WorkEffortNoteAndData"/>
						<set field="mapNoteDataWorkEffort.parameters._AUTOMATIC_PK_" value="Y"/>

						<set field="mapNoteDataWorkEffort.parameters.noteName" from-field="noteItem.noteName"/>
						<set field="mapNoteDataWorkEffort.parameters.noteInfo" from-field="noteItem.noteInfo"/>
						<set field="mapNoteDataWorkEffort.parameters.workEffortId" from-field="newWorkEffort.workEffortId"/>
						<set field="mapNoteDataWorkEffort.parameters.sequenceId" from-field="noteItem.sequenceId"/>
						<set field="mapNoteDataWorkEffort.parameters.internalNote" from-field="noteItem.internalNote"/>
						<set field="mapNoteDataWorkEffort.parameters.isMain" from-field="noteItem.isMain"/>
						<set field="mapNoteDataWorkEffort.parameters.isHtml" from-field="noteItem.isHtml"/>
						<set field="mapNoteDataWorkEffort.parameters.noteDateTime" from-field="parameters.worEffortCurrent.estimatedStartDate" type="Timestamp"/>

						<set-service-fields service-name="crudServiceDefaultOrchestration_WorkEffortNoteAndData" to-map="crudServiceOperationMap" map="mapNoteDataWorkEffort"/>
						<call-service service-name="crudServiceDefaultOrchestration_WorkEffortNoteAndData" in-map-name="crudServiceOperationMap"/>           	
            		</iterate>
            	</if-not-empty>            
            </if-compare>
        </if-not-empty>
    </simple-method>

    <!-- ************************************************************** -->
    <!-- WorkEffortAssocAttribute -->
    <!-- ************************************************************** -->

    <simple-method method-name="crudServiceValueValidation_WorkEffortAssocAttribute" short-description="crudServiceValueValidation_WorkEffortAssocAttribute">
        <log level="verbose" message="**** parameters=${parameters}"/>
        <set field="parameters" from-field="parameters.parameters"/>

        <if>
            <condition>
                <or>
                    <if-compare field="parameters.operation" operator="equals" value="CREATE"/>
                    <if-compare field="parameters.operation" operator="equals" value="UPDATE"/>
                </or>
            </condition>
            <then>

                <!-- Verifica che l'attributo esista per il tipo di relazione -->
                <entity-one entity-name="WorkEffortAssocTypeAttr" value-field="workEffortAssocTypeAttr" auto-field-map="false" use-cache="true">
                    <field-map field-name="workEffortAssocTypeId" from-field="parameters.workEffortAssocTypeId"/>
                    <field-map field-name="attrName" from-field="parameters.attrName"/>
                </entity-one>
                <if-empty field="workEffortAssocTypeAttr">
                    <add-error>
                        <fail-property resource="BaseErrorLabels" property="AddedDataNotAllowed"/>
                    </add-error>
                    <check-errors/>
                </if-empty>

            </then>
        </if>

        <check-errors/>
    </simple-method>

    <!-- ************************************************************** -->
    <!-- WorkEffortReview -->
    <!-- ************************************************************** -->

    <simple-method method-name="crudServiceDefaultOrchestration_WorkEffortReview" short-description="crudServiceDefaultOrchestration_WorkEffortReview">
        <log level="verbose" message="**** parameters=${parameters}"/>

        <set field="parameters.entityName" value="WorkEffortReview"/>

        <if-compare field="parameters.operation" operator="equals" value="CREATE">

            <!-- Carica il workEffort attuale -->
            <entity-one entity-name="WorkEffortView" value-field="workEffortView" auto-field-map="false" use-cache="false">
                <field-map field-name="workEffortId" from-field="parameters.parameters.workEffortId"/>
            </entity-one>

            <set field="parameters.parameters.userLoginId" value="system"/>
            <if-empty field="parameters.parameters.effortUomId">
                <set field="parameters.parameters.effortUomId" from-field="workEffortView.effortUomId"/>
            </if-empty>
            <if-empty field="parameters.parameters.estimatedTotalEffort">
                <set field="parameters.parameters.estimatedTotalEffort" from-field="workEffortView.estimatedTotalEffort"/>
            </if-empty>
        </if-compare>

        <set-service-fields service-name="crudServiceDefaultOrchestration_WorkEffortReview_Override" to-map="serviceIn" map="parameters"/>
        <call-service service-name="crudServiceDefaultOrchestration_WorkEffortReview_Override" in-map-name="serviceIn">
            <results-to-map map-name="serviceOut"/>
        </call-service>
        <check-errors/>

    </simple-method>

    <simple-method method-name="crudServiceValueValidation_WorkEffortReview" short-description="crudServiceValueValidation_WorkEffortReview">
        <log level="verbose" message="**** parameters=${parameters}"/>
        <set field="parametersCrud" from-field="parameters"/>
        <set field="parameters" from-field="parameters.parameters"/>

        <if>
            <condition>
                <or>
                    <if-compare field="parametersCrud.operation" operator="equals" value="UPDATE"/>
                    <if-compare field="parametersCrud.operation" operator="equals" value="DELETE"/>
                </or>
            </condition>
            <then>

                <!-- Carica la review attuale -->
                <entity-one entity-name="WorkEffortReview" value-field="workEffortReview" auto-field-map="false" use-cache="true">
                    <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
                    <field-map field-name="userLoginId" from-field="parameters.userLoginId"/>
                    <field-map field-name="reviewDate" from-field="parameters.reviewDate"/>
                </entity-one>

                <if-compare field="workEffortReview.statusId" operator="equals" value="WERV_APPROVED">
                    <add-error>
                        <fail-property resource="BaseErrorLabels" property="UpdateDeleteOperationNotAllowed"/>
                    </add-error>
                    <check-errors/>
                </if-compare>

                <if-not-empty field="workEffortReview">
                    <clear-field field="serviceMap"/>
                    <!-- ToDo 3820 -->
                    <if-compare operator="not-equals" field="parameters.isObiettivo" value="Y">
                        <clear-field field="serviceMap"/>
                        <set field="serviceMap.isPosted" from-field="workEffortReview.isPosted"/>
                        <call-service service-name="checkUpdateDeleteByIsPosted" in-map-name="serviceMap"/>
                    </if-compare>
                </if-not-empty>

            </then>
        </if>

        <if-compare field="parametersCrud.operation" operator="equals" value="CREATE">
            <if-compare-field field="parameters.effortUomId" operator="not-equals" to-field="workEffortView.effortUomId">
                <add-error>
                    <fail-property resource="WorkeffortExtErrorLabels" property="EffortUomNotAllowed"/>
                </add-error>
                <check-errors/>
            </if-compare-field>
        </if-compare>

        <check-errors/>
    </simple-method>

    <!-- ************************************ Activity 1705 Conversione del
        campo chiave double utilizzando il locale di default (inglese). Per evitare
        i problemi successivi di conversione campi double nel locale italiano. Convertendo
        qui i servizi successivi si trovano il campo già in formato Double e nn lo
        convertono più **************************************** -->

    <simple-method method-name="WorkEffortMeasRatSc_DoubleConversion" short-description="WorkEffortMeasRatSc_DoubleConversion">

        <call-class-method method-name="getDefault" class-name="java.util.Locale" ret-field="defaultLocale">
        </call-class-method>


        <call-class-method method-name="simpleTypeConvert" class-name="org.ofbiz.base.util.ObjectType" ret-field="convertedRatingValue">
            <field field="parameters.parameters.uomRatingValue" type="Object"/>
            <string value="Double"></string>
            <string></string>
            <field field="defaultLocale" type="Locale"/>
        </call-class-method>

        <set field="parameters.parameters.uomRatingValue" type="Double" from-field="convertedRatingValue"/>

    </simple-method>


    <!-- ************************************ Activity 2168 ************************************* -->
    <!-- Creazione item in WorkEffortTransactionView -->
    <simple-method method-name="createWeTrans" short-description="createWeTrans">

        <log level="always" message=" ########################## isPosted ${parameters.isPosted} "></log>
        <log level="always" message=" ########################## workEffortMeasureId ${parameters.workEffortMeasureId} "></log>
        <log level="always" message=" ########################## glAccountId ${parameters.glAccountId} "></log>
        <log level="always" message=" ########################## voucherRef ${parameters.voucherRef} "></log>
		<log level="always" message=" ########################## currencyUomId ${parameters.currencyUomId} "></log>
        
        <entity-one value-field="glAccount" entity-name="GlAccount">
            <field-map field-name="glAccountId" from-field="parameters.glAccountId"/>
        </entity-one>

        <if-not-empty field="parameters.defaultOrganizationPartyId">
            <set field="defaultPartyId" from-field="parameters.defaultOrganizationPartyId"/>
        <else>
            <set field="defaultPartyId" value="Company"/>
        </else>
        </if-not-empty>  
        <entity-condition list="partyRoleList" entity-name="PartyRole">
            <condition-list>
                <condition-expr field-name="partyId" from-field="defaultPartyId"/>
                <condition-expr field-name="parentRoleTypeId" value="ORGANIZATION_UNIT"/>
            </condition-list>
            <order-by field-name="-roleTypeId"/>
        </entity-condition>
        <first-from-list entry="partyRole" list="partyRoleList"/>
        <set field="defaultRoleTypeId" from-field="partyRole.roleTypeId"/>

        <set field="voucherRef" from-field="parameters.workEffortMeasureId"/>
        <set field="voucherDate" from-field="parameters.transDate"/>

        <if-not-empty field="parameters.workEffortMeasureId">
            <!-- modello su prodotto -->
            <if-compare operator="equals" value="ACCINP_PRD" field="glAccount.inputEnumId">
                <entity-one value-field="workEffortMeasure" entity-name="WorkEffortMeasure"/>
                
                <set field="voucherRef" from-field="parameters.voucherRef"/>
                
                <set field="acctgTransTypeId" from-field="parameters.acctgTransTypeId"/>
                <set field="glAccountId" from-field="parameters.glAccountId"/>
                <set field="productId" from-field="parameters.productId"/>
                <if-not-empty field="parameters.defaultOrganizationPartyId">
                    <set field="organizationPartyId" from-field="parameters.defaultOrganizationPartyId"/>
                <else>
                    <set field="organizationPartyId" value="Company"/>
                </else>
                </if-not-empty>

                <if-empty field="parameters.partyId">
                    <if-empty field="workEffortMeasure.orgUnitId">
                        <set field="partyId" from-field="defaultPartyId"/>
                        <else>
                            <set field="partyId" from-field="workEffortMeasure.orgUnitId"/>
                        </else>
                    </if-empty>
                    <else>
                        <set field="partyId" from-field="parameters.partyId"/>
                    </else>
                </if-empty>

                <if-empty field="parameters.roleTypeId">
                    <if-empty field="workEffortMeasure.orgUnitRoleTypeId">
                        <set field="roleTypeId" from-field="defaultRoleTypeId"/>
                        <else>
                            <set field="roleTypeId" from-field="workEffortMeasure.orgUnitRoleTypeId"/>
                        </else>
                    </if-empty>
                    <else>
                        <set field="roleTypeId" from-field="parameters.roleTypeId"/>
                    </else>
                </if-empty>

                <set field="entryPartyId" from-field="parameters.entryPartyId"/>
                <set field="entryRoleTypeId" from-field="parameters.entryRoleTypeId"/>

                <else>
                    <!-- Caso WorkEffortTransactionView -->
                    <entity-one value-field="workEffortMeasure" entity-name="WorkEffortMeasure"></entity-one>
                    <if-empty field="workEffortMeasure">
                        <add-error>
                            <fail-property resource="WorkeffortExtErrorLabels" property="CreateWeTrans_DataNotFound"/>
                        </add-error>
                        <check-errors/>
                    </if-empty>

                    <get-related-one relation-name="MainWorkEffort" to-value-field="workEffort" value-field="workEffortMeasure"/>
                    <if-empty field="workEffortMeasure">
                        <add-error>
                            <fail-property resource="WorkeffortExtErrorLabels" property="CreateWeTrans_DataNotFound"/>
                        </add-error>
                        <check-errors/>
                    </if-empty>

                    <get-related-one relation-name="WorkEffortType" to-value-field="workEffortType" value-field="workEffort"/>
                    <if-empty field="workEffort">
                        <add-error>
                            <fail-property resource="WorkeffortExtErrorLabels" property="CreateWeTrans_DataNotFound"/>
                        </add-error>
                        <check-errors/>
                    </if-empty>

                    <entity-one value-field="parentWorkEffort" entity-name="WorkEffort">
                        <field-map field-name="workEffortId" from-field="workEffort.workEffortParentId"/>
                    </entity-one>
                    <if-empty field="parentWorkEffort">
                        <add-error>
                            <fail-property resource="WorkeffortExtErrorLabels" property="CreateWeTrans_DataNotFound"/>
                        </add-error>
                        <check-errors/>
                    </if-empty>

                    <entity-one value-field="workEffortTypeStatus" entity-name="WorkEffortTypeStatus">
                        <field-map field-name="workEffortTypeRootId" from-field="parentWorkEffort.workEffortTypeId"/>
                        <field-map field-name="currentStatusId" from-field="workEffort.currentStatusId"/>
                    </entity-one>

                    <if-compare field="parameters.acctgTransTypeId" operator="equals" value="SCOREKPI">
                        <entity-one entity-name="GlAccount" value-field="glAccount">
                            <field-map field-name="glAccountId" from-field="parameters.glAccountId"/>
                        </entity-one>
                        <else>
                            <get-related-one relation-name="GlAccount" to-value-field="glAccount" value-field="workEffortMeasure"/>
                        </else>
                    </if-compare>
                    <if-empty field="glAccount">
                        <add-error>
                            <fail-property resource="WorkeffortExtErrorLabels" property="CreateWeTrans_DataNotFound"/>
                        </add-error>
                        <check-errors/>
                    </if-empty>


                    <!-- modello su obiettivo -->
                    <if-compare operator="equals" value="ACCINP_OBJ" field="glAccount.inputEnumId">

                        <set field="partyId" from-field="workEffort.orgUnitId"/>
                        <set field="roleTypeId" from-field="workEffort.orgUnitRoleTypeId"/>
                        <set field="entryPartyId" from-field="workEffortMeasure.orgUnitId"/>
                        <set field="entryRoleTypeId" from-field="workEffortMeasure.orgUnitRoleTypeId"/>

                        <!-- no modello -->
                        <else>
                            <if-empty field="parameters.partyId">
                                <if-empty field="glAccount.respCenterId">
                                    <set field="partyId" from-field="defaultPartyId"/>
                                    <else>
                                        <set field="partyId" from-field="glAccount.respCenterId"/>
                                    </else>
                                </if-empty>
                                <else>
                                    <set field="partyId" from-field="parameters.partyId"/>
                                </else>
                            </if-empty>

                            <if-empty field="parameters.roleTypeId">
                                <if-empty field="glAccount.respCenterRoleTypeId">
                                    <set field="roleTypeId" from-field="defaultRoleTypeId"/>
                                    <else>
                                        <set field="roleTypeId" from-field="glAccount.respCenterRoleTypeId"/>
                                    </else>
                                </if-empty>
                                <else>
                                    <set field="roleTypeId" from-field="parameters.roleTypeId"/>
                                </else>
                            </if-empty>

                            <set field="entryPartyId" from-field="parameters.entryPartyId"/>
                            <set field="entryRoleTypeId" from-field="parameters.entryRoleTypeId"/>
                        </else>
                    </if-compare>

                    <if-empty field="parameters.acctgTransTypeId">
                        <set field="acctgTransTypeId" from-field="workEffortType.parentTypeId"/>
                        <else>
                            <set field="acctgTransTypeId" from-field="parameters.acctgTransTypeId"/>
                        </else>
                    </if-empty>
                    <if-empty field="parameters.glFiscalTypeId">
                        <set field="parameters.glFiscalTypeId" value="${workEffortTypeStatus.glFiscalTypeId}"/>
                    </if-empty>
                    <!-- Bug 4463 -->
                    <set field="workEffortId" set-if-null="true"/>
                    <if>
                        <condition>
                            <or>
                                <if-compare field="glAccount.inputEnumId" operator="equals" value="ACCINP_OBJ"/>
                                <if-compare field="workEffortMeasure.weOtherGoalEnumId" operator="equals" value="WEMOMG_WEFF"/>
                            </or>
                        </condition>
                        <then>
                            <set field="workEffortId" from-field="workEffort.workEffortId"/>
                        </then>
                    </if>

                    <set field="debitCreditFlag" from-field="glAccount.debitCreditDefault"/>

                    <set field="productId" from-field="parameters.productId" default-value="${workEffortMeasure.productId}"/>
                
                    <if-compare field="glAccount.accountTypeEnumId" operator="equals" value="FINANCIAL">
                        <if-not-empty field="glAccount.referencedAccountId">
                            <set field="glAccountId" value="${glAccount.referencedAccountId}"/>
                            <set field="glAccountFinId" value="${workEffortMeasure.glAccountId}"/>
                            <else>
                                <!-- e' un glAccount finanziario ma senza referencedAccountId valorizzato -->
                                <log level="always" message="WARNING for glAccount ${glAccount.glAccountId} FINANCIAL referencedAccountId IS EMPTY"/>
                                <set field="glAccountId" value="${glAccount.glAccountId}"/>
                            </else>
                        </if-not-empty>
                        <else>
                            <set field="glAccountId" value="${glAccount.glAccountId}"/>
                        </else>
                    </if-compare>
                    <set field="organizationPartyId" from-field="workEffort.organizationId"/>
                    <set field="emplPositionTypeId" from-field="workEffortMeasure.emplPositionTypeId"/>
                    <!--<set field="currencyUomId" value=""/> -->

                    <!-- Bug 4468 -->
                    <if-empty field="parameters.voucherRef">
                        <if>
                            <condition>
                                <if-compare field="glAccount.inputEnumId" operator="equals" value="ACCINP_OBJ"/>
                            </condition>
                            <then>
                                <set field="voucherRef" from-field="parameters.workEffortMeasureId"/>
                                <set field="voucherDate" from-field="parameters.transDate" type="Date"/>
                            </then>
                            <else>
                                <set field="voucherRef" set-if-null="true"/>
                                <set field="voucherDate" set-if-null="true"/>
                            </else>
                        </if>
                        <else>
                            <!-- UPDATE -->
                            <set field="voucherRef" from-field="parameters.voucherRef"/>
                        </else>
                    </if-empty>

                </else>
            </if-compare>


            <else>
                <!-- Caso AcctgTransEntry gestito separatamente dalla misura toDo 3666 -->
                <set field="voucherRef" from-field="parameters.voucherRef"/>
                <set field="acctgTransTypeId" from-field="parameters.acctgTransTypeId"/>

                <!-- no parameters.workEffortMeasureId : no modello -->
                <if-empty field="parameters.partyId">
                    <if-empty field="glAccount.respCenterId">
                        <set field="partyId" from-field="defaultPartyId"/>
                        <else>
                            <set field="partyId" from-field="glAccount.respCenterId"/>
                        </else>
                    </if-empty>
                    <else>
                        <set field="partyId" from-field="parameters.partyId"/>
                    </else>
                </if-empty>

                <if-empty field="parameters.roleTypeId">
                    <if-empty field="glAccount.respCenterRoleTypeId">
                        <set field="roleTypeId" from-field="defaultRoleTypeId"/>
                        <else>
                            <set field="roleTypeId" from-field="glAccount.respCenterRoleTypeId"/>
                        </else>
                    </if-empty>
                    <else>
                        <set field="roleTypeId" from-field="parameters.roleTypeId"/>
                    </else>
                </if-empty>

                <set field="entryPartyId" from-field="parameters.entryPartyId"/>
                <set field="entryRoleTypeId" from-field="parameters.entryRoleTypeId"/>

                <set field="workEffortId" from-field="parameters.workEffortId"/>
                <set field="debitCreditFlag" from-field="glAccount.debitCreditDefault"/>

                <set field="productId" from-field="parameters.productId" default-value="${glAccount.productId}"/>
                <set field="entryRoleTypeId" from-field="parameters.entryRoleTypeId"/>
                <set field="entryPartyId" from-field="parameters.entryPartyId"/>
                <!-- se ho una misura, il set di glAccountFinId viene fatto in un altro servizio, altrimenti devo farlo qui -->
                <if-compare field="glAccount.accountTypeEnumId" operator="equals" value="FINANCIAL">
                    <if-not-empty field="glAccount.referencedAccountId">
                        <set field="glAccountId" value="${glAccount.referencedAccountId}"/>
                        <set field="glAccountFinId" value="${glAccount.glAccountId}"/>
                        <else>
                            <!-- per comune cesena il CDC_SPESA e' un glAccount finanziario ma senza referencedAccountId valorizzato -->
                            <log level="always" message="WARNING for glAccount ${glAccount.glAccountId} FINANCIAL referencedAccountId IS EMPTY"/>
                            <set field="glAccountId" value="${glAccount.glAccountId}"/>
                        </else>
                    </if-not-empty>
                    <else>
						<set field="glAccountId" value="${glAccount.glAccountId}"/>
					</else>
				</if-compare>
         		<if-not-empty field="parameters.defaultOrganizationPartyId">
                    <set field="organizationPartyId" from-field="parameters.defaultOrganizationPartyId"/>
                <else>
                    <set field="organizationPartyId" value="Company"/>
                </else>
                </if-not-empty>
            </else>
        </if-not-empty>

        <!-- Creo AcctgTrans -->
        <!-- modifica per STD Movimenti -->
        <if-not-empty field="parameters.acctgTransId">
            <set field="acctgTransMap.acctgTransId" from-field="parameters.acctgTransId"/>
            <else>
                <set field="acctgTransMap._AUTOMATIC_PK_" value="Y"/>
            </else>
        </if-not-empty>
        <set field="acctgTransMap.transactionDate" value="${parameters.transDate}"/>
        <set field="acctgTransMap.isPosted" from-field="parameters.isPosted" default-value="N"/>
        <set field="acctgTransMap.voucherRef" from-field="voucherRef"/>
        <set field="acctgTransMap.voucherDate" from-field="voucherDate"/>
        <set field="acctgTransMap.acctgTransTypeId" from-field="acctgTransTypeId"/>
        <set field="acctgTransMap.roleTypeId" from-field="roleTypeId"/>
        <set field="acctgTransMap.partyId" from-field="partyId"/>
        <!-- modifica sandro: se passato come parametro prende il sopravvento su
            ciò che c'é in tabella -->
        <set field="acctgTransMap.glFiscalTypeId" value="${parameters.glFiscalTypeId}"/>
        <set field="acctgTransMap.workEffortId" from-field="workEffortId"/>
        <set field="acctgTransMap.description" from-field="parameters.description"/>
        <set field="acctgTransMap.descriptionLang" from-field="parameters.descriptionLang"/>
        <set field="acctgTransMap.groupStatusId" from-field="parameters.groupStatusId"/>   
        <set field="serviceMap.entityName" value="AcctgTrans"/>
        <set field="serviceMap.operation" value="CREATE"/>
        <map-to-map map="acctgTransMap" to-map="serviceMap.parameters"/>
        <set field="serviceMap.locale" value="${locale}"/>

        <log level="info" message="****************************** createWeTrans : acctgTransMap = ${acctgTransMap}"></log>
                            
        <call-service service-name="crudServiceDefaultOrchestration" in-map-name="serviceMap">
            <result-to-field result-name="id" field="resultId"/>
        </call-service>
        <check-errors/>

        <!-- Creo AcctgTransEntry -->
        <!-- bug 3867 recupero value dai parameters e tronca in base al currrencyUomId -->
        <entity-one value-field="uomIdValue" entity-name="Uom">
            <field-map field-name="uomId" from-field="glAccount.defaultUomId"/>
        </entity-one>

        <!-- aggiunta gestione origAmount = amount se null -->
        <log level="always" message="*** createWeTrans parameters.transValue = ${parameters.transValue} with uomIdValue.decimalScale = ${uomIdValue.decimalScale} and parameters.origTransValue = ${parameters.origTransValue}"/>
        
        <if-empty field="parameters.origTransValue">
			<set field="parameters.origTransValue" from-field="parameters.transValue" type="Double"/>
		</if-empty>
		
        <if-not-empty field="uomIdValue.decimalScale">
            <if-not-empty field="parameters.transValue">
            	<set field="parameters.transValue" from-field="parameters.transValue" type="BigDecimal"/>
            	<calculate type="BigDecimal" field="parameters.transValue" decimal-scale="${uomIdValue.decimalScale}" rounding-mode="HalfUp">
                	<calcop operator="get" field="parameters.transValue"></calcop>
            	</calculate>

            	<set field="parameters.origTransValue" from-field="parameters.origTransValue" type="BigDecimal"/>
            	<calculate type="BigDecimal" field="parameters.origTransValue" decimal-scale="${uomIdValue.decimalScale}" rounding-mode="HalfUp">
                	<calcop operator="get" field="parameters.origTransValue"></calcop>
            	</calculate>
            
            	<set field="parameters.perfAmountCalc" from-field="parameters.perfAmountCalc" type="BigDecimal"/>
            	<calculate type="BigDecimal" field="parameters.perfAmountCalc" decimal-scale="${uomIdValue.decimalScale}" rounding-mode="HalfUp">
                	<calcop operator="get" field="parameters.perfAmountCalc"></calcop>
            	</calculate>            
            </if-not-empty>
        </if-not-empty>
        <set field="parameters.amount" from-field="parameters.transValue" type="Double"/>
        <log level="always" message="*** after decimalScale : parameters.amount/parameters.transValue = ${parameters.amount} parameters.origTransValue = ${parameters.origTransValue} parameters.perfAmountCalc = ${parameters.perfAmountCalc}"></log>
        
        <!-- Bug 4903 punto 2 -->
        <entity-one value-field="gAcc" entity-name="GlAccount">
            <field-map field-name="glAccountId" from-field="glAccountId"/>
        </entity-one>
        <get-related-one relation-name="Uom" to-value-field="gUom" value-field="gAcc"/>

		<!--
			NB: scommentare SOLO per test forzato su unità di misura ad-hoc messa su DB, tabella UOM.
			Per forzare i casi di test limite fare i seguenti inserimenti:
			( select uom_id, min_value, max_value from uom where uom_id like 'MY_%' and uom_type_id = 'OTHER_MEASURE' order by uom_id )

			|uom_id|min_value|max_value|
			____________________________
			|MY_1  |0        |0        |
			|MY_2  |(null)   |(null)   |
			|MY_3  |0        |(null)   |
			|MY_4  |(null)   |0        |			

			NB2: il caso 1 equivale al caso 2: tutti i valori ammessi 
		-->
		<!-- entity-one value-field="gUom" entity-name="Uom">
			<field-map field-name="uomId" value="MY_1"/>
		</entity-one -->

		<!-- Issue GN-5265 (confronto col valore minimo) -->
        <log level="verbose" message="___[workeffortext-services.xml] Evaluating if _${gUom.uomId}_=_${parameters.amount}_ is included in interval [${gUom.minValue},${gUom.maxValue}]" />
        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="gUom"/>
                    </not>
                    <not>
                        <if-empty field="gUom.minValue" />
                    </not>
                    <not>
                        <if-empty field="parameters.amount" />
                    </not>
                    <or>
                    	<!-- Both min & max set to zero mean "all values allowed" -->
						<if-compare field="gUom.minValue" operator="not-equals" value="0" type="Double"/>
						<if-compare field="gUom.maxValue" operator="not-equals" value="0" type="Double"/>
					</or>
 		      		<if-compare-field field="parameters.amount" operator="less" to-field="gUom.minValue" type="Double"/>
 				</and>
 			</condition>
            <then>
        		<log level="always" message="___[workeffortext-services.xml] gUom (min) = _${gUom.minValue}_, parameters.amount = _${parameters.amount}_, value is LESS than minimum" />
               	<add-error>
                    <fail-property resource="WorkeffortExtErrorLabels" property="AmountOutOfUomRange"/>
                </add-error>
         	</then>
         	<else>
        		<log level="verbose" message="___[workeffortext-services.xml] gUom (min) = _${gUom.minValue}_, parameters.amount = _${parameters.amount}_, value is OK with minimum or not evaluable or min and max are both zero or both null" />
         	</else>
 		</if>
 
 		<!-- Issue GN-5265 (confronto col valore massimo) -->
        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="gUom"/>
                    </not>
                    <not>
                        <if-empty field="gUom.maxValue" />
                    </not>
                    <not>
                        <if-empty field="parameters.amount" />
                    </not>
                    <or>
                    	<!-- Both min & max set to zero mean "all values allowed" -->
						<if-compare field="gUom.minValue" operator="not-equals" value="0" type="Double"/>
						<if-compare field="gUom.maxValue" operator="not-equals" value="0" type="Double"/>
					</or>
 		      		<if-compare-field field="parameters.amount" operator="greater" to-field="gUom.maxValue" type="Double"/>
 				</and>
 			</condition>
            <then>
        		<log level="always" message="___[workeffortext-services.xml] gUom (max) = _${gUom.maxValue}_, parameters.amount = _${parameters.amount}_, value is GREATER than maximum" />
               	<add-error>
                    <fail-property resource="WorkeffortExtErrorLabels" property="AmountOutOfUomRange"/>
                </add-error>
         	</then>
         	<else>
        		<log level="verbose" message="___[workeffortext-services.xml] gUom (max) = _${gUom.maxValue}_, parameters.amount = _${parameters.amount}_, value is OK with maximum or not evaluable or min and max are both zero or both null" />
         	</else>
 		</if>
 
        <check-errors/>

        <!-- modifica per STD Movimenti -->
        <if-not-empty field="parameters.acctgTransEntrySeqId">
            <set field="acctgTransEntrySeqId" from-field="parameters.acctgTransEntrySeqId"/>
            <else>
                <sequenced-id sequence-name="AcctgTransEntry" field="acctgTransEntrySeqId"/>
            </else>
        </if-not-empty>
        <set field="acctgTransEntryMap.acctgTransId" value="${resultId.acctgTransId}"/>
        <set field="acctgTransEntryMap.acctgTransEntrySeqId" value="${acctgTransEntrySeqId}"/>
        <set field="acctgTransEntryMap.description" value="${parameters.transDescription}"/>
        <set field="acctgTransEntryMap.descriptionLang" value="${parameters.transDescriptionLang}"/>
        <set field="acctgTransEntryMap.voucherRef" from-field="voucherRef"/>

        <set field="acctgTransEntryMap.debitCreditFlag" value="${glAccount.debitCreditDefault}"/>
        <set field="acctgTransEntryMap.productId" from-field="productId"/>
        <set field="acctgTransEntryMap.isSummary" value="N"/>
        <set field="acctgTransEntryMap.roleTypeId" from-field="entryRoleTypeId"/>
        <set field="acctgTransEntryMap.partyId" from-field="entryPartyId"/>
        <set field="acctgTransEntryMap.hasScoreAlert" value="${parameters.hasScoreAlert}"/>
        <set field="acctgTransEntryMap.glAccountId" from-field="glAccountId"/>
        <set field="acctgTransEntryMap.glAccountFinId" from-field="glAccountFinId"/>


        <set field="acctgTransEntryMap.organizationPartyId" from-field="parameters.defaultOrganizationPartyId"/>
        <set field="acctgTransEntryMap.glAccountTypeId" value="${glAccount.glAccountTypeId}"/>
        <set field="acctgTransEntryMap.origCurrencyUomId" value="${glAccount.defaultUomId}"/>
        <set field="acctgTransEntryMap.emplPositionTypeId" from-field="emplPositionTypeId"/>
        <set field="acctgTransEntryMap.fromDateCompetence" from-field="parameters.fromDateCompetence"/>
        <set field="acctgTransEntryMap.toDateCompetence" from-field="parameters.toDateCompetence"/>

        <set field="acctgTransEntryMap.roleTypeId" from-field="entryRoleTypeId"/>
        <set field="acctgTransEntryMap.partyId" from-field="entryPartyId"/>
        <set field="acctgTransEntryMap.amountLocked" from-field="parameters.amountLocked"/>

        <set field="acctgTransEntryMap.perfAmountActual" from-field="parameters.perfAmountActual"/>
        <set field="acctgTransEntryMap.perfAmountCalc" from-field="parameters.perfAmountCalc" type="Double"/>

        <!-- aggiunto il default per il calcolo del punteggio -->
        <if-compare operator="equals" value="SCORE" field="glAccountId">
            <set field="parameters.currencyUomId" from-field="parameters.currencyUomId" default-value="${glAccount.defaultUomId}"/>
        </if-compare>
        <if-compare operator="equals" value="SCOREKPI" field="glAccountId">
            <set field="parameters.currencyUomId" from-field="parameters.currencyUomId" default-value="${glAccount.defaultUomId}"/>
        </if-compare>

        <!-- viene passato dai parametri -->
        <set field="acctgTransEntryMap.currencyUomId" from-field="parameters.currencyUomId"/>
        
        <!-- modifica sandro: se passato come parametro prende il sopravvento su
            ciò che c'é in tabella -->
        <set field="acctgTransEntryMap.glFiscalTypeId" value="${parameters.glFiscalTypeId}"/>
        
        <set field="acctgTransEntryMap.checkAmount1" from-field="parameters.checkAmount1"/>
        <set field="acctgTransEntryMap.checkAmount2" from-field="parameters.checkAmount2"/>
        <set field="acctgTransEntryMap.checkAmount3" from-field="parameters.checkAmount3"/> 
        <set field="acctgTransEntryMap.textValue1" from-field="parameters.textValue1"/>

        <!-- Sandro: aggiunto controlo di presenza chiave primaria nella entity
            per evitare errore nell'esecuzione della defaultOrchestration sotto, che
            é molto meno leggibile -->
        <set field="glAccountOrganizationMap.organizationPartyId" value="${acctgTransEntryMap.organizationPartyId}"/>
        <set field="glAccountOrganizationMap.glAccountId" value="${acctgTransEntryMap.glAccountId}"/>
        <find-by-primary-key value-field="foundIt" map="glAccountOrganizationMap" entity-name="GlAccountOrganization"/>
        <if-empty field="foundIt">
            <add-error>
                <fail-message message="Manca la chiave primaria in GlAccountOrganization per i seguenti valori, glAccountId: ${acctgTransEntryMap.glAccountId} e organizationPartyId ${acctgTransEntryMap.organizationPartyId}"/>
            </add-error>
        </if-empty>
        <check-errors/>
        
        <log level="info" message="****************************** createWeTrans : acctgTransEntryMap = ${acctgTransEntryMap}"></log>


        <map-to-map map="acctgTransEntryMap" to-map="acctgTransEntryServiceMap.parameters"/>
        <set field="acctgTransEntryServiceMap.entityName" value="AcctgTransEntry"/>
        <set field="acctgTransEntryServiceMap.operation" value="CREATE"/>
        <set field="acctgTransEntryServiceMap.parameters.amount" from-field="parameters.amount" type="Double"/>
        <set field="acctgTransEntryServiceMap.parameters.origAmount" from-field="parameters.origTransValue" type="Double"/>
		<log level="always" message="*** ${acctgTransEntryServiceMap.parameters.currencyUomId} - acctgTransEntryServiceMap.parameters.amount = ${acctgTransEntryServiceMap.parameters.amount} origAmount = ${acctgTransEntryServiceMap.parameters.origAmount} perfAmountCalc = ${acctgTransEntryServiceMap.parameters.perfAmountCalc}"></log>
        
        <set field="acctgTransEntryServiceMap.locale" value="${locale}"/>
        <call-service service-name="crudServiceDefaultOrchestration" in-map-name="acctgTransEntryServiceMap">
            <result-to-field result-name="id" field="resultEntryId"/>
        </call-service>
        <check-errors/>

        <field-to-result field="resultId.acctgTransId" result-name="acctgTransId"/>
        <field-to-result field="resultEntryId.acctgTransEntrySeqId" result-name="acctgTransEntrySeqId"/>
    </simple-method>

    <simple-method method-name="updateWeTrans_fixedGlAccount" short-description="updateWeTrans_fixedGlAccount">

        <entity-one value-field="acctgTrans" entity-name="AcctgTrans"/>
        <entity-one value-field="acctgTransEntry" entity-name="AcctgTransEntry"/>

        <if>
            <condition>
                <and>
                    <if-compare field="parameters.amountLocked" operator="not-equals" value="N"/>
                    <if-compare field="acctgTransEntry.amountLocked" operator="equals" value="Y"/>
                </and>
            </condition>
            <then>
                <add-error>
                    <fail-property resource="WorkeffortExtErrorLabels" property="DeleteWeTrans_notModifiable"/>
                </add-error>
            </then>
        </if>

        <set-nonpk-fields value-field="acctgTrans" map="parameters"/>
        <set-nonpk-fields value-field="acctgTransEntry" map="parameters"/>
        <set field="acctgTrans.description" from-field="parameters.transDescription" set-if-null="true"/>
        <set field="acctgTransEntry.description" from-field="parameters.transEntryDescription" set-if-null="true"/>

        <store-value value-field="acctgTrans"/>
        <store-value value-field="acctgTransEntry"/>
        <check-errors/>
    </simple-method>

    <simple-method method-name="deleteWeTrans" short-description="deleteWeTrans">
        <entity-one value-field="acctgTransEntry" entity-name="AcctgTransEntry">
            <field-map field-name="acctgTransId" from-field="parameters.weTransId"/>
            <field-map field-name="acctgTransEntrySeqId" from-field="parameters.weTransEntryId"/>
        </entity-one>
        <if>
            <condition>
                <and>
                    <if-compare field="parameters.amountLocked" operator="not-equals" value="N"/>
                    <if-compare field="acctgTransEntry.amountLocked" operator="equals" value="Y"/>
                </and>
            </condition>
            <then>
                <add-error>
                    <fail-property resource="WorkeffortExtErrorLabels" property="DeleteWeTrans_notModifiable"/>
                </add-error>
            </then>
        </if>
        <check-errors/>

        <if-compare field="parameters.isObiettivo" operator="not-equals" value="Y">
            <set field="deleteAcctgTransEntryInputMap.acctgTransEntrySeqId" from-field="parameters.weTransEntryId"/>
            <set field="deleteAcctgTransEntryInputMap.acctgTransId" from-field="parameters.weTransId"/>
            <call-service service-name="deleteAcctgTransEntry" in-map-name="deleteAcctgTransEntryInputMap"/>

            <set field="deleteAcctgTransInputMap.acctgTransId" from-field="parameters.weTransId"/>
            <call-service service-name="deleteAcctgTrans" in-map-name="deleteAcctgTransInputMap"/>
            <else>
                <entity-one value-field="acctgTransEntry" entity-name="AcctgTransEntry">
                    <field-map field-name="acctgTransId" from-field="parameters.weTransId"/>
                    <field-map field-name="acctgTransEntrySeqId" from-field="parameters.weTransEntryId"/>
                </entity-one>
                <remove-value value-field="acctgTransEntry"/>
                <entity-one value-field="acctgTrans" entity-name="AcctgTrans">
                    <field-map field-name="acctgTransId" from-field="parameters.weTransId"/>
                </entity-one>
                <remove-value value-field="acctgTrans"/>
            </else>
        </if-compare>

        <check-errors/>
    </simple-method>

    <simple-method method-name="updateWeTrans" short-description="updateWeTrans">
        <set field="updateAcctgTransInputMap.acctgTransId" from-field="parameters.weTransId"/>
        <set field="updateAcctgTransInputMap.voucherDate" from-field="parameters.weTransDate"/>
        <set field="updateAcctgTransInputMap.transactionDate" from-field="parameters.weTransDate"/>

        <call-service service-name="updateAcctgTrans" in-map-name="updateAcctgTransInputMap"/>
        <check-errors/>

        <set field="updateAcctgTransEntryInputMap.acctgTransEntrySeqId" from-field="parameters.weTransEntryId"/>
        <set field="updateAcctgTransEntryInputMap.acctgTransId" from-field="parameters.weTransId"/>
        <set field="updateAcctgTransEntryInputMap.amount" from-field="parameters.weTransValue"/>
        <set field="updateAcctgTransEntryInputMap.description" from-field="parameters.weTransComment"/>
        <set field="updateAcctgTransEntryInputMap.productId" from-field="parameters.weTransProductId"/>
        <set field="updateAcctgTransEntryInputMap.fromDateCompetence" from-field="parameters.fromDateCompetence" type="Timestamp"/>
        <set field="updateAcctgTransEntryInputMap.toDateCompetence" from-field="parameters.toDateCompetence" type="Timestamp"/>

        <call-service service-name="updateAcctgTransEntry" in-map-name="updateAcctgTransEntryInputMap"/>
        <check-errors/>
    </simple-method>

    <simple-method method-name="WorkEffortTransactionView_DateValidation" short-description="WorkEffortTransactionView_DateValidation">
        <set field="parameters" from-field="parameters.parameters"/>

        <entity-one value-field="WEMeasureView" entity-name="WorkEffortMeasureView">
            <field-map field-name="weMeasureId" from-field="parameters.weTransMeasureId"/>
        </entity-one>

        <if-empty field="WEMeasureView">
            <add-error>
                <fail-property resource="WorkeffortExtErrorLabels" property="MeasureNotFound"/>
            </add-error>
            <check-errors/>
            <else>
                <log level="verbose" message="*************************** WEMeasureView.weMeasureFromDate = ${WEMeasureView.weMeasureFromDate}"></log>
                <log level="verbose" message="*************************** WEMeasureView.weMeasureThruDate = ${WEMeasureView.weMeasureThruDate}"></log>
                <log level="verbose" message="*************************** WEMeasureView.dateClosed = ${WEMeasureView.dateClosed}"></log>

                <set field="weTransDate" from-field="parameters.weTransDate" type="Timestamp"/>
                <if>
                    <condition>
                        <or>
                            <not>
                                <if-compare-field field="weTransDate" operator="greater-equals" to-field="WEMeasureView.weMeasureFromDate"/>
                            </not>
                            <not>
                                <if-compare-field field="weTransDate" operator="less-equals" to-field="WEMeasureView.weMeasureThruDate"/>
                            </not>
                            <and>
                                <not>
                                    <if-empty field="WEMeasureView.dateClosed"/>
                                </not>
                                <not>
                                    <if-compare-field field="weTransDate" operator="greater" to-field="WEMeasureView.dateClosed"/>
                                </not>
                            </and>
                        </or>
                    </condition>
                    <then>
                        <add-error>
                            <fail-property resource="WorkeffortExtErrorLabels" property="DateNotMatch"/>
                        </add-error>
                        <check-errors/>
                    </then>
                </if>
            </else>
        </if-empty>

    </simple-method>

    <simple-method method-name="crudServiceOperation_WorkEffortTransactionView" short-description="crudServiceOperation_WorkEffortTransactionView">
        <set field="parameters" from-field="parameters.parameters"/>

        <entity-one value-field="glAccountTmp" entity-name="GlAccount">
            <field-map field-name="glAccountId" from-field="parameters.weTransAccountId"/>
        </entity-one>
        <log level="info" message="#### parameters.organizationId = ${parameters.organizationId} parameters.defaultOrganizationPartyId = ${parameters.defaultOrganizationPartyId}"/>
        <log level="info" message="#### parameters.weTransAccountId = ${parameters.weTransAccountId} with inputEnumId = ${glAccountTmp.inputEnumId}"/>

        <log level="info" message="#### parameters.weTransMeasureId = ${parameters.weTransMeasureId} and parameters.voucherRef = ${parameters.voucherRef}"/>
        <log level="info" message="#### parameters.weTransWeId = ${parameters.weTransWeId}"/>
        <log level="info" message="#### parameters.weTransProductId ${parameters.weTransProductId} - ${parameters.productId} "/>
        
        <log level="info" message="#### parameters.partyId = ${parameters.partyId} parameters.roleTypeId = ${parameters.roleTypeId}"/>
        <log level="info" message="#### parameters.entryPartyId = ${parameters.entryPartyId} parameters.entryRoleTypeId = ${parameters.entryRoleTypeId}"/>
        <log level="info" message="#### parameters.operation = ${parameters.operation}"/>
        <!-- aggiunta gestione origAmount = amount tranne che per update di SCORE -->
        <if-compare operator="equals" field="parameters.operation" value="CREATE">
            <set field="createWeTransInputMap.workEffortMeasureId" from-field="parameters.weTransMeasureId"/>
            <set field="createWeTransInputMap.voucherRef" from-field="parameters.voucherRef"/>
            <set field="createWeTransInputMap.transValue" from-field="parameters.weTransValue" type="Double"/>
            <set field="createWeTransInputMap.origTransValue" from-field="parameters.origTransValue" type="Double"/>
            <set field="createWeTransInputMap.transDescription" from-field="parameters.weTransComment"/>
            <set field="createWeTransInputMap.transDescriptionLang" from-field="parameters.weTransCommentLang"/>
            <set field="createWeTransInputMap.description" from-field="parameters.weTransComments"/>
            <set field="createWeTransInputMap.descriptionLang" from-field="parameters.weTransCommentsLang"/>
            <set field="createWeTransInputMap.acctgTransTypeId" from-field="parameters.acctgTransTypeId"/>
            <set field="createWeTransInputMap.glAccountId" from-field="parameters.weTransAccountId"/>
            <set field="createWeTransInputMap.workEffortId" from-field="parameters.weTransWeId"/>
            <set field="createWeTransInputMap.glFiscalTypeId" from-field="parameters.weTransTypeValueId"/>
            <set field="createWeTransInputMap.fromDateCompetence" from-field="parameters.fromDateCompetence" type="Timestamp"/>
            <set field="createWeTransInputMap.toDateCompetence" from-field="parameters.toDateCompetence" type="Timestamp"/>
            <set field="createWeTransInputMap.roleTypeId" from-field="parameters.roleTypeId"/>
            <set field="createWeTransInputMap.partyId" from-field="parameters.partyId"/>
            <set field="createWeTransInputMap.productId" from-field="parameters.weTransProductId" default-value="${parameters.productId}"/>

            <set field="createWeTransInputMap.entryPartyId" from-field="parameters.entryPartyId"/>
            <set field="createWeTransInputMap.entryRoleTypeId" from-field="parameters.entryRoleTypeId"/>


            <set field="createWeTransInputMap.currencyUomId" from-field="parameters.weTransCurrencyUomId"/>
            <set field="createWeTransInputMap.groupStatusId" from-field="parameters.groupStatusId"/>
            <set field="createWeTransInputMap.amountLocked" from-field="parameters.amountLocked"/>

            <set field="createWeTransInputMap.hasScoreAlert" from-field="parameters.hasScoreAlert"/>
            <set field="createWeTransInputMap.isPosted" from-field="parameters.isPosted"/>

            <!-- bug 4279 weTransDate valorizzato con il thruDate del periodo -->
            <set field="createWeTransInputMap.transDate" from-field="parameters.weTransDate" type="Timestamp"/>
            <if-not-empty field="parameters.customTimePeriodId">
                <entity-one value-field="customTimePeriod" entity-name="CustomTimePeriod">
                    <field-map field-name="customTimePeriodId" from-field="parameters.customTimePeriodId"/>
                </entity-one>
                <set field="createWeTransInputMap.transDate" from-field="customTimePeriod.thruDate" type="Timestamp"/>
            </if-not-empty>

			<!-- GN-67 il valore di amountLocked viene salvato anche nei movimenti
	                relativi agli SCOREKPI, in modo che anche questi siano bloccati o meno -->
	        <if-compare operator="equals" value="SCORE" field="createWeTransInputMap.glAccountId">
	            <set field="lockAmountServiceMap.amountLocked" from-field="createWeTransInputMap.amountLocked"/>
	            <set field="lockAmountServiceMap.transactionDate" from-field="createWeTransInputMap.transDate"/>
	            <set field="lockAmountServiceMap.glFiscalTypeId" from-field="parameters.weTransTypeValueId"/>
	            <set field="lockAmountServiceMap.weId" from-field="parameters.weTransWeId"/>
	            <call-service service-name="lockAmount" in-map-name="lockAmountServiceMap">
	            </call-service>
            </if-compare>

            <!-- motifica per copia movimenti storicizzatiSTD -->
            <set field="createWeTransInputMap.perfAmountCalc" from-field="parameters.perfAmountCalc"/>
            <set field="createWeTransInputMap.perfAmountActual" from-field="parameters.perfAmountActual"/>

            <!-- motifica per STD -->
            <set field="createWeTransInputMap.acctgTransId" from-field="parameters.weTransId"/>
            <set field="createWeTransInputMap.acctgTransEntrySeqId" from-field="parameters.weTransEntryId"/>
            
            <set field="createWeTransInputMap.checkAmount1" from-field="parameters.checkAmount1"/>
            <set field="createWeTransInputMap.checkAmount2" from-field="parameters.checkAmount2"/>
            <set field="createWeTransInputMap.checkAmount3" from-field="parameters.checkAmount3"/> 
            <set field="createWeTransInputMap.textValue1" from-field="parameters.textValue1"/> 
            <set field="createWeTransInputMap.defaultOrganizationPartyId" from-field="parameters.defaultOrganizationPartyId"/>        

            <call-service service-name="createWeTrans" in-map-name="createWeTransInputMap">
                <result-to-field result-name="acctgTransId" field="id.weTransId"/>
                <result-to-field result-name="acctgTransEntrySeqId" field="id.weTransEntryId"/>
            </call-service>
            <check-errors/>
            <set field="id.weTransMeasureId" from-field="parameters.weTransMeasureId"/>
            <field-to-result field="id"/>

            <else>
                <if-compare operator="equals" field="parameters.operation" value="UPDATE">
                    <entity-one value-field="acctgTrans" entity-name="AcctgTrans">
                        <field-map field-name="acctgTransId" from-field="parameters.weTransId"/>
                    </entity-one>
                    <entity-one value-field="acctgTransEntry" entity-name="AcctgTransEntry">
                        <field-map field-name="acctgTransId" from-field="parameters.weTransId"/>
                        <field-map field-name="acctgTransEntrySeqId" from-field="parameters.weTransEntryId"/>
                    </entity-one>

                    <!-- caso 4373: cambio valore isPosted per permetter modifica da mappa
                        "Obiettivi" e poi in caso rimetto a Y se da input arriva Y -->
                    <if-compare operator="equals" field="parameters.isObiettivo" value="Y">
                        <entity-one value-field="acctgTransToStore" entity-name="AcctgTrans">
                            <field-map field-name="acctgTransId" from-field="parameters.weTransId"/>
                        </entity-one>
                        <set field="acctgTransToStore.isPosted" value="N"/>
                        <store-value value-field="acctgTransToStore"/>
                    </if-compare>

                    <!-- DELETE -->
                    <set field="deleteWeTransInputMap.weTransEntryId" from-field="parameters.weTransEntryId"/>
                    <set field="deleteWeTransInputMap.weTransId" from-field="parameters.weTransId"/>
                    <set field="deleteWeTransInputMap.amountLocked" from-field="parameters.amountLocked"/>
                    <call-service service-name="deleteWeTrans" in-map-name="deleteWeTransInputMap">
                    </call-service>
                    <check-errors/>

                    <set field="currentLocale" from-field="locale"/>
                    <set field="currentTimeZone" from-field="timeZone"/>

                    <!-- bug 4279 weTransValue valorizzato con il thruDate del periodo -->
                    <set field="createWeTransInputMap.transDate" from-field="parameters.weTransDate" type="Timestamp"/>
                    <if-not-empty field="parameters.customTimePeriodId">
                        <entity-one value-field="customTimePeriod" entity-name="CustomTimePeriod">
                            <field-map field-name="customTimePeriodId" from-field="parameters.customTimePeriodId"/>
                        </entity-one>
                        <set field="thruDate" from-field="customTimePeriod.thruDate"/>
                    </if-not-empty>

                    <!-- CREATE -->
                    <call-bsh>
		              <![CDATA[ 
		                  createWeTransInputMap = new java.util.HashMap();
		                  createWeTransInputMap.put("workEffortMeasureId", parameters.get("weTransMeasureId"));
		                  
                          if (parameters.containsKey("voucherRef")) {
                              createWeTransInputMap.put("voucherRef", parameters.get("voucherRef"));
                          } else {
                              createWeTransInputMap.put("voucherRef", acctgTransEntry.get("voucherRef"));
                          }
                          
		                  if(parameters.containsKey("customTimePeriodId")){
		                  	  createWeTransInputMap.put("transDate", thruDate);
		                  }else if (parameters.containsKey("weTransDate")) {
                              createWeTransInputMap.put("transDate", parameters.get("weTransDate"));
                          } else {
                              createWeTransInputMap.put("transDate", acctgTrans.get("transactionDate"));
                          }
                          if (parameters.containsKey("weTransComment")) {
                              createWeTransInputMap.put("transDescription", parameters.get("weTransComment"));
                          } else {
                              createWeTransInputMap.put("transDescription", acctgTransEntry.get("description"));
                          }                         
                          if (parameters.containsKey("weTransCommentLang")) {
                              createWeTransInputMap.put("transDescriptionLang", parameters.get("weTransCommentLang"));
                          } else {
                              createWeTransInputMap.put("transDescriptionLang", acctgTransEntry.get("descriptionLang"));
                          }                          
                          if (parameters.containsKey("acctgTransTypeId")) {
                              createWeTransInputMap.put("acctgTransTypeId", parameters.get("acctgTransTypeId"));
                          } else {
                              createWeTransInputMap.put("acctgTransTypeId", acctgTrans.get("acctgTransTypeId"));
                          }
		                  if (parameters.containsKey("weTransAccountId")) {
                              createWeTransInputMap.put("glAccountId", parameters.get("weTransAccountId"));
                          } else {
                              createWeTransInputMap.put("glAccountId", acctgTransEntry.get("glAccountId"));
                          }
                          if (parameters.containsKey("weTransValue")) {
                              if (org.ofbiz.base.util.UtilValidate.isNotEmpty(parameters.get("weTransValue"))) {
                                  createWeTransInputMap.put("transValue", parameters.get("weTransValue"));
                              }
		                  } else {
		                      createWeTransInputMap.put("transValue", acctgTransEntry.get("origAmount"));
		                  }
		                  if (parameters.containsKey("origTransValue")) {
		                      createWeTransInputMap.put("origTransValue", parameters.get("origTransValue"));
		                  } else if("SCORE".equals(parameters.get("weTransAccountId"))){
		                  	  createWeTransInputMap.put("origTransValue", acctgTransEntry.get("origAmount"));
		                  } else {
		                  	  createWeTransInputMap.put("origTransValue", createWeTransInputMap.get("transValue"));
		                  }
		                  if (parameters.containsKey("weTransWeId")) {
                              createWeTransInputMap.put("workEffortId", parameters.get("weTransWeId"));
                          } else {
                              createWeTransInputMap.put("workEffortId", acctgTrans.get("workEffortId"));
                          }
                          if (parameters.containsKey("weTransTypeValueId")) {
                              createWeTransInputMap.put("glFiscalTypeId", parameters.get("weTransTypeValueId"));
                          } else {
                              createWeTransInputMap.put("glFiscalTypeId", acctgTrans.get("glFiscalTypeId"));
                          }
                          if (parameters.containsKey("fromDateCompetence")) {
                              createWeTransInputMap.put("fromDateCompetence", org.ofbiz.base.util.ObjectType.simpleTypeConvert(parameters.get("fromDateCompetence"), "Timestamp", null, null, locale, true));
                          } else {
                              createWeTransInputMap.put("fromDateCompetence", org.ofbiz.base.util.ObjectType.simpleTypeConvert(acctgTransEntry.get("fromDateCompetence"), "Timestamp", null, null, locale, true));
                          }
                          if (parameters.containsKey("toDateCompetence")) {
                              createWeTransInputMap.put("toDateCompetence", org.ofbiz.base.util.ObjectType.simpleTypeConvert(parameters.get("toDateCompetence"), "Timestamp", null, null, locale, true));
                          } else {
                              createWeTransInputMap.put("toDateCompetence", org.ofbiz.base.util.ObjectType.simpleTypeConvert(acctgTransEntry.get("toDateCompetence"), "Timestamp", null, null, locale, true) );
                          }
                          if (parameters.containsKey("roleTypeId")) {
                              createWeTransInputMap.put("roleTypeId", parameters.get("roleTypeId"));
                          } else {
                              createWeTransInputMap.put("roleTypeId", acctgTrans.get("roleTypeId"));
                          }
                          if (parameters.containsKey("partyId")) {
                              createWeTransInputMap.put("partyId", parameters.get("partyId"));
                          } else {
                              createWeTransInputMap.put("partyId", acctgTrans.get("partyId"));
                          }
                          if (parameters.containsKey("weTransProductId")) {
                              createWeTransInputMap.put("productId", parameters.get("weTransProductId"));
                          } else {
                              createWeTransInputMap.put("productId", acctgTransEntry.get("productId"));
                          }
                          if (parameters.containsKey("entryPartyId")) {
                              createWeTransInputMap.put("entryPartyId", parameters.get("entryPartyId"));
                          } else {
                              createWeTransInputMap.put("entryPartyId", acctgTransEntry.get("partyId"));
                          }
                          if (parameters.containsKey("entryRoleTypeId")) {
                              createWeTransInputMap.put("entryRoleTypeId", parameters.get("entryRoleTypeId"));
                          } else {
                              createWeTransInputMap.put("entryRoleTypeId", acctgTransEntry.get("roleTypeId"));
                          }
                          if (parameters.containsKey("weTransComments")) {
                              createWeTransInputMap.put("description", parameters.get("weTransComments"));
                          } else {
                              createWeTransInputMap.put("description", acctgTrans.get("description"));
                          }                         
                          if (parameters.containsKey("weTransCommentsLang")) {
                              createWeTransInputMap.put("descriptionLang", parameters.get("weTransCommentsLang"));
                          } else {
                              createWeTransInputMap.put("descriptionLang", acctgTrans.get("descriptionLang"));
                          }                                                    
                          createWeTransInputMap.put("currencyUomId", parameters.get("weTransCurrencyUomId"));
		                  
		                  if (parameters.containsKey("isPosted")) {
                              createWeTransInputMap.put("isPosted", parameters.get("isPosted"));
                          } else {
                              createWeTransInputMap.put("isPosted", acctgTrans.get("isPosted"));
                          }
		                  
		                  if (parameters.containsKey("groupStatusId")) {
                              createWeTransInputMap.put("groupStatusId", parameters.get("groupStatusId"));
                          } else {
                              createWeTransInputMap.put("groupStatusId", acctgTrans.get("groupStatusId"));
                          }
		                  
		                  if (parameters.containsKey("amountLocked")) {
		                      createWeTransInputMap.put("amountLocked", parameters.get("amountLocked"));
		                  }
		                  else {
		                      createWeTransInputMap.put("amountLocked", acctgTransEntry.get("amountLocked"));
		                  }
		                  
		                  if (parameters.containsKey("perfAmountCalc")) {
		                      createWeTransInputMap.put("perfAmountCalc", parameters.get("perfAmountCalc"));
		                  }
		                  else {
		                      createWeTransInputMap.put("perfAmountCalc", acctgTransEntry.get("perfAmountCalc"));
		                  }
		                  if (parameters.containsKey("perfAmountActual")) {
		                      createWeTransInputMap.put("perfAmountActual", parameters.get("perfAmountActual"));
		                  }
		                  else {
		                      createWeTransInputMap.put("perfAmountActual", acctgTransEntry.get("perfAmountActual"));
		                  }
		                  
		                  if (parameters.containsKey("checkAmount1")) {
                              createWeTransInputMap.put("checkAmount1", parameters.get("checkAmount1"));
                          } else {
                              createWeTransInputMap.put("checkAmount1", acctgTransEntry.get("checkAmount1"));
                          }	
		                  if (parameters.containsKey("checkAmount2")) {
                              createWeTransInputMap.put("checkAmount2", parameters.get("checkAmount2"));
                          } else {
                              createWeTransInputMap.put("checkAmount2", acctgTransEntry.get("checkAmount2"));
                          }
		                  if (parameters.containsKey("checkAmount3")) {
                              createWeTransInputMap.put("checkAmount3", parameters.get("checkAmount3"));
                          } else {
                              createWeTransInputMap.put("checkAmount3", acctgTransEntry.get("checkAmount3"));
                          }  
		                  if (parameters.containsKey("textValue1")) {
                              createWeTransInputMap.put("textValue1", parameters.get("textValue1"));
                          } else {
                              createWeTransInputMap.put("textValue1", acctgTransEntry.get("textValue1"));
                          }                                               	                  
		                  
		                  result = new java.util.HashMap();
		                  result.put("createWeTransInputMap", createWeTransInputMap);
		                  
		                  return result;
		              ]]>
                    </call-bsh>

                    <!-- motifica per STD -->
                    <set field="createWeTransInputMap.acctgTransId" from-field="parameters.acctgTransId"/>
                    <set field="createWeTransInputMap.acctgTransEntrySeqId" from-field="parameters.acctgTransEntrySeqId"/>

                    <log message="### createWeTransInputMap.origTransValue ${createWeTransInputMap.origTransValue} " level="verbose"/>

                    <!-- reset del tipo del dato a Double -->
                    <set field="createWeTransInputMap.origTransValue" from-field="createWeTransInputMap.origTransValue" type="Double"/>
                    <set field="createWeTransInputMap.defaultOrganizationPartyId" from-field="parameters.defaultOrganizationPartyId"/> 

                    <log level="verbose" message="****************************** : createWeTransInputMap.origTransValue = ${createWeTransInputMap.origTransValue}"></log>                  

                    <call-service service-name="createWeTrans" in-map-name="createWeTransInputMap">
                        <result-to-field result-name="acctgTransId" field="id.weTransId"/>
                        <result-to-field result-name="acctgTransEntrySeqId" field="id.weTransEntryId"/>
                    </call-service>
                    <check-errors/>

					<if-not-empty field="parameters.weTransIdKpiScore">
						<!-- Sblocco o Blocco eventuale specifico movimento di kpiScore,
						    inoltre aggiorno Valore, Commenti, Riferimenti solo se movimento non gia bloccato -->
						<entity-one value-field="acctgTransEntryKpiScore" entity-name="AcctgTransEntry">
	                        <field-map field-name="acctgTransId" from-field="parameters.weTransIdKpiScore"/>
	                        <field-map field-name="acctgTransEntrySeqId" from-field="parameters.weTransEntryIdKpiScore"/>
	                    </entity-one>
	                    <entity-one value-field="acctgTransKpiScore" entity-name="AcctgTrans">
	                        <field-map field-name="acctgTransId" from-field="parameters.weTransIdKpiScore"/>
	                    </entity-one>
                     	<if>
				            <condition>
			                    <or>
				                    <if-compare-field to-field="parameters.weTransValueKpiScore" field="acctgTransEntryKpiScore.amount"  operator="not-equals" type="Double" />
				                    <if-compare-field to-field="acctgTransEntryKpiScore.amountLocked" field="parameters.amountLocked"  operator="not-equals"/>
				                    <if-compare-field to-field="acctgTransEntryKpiScore.description" field="parameters.weTransCommentKpiScore"  operator="not-equals"/>
				                    <if-compare-field to-field="acctgTransKpiScore.description" field="parameters.weTransCommentsKpiScore"  operator="not-equals"/>
			                    </or>
				            </condition>
				            <then>
			                    <if>
					            	<condition>
						            	<and>
						        			<if-compare field="parameters.amountLockedKpiScore" operator="not-equals" value="N"/>
						                    <if-compare field="acctgTransEntryKpiScore.amountLocked" operator="equals" value="Y"/>
						                </and>
					                </condition>
						            <then>
						                <add-error>
						                    <fail-property resource="WorkeffortExtErrorLabels" property="DeleteWeTrans_notModifiable"/>
						                </add-error>
						                <check-errors/>
						            </then>
						            <else>
						            	<if-compare-field field="parameters.amountLockedKpiScore" operator="not-equals" to-field="acctgTransEntryKpiScore.amountLocked">
				                    		<set field="acctgTransEntryKpiScore.amountLocked" from-field="parameters.amountLockedKpiScore" />
				                    		<else>
				                    			<set field="acctgTransEntryKpiScore.amountLocked" value="Y"/>
				                    		</else>
				                    	</if-compare-field>
					                    
					                    <set field="acctgTransEntryKpiScore.amount" from-field="parameters.weTransValueKpiScore" type="Double"/>
				                    	<set field="acctgTransEntryKpiScore.description" from-field="parameters.weTransCommentKpiScore"/>
				                    	<store-value value-field="acctgTransEntryKpiScore"/>
				                    	<check-errors/>
				                    	
				                    	<set field="acctgTransKpiScore.description" from-field="parameters.weTransCommentsKpiScore"/>
				                    	<store-value value-field="acctgTransKpiScore"/>
				                    	<check-errors/>
				                    </else>
				                </if>
					        </then>
				        </if>
                    </if-not-empty>
                    
                    <log level="always" message="****************************** : createWeTransInputMap.amountLocked = ${createWeTransInputMap.amountLocked}"></log>
                    <!-- GN-67 il valore di amountLocked viene salvato anche nei movimenti
	                relativi agli SCOREKPI, in modo che anche questi siano bloccati o meno -->
			        <if-compare operator="equals" value="SCORE" field="createWeTransInputMap.glAccountId">
			            <set field="lockAmountServiceMap.amountLocked" from-field="createWeTransInputMap.amountLocked"/>
			            <set field="lockAmountServiceMap.transactionDate" from-field="createWeTransInputMap.transDate"/>
			            <set field="lockAmountServiceMap.glFiscalTypeId" from-field="parameters.weTransTypeValueId"/>
			            <set field="lockAmountServiceMap.weId" from-field="parameters.weTransWeId"/>
			            <call-service service-name="lockAmount" in-map-name="lockAmountServiceMap">
			            </call-service>
		            </if-compare>
		            
                    <set field="id.weTransMeasureId" from-field="parameters.weTransMeasureId"/>
                    <field-to-result field="id"/>
                    <else>
                    	<log level="always" message="****************************** : CANCELLA parameters.operation ${parameters.operation}"></log>
                    
                        <if-compare operator="equals" field="parameters.operation" value="DELETE">
                            <set field="deleteWeTransInputMap.weTransEntryId" from-field="parameters.weTransEntryId"/>
                            <set field="deleteWeTransInputMap.weTransId" from-field="parameters.weTransId"/>
                            <set field="deleteWeTransInputMap.amountLocked" from-field="parameters.amountLocked"/>
                            <set field="deleteWeTransInputMap.isObiettivo" from-field="parameters.isObiettivo"/>
                            <call-service service-name="deleteWeTrans" in-map-name="deleteWeTransInputMap">
                            </call-service>
                            <check-errors/>
                            
	                         <if>
	                         	<condition>
	                         		<not>
	                         			<if-empty field="parameters.weTransIdKpiScore"/>
	                         		</not>
	                         	</condition>
	                         	<then>
	                         		<set field="deleteWeTransKpiScoreInputMap.weTransEntryId" from-field="parameters.weTransEntryIdKpiScore"/>
		                            <set field="deleteWeTransKpiScoreInputMap.weTransId" from-field="parameters.weTransIdKpiScore"/>
		                            <set field="deleteWeTransKpiScoreInputMap.amountLocked" from-field="parameters.amountLockedKpiScore"/>
		                            <set field="deleteWeTransKpiScoreInputMap.isObiettivo" from-field="parameters.isObiettivo"/>
		                            <call-service service-name="deleteWeTrans" in-map-name="deleteWeTransKpiScoreInputMap">
		                            </call-service>
		                            <check-errors/>
	                         	</then>
	                        </if>
                        </if-compare>
                    </else>
                </if-compare>
            </else>
        </if-compare>
    </simple-method>

    <simple-method method-name="updateWorkEffortAssoc" short-description="updateWorkEffortAssoc">
        <!-- Read entity to change -->
        <set field="keysMap.workEffortIdFrom" from-field="parameters.originalKeys.workEffortIdFrom"/>

        <if-compare-field operator="not-equals" field="keysMap.workEffortIdFrom" to-field="parameters.parentKeys.workEffortId">
            <set field="keysMap.workEffortIdTo" from-field="parameters.originalKeys.workEffortIdTo"/>
            <set field="keysMap.workEffortAssocTypeId" from-field="parameters.originalKeys.workEffortAssocTypeId"/>
            <set field="keysMap.fromDate" from-field="parameters.originalKeys.fromDate" type="Timestamp"/>

            <set field="readMap.entityName" value="WorkEffortAssoc"/>
            <set field="readMap.operation" value="READ"/>
            <set field="readMap.parameters" from-field="keysMap"/>
            <call-service service-name="crudServiceDefaultOrchestration" in-map-name="readMap">
                <result-to-field result-name="retValues" field="retValues"/>
            </call-service>
            <check-errors/>

            <!-- Check if i have something to do -->
            <if-not-empty field="retValues">
                <now-timestamp field="nowTimestamp"/>

                <!-- before delete old GenericValue, clone it -->
                <first-from-list entry="gv" list="retValues"/>

                <log level="verbose" message="******************** gv.workEffortIdFrom = ${gv.workEffortIdFrom}"/>
                <log level="verbose" message="******************** gv.workEffortIdTo = ${gv.workEffortIdTo}"/>
                <log level="verbose" message="******************** gv.fromDate = ${gv.fromDate}"/>
                <log level="verbose" message="******************** gv.workEffortAssocTypeId = ${gv.workEffortAssocTypeId}"/>

                <clone-value new-value-field="newValue" value-field="gv"/>

                <!-- Delete Old PartyRelationship -->
                <make-value value-field="delPkMap" entity-name="WorkEffortAssoc"/>
                <set-pk-fields value-field="delPkMap" map="gv"/>
                <set field="delPkMap.thruDate" from-field="parameters.defaultValueMap.modifiedDate" type="Timestamp"/>
                <if-empty field="delPkMap.thruDate">
                    <set field="delPkMap.thruDate" from-field="nowTimestamp" type="Timestamp"/>
                    <else>
                        <set field="diff" value="-1" type="Double"/>
                        <call-class-method method-name="addDaysToTimestamp" class-name="org.ofbiz.base.util.UtilDateTime" ret-field="delPkMap.thruDate">
                            <field field="delPkMap.thruDate" type="Timestamp"/>
                            <field field="diff" type="Double"/>
                        </call-class-method>
                    </else>
                </if-empty>
                <log level="verbose" message="value to delete = ${delPkMap}"></log>
                <set field="deleteMap.entityName" value="WorkEffortAssoc"/>
                <set field="deleteMap.operation" value="UPDATE"/>
                <set field="deleteMap.parameters" from-field="delPkMap"/>
                <call-service service-name="crudServiceDefaultOrchestration" in-map-name="deleteMap"/>
                <check-errors/>

                <set field="newValue.workEffortIdFrom" from-field="parameters.parentKeys.workEffortIdTo"/>

                <set field="newValue.fromDate" from-field="parameters.defaultValueMap.modifiedDate" type="Timestamp"/>
                <log level="verbose" message="parameters.defaultValueMap.modifiedDate = ${parameters.defaultValueMap.modifiedDate}"></log>


                <if-empty field="newValue.fromDate">
                    <set field="newValue.fromDate" from-field="nowTimestamp" type="Timestamp"/>
                </if-empty>

                <log level="verbose" message="value to insert = ${newValue}"></log>
                <set field="insertMap.entityName" value="WorkEffortAssoc"/>
                <set field="insertMap.operation" value="CREATE"/>
                <set field="insertMap.parameters" from-field="newValue"/>
                <call-service service-name="crudServiceDefaultOrchestration" in-map-name="insertMap">
                    <result-to-field result-name="retValues"/>
                    <result-to-field result-name="id"/>
                </call-service>
                <check-errors/>
                <log level="verbose" message="**************************************** retValues = ${retValues}"></log>
                <log level="verbose" message="**************************************** id = ${id}"></log>
                <field-to-result field="id"/>
                <field-to-result field="retValues"/>

            </if-not-empty>
        </if-compare-field>
    </simple-method>

    <!-- Bug 4591 -->
    <simple-method method-name="crudServiceEpilog_WorkEffortMeasure" short-description="crudServiceEpilog_WorkEffortMeasure">
        <call-class-method class-name="com.mapsengineering.base.events.LanguageLocaleEvent" method-name="isPrimaryLanguage" ret-field="isPrimaryLang">
			<field field="locale" type="java.util.Locale"/>
		</call-class-method>
        <log level="always" message="###### crudServiceEpilog_WorkEffortMeasure isPrimaryLang ${isPrimaryLang}"/>
        <set field="parameters" from-field="parameters.parameters"/>

        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="parameters.workEffortId"/>
                    </not>
                    <if-compare field="parameters.accountTypeEnumId" operator="equals" value="INDICATOR"/>
                </and>
            </condition>
            <then>
                <entity-one value-field="workEffort" entity-name="WorkEffort">
                    <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
                </entity-one>
                <get-related-one relation-name="WorkEffortType" to-value-field="workEffortType" value-field="workEffort"/>
                <if>
                    <condition>
                        <and>
                            <if-compare field="workEffortType.weightKpiControlSum" operator="not-equals" value="0" type="Double"/>
                            <not>
                                <if-empty field="workEffortType.weightKpiControlSum"/>
                            </not>
                        </and>
                    </condition>
                    <then>
                        <entity-condition list="workEffortMeasureList" entity-name="WorkEffortMeasure" filter-by-date="false" use-cache="false">
                            <condition-list>
                                <condition-expr field-name="workEffortId" from-field="parameters.workEffortId"/>
                                <condition-expr field-name="weMeasureTypeEnumId" value="WEMT_PERF"/>
                            </condition-list>
                        </entity-condition>

                        <set field="weightKpiControlSum" value="0" type="Double"/>
                        <set field="kpiScoreWeight" from-field="parameters.kpiScoreWeight"/>

                        <iterate entry="workEffortMeasure" list="workEffortMeasureList">
                            <calculate field="weightKpiControlSum" type="Double">
                                <calcop operator="add" field="weightKpiControlSum">
                                    <calcop operator="get" field="workEffortMeasure.kpiScoreWeight"/>
                                </calcop>
                            </calculate>
                        </iterate>

                        <set field="weightKpiControlSumWET" from-field="workEffortType.weightKpiControlSum" type="Double" default-value="0"/>
                        <call-class-method method-name="compare" class-name="java.lang.Double" ret-field="comparison">
                            <field field="weightKpiControlSum" type="double"/>
                            <field field="weightKpiControlSumWET" type="double"/>
                        </call-class-method>
                        <if-compare field="comparison" operator="not-equals" value="0" type="Integer">
                            <if>
                                <condition>
                                    <if-compare operator="equals" value="Y" field="parameters.checkAllHierarchy"/>
                                </condition>
                                <then>
                                    <!-- parent -->
                                    <entity-one value-field="workEffortParent" entity-name="WorkEffort" use-cache="true">
                                    	<field-map field-name="workEffortId" from-field="workEffort.workEffortParentId"/>
                                    </entity-one>
                                    
                                    <property-to-field resource="WorkeffortExtErrorLabels" property="WorkEffortAsscoWeightKpiControlSumErrorCheckAllHierarchy" field="errorMsg"/>
						            <if-compare-field operator="not-equals" field="workEffort.workEffortId" to-field="workEffort.workEffortParentId">
								        <set field="errorMsgPrefix" value=" (${workEffort.workEffortName})"/>
									    <if>
									    	<condition>
									    		<and>
									    			<if-compare field="isPrimaryLang" value="false" operator="equals" type="Boolean"/>
									    			<not><if-empty field="workEffort.workEffortNameLang"></if-empty></not>
									    		</and>
									    	</condition>
									    	<then>
									    		<set field="errorMsgPrefix" value=" (${workEffort.workEffortNameLang})"/> <!-- obiettivo Polo Scientifico -->
								        	</then>
									    </if>
						            </if-compare-field>
						            <string-append suffix="&lt;br&gt;" string="${errorMsg}" field="errorMsgPrefix"/>
                                
                                    <add-error>
                                        <fail-message message="${errorMsgPrefix}"/>
                                    </add-error>
                                </then>
                                <else>
                                    <add-error>
                                        <fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortMeasureWeightKpiControlSumErrorValue"/>
                                    </add-error>
                                </else>
                            </if>
                        </if-compare>
                    </then>
                </if>
            </then>
        </if>
        <!-- error_list popolato perche' il servizio e' invocato anche alsalvataggio della workEffortAssoc, 
		errorMsg contiene il messaggi odi errrore quando questo e' invocato dal servizio di controllo stato -->
        <if-not-empty field="error_list">
			<first-from-list entry="error_list_0" list="error_list"/>
			<set field="errorMsg" from-field="error_list_0"/>
			<field-to-result field="errorMsg"/>
		</if-not-empty>
		<log level="always" message="### errorMsg = ${errorMsg}"/>	
    </simple-method>


    <!-- WorkEffortMeasure -->
    <simple-method method-name="crudServiceOperation_WorkEffortMeasure" short-description="crudServiceOperation_WorkEffortMeasure">
        <set field="parametersCrud" from-field="parameters"/>
        <set field="parameters" from-field="parameters.parameters"/>

        <entity-one value-field="workEffort" entity-name="WorkEffort"/>
        <if-empty field="parameters.glAccountId">
            <if-not-empty field="parameters.accountReference">
                <entity-one value-field="glAccount" entity-name="GlAccount" auto-field-map="false">
                    <field-map field-name="glAccountId" from-field="parameters.accountReference"/>
                </entity-one>           
            </if-not-empty>
            <if-not-empty field="parameters.ccountReferenceUO">
                <entity-one value-field="glAccount" entity-name="GlAccount" auto-field-map="false">
                    <field-map field-name="glAccountId" from-field="parameters.ccountReferenceUO"/>
                </entity-one>           
            </if-not-empty>            
        <else>
            <entity-one value-field="glAccount" entity-name="GlAccount"/>
        </else>
        </if-empty>

        <entity-one value-field="uom" entity-name="Uom">
            <field-map field-name="uomId" from-field="glAccount.defaultUomId"/>
        </entity-one>
        <entity-one value-field="workEffortType" entity-name="WorkEffortType">
            <field-map field-name="workEffortTypeId" from-field="workEffort.workEffortTypeId"/>
        </entity-one>

        <if-compare field="parametersCrud.operation" operator="equals" value="CREATE">
        
            <if>
                <condition>
                    <and>
                        <if-empty field="parameters.accountReference"/>
                        <if-empty field="parameters.accountReferenceUO"/>
                        <if-empty field="parameters.glAccountId"/>
                    </and>
                </condition>
                <then>
                    <add-error>
                        <fail-property resource="WorkeffortExtErrorLabels" property="TransactionIndicatorMissing"/>
                    </add-error>
                    <check-errors/>
                </then>
            </if>
            
            <if>
                <condition>
                    <and>
                        <or>
                            <not>
                                <if-empty field="parameters.accountReference"/>
                            </not>
                            <not>
                                <if-empty field="parameters.accountReferenceUO"/>
                            </not>                            
                        </or>
                        <not>
                            <if-empty field="parameters.glAccountId"/>
                        </not>
                    </and>
                </condition>
                <then>
                    <add-error>
                        <fail-property resource="WorkeffortExtErrorLabels" property="TransactionIndicatorReferenceNotBoth"/>
                    </add-error>
                    <check-errors/>
                </then>                
            </if>

            <if-empty field="parameters.sequenceId">
                <set field="parameters.sequenceId" value="1"/>
            </if-empty>
            
            <if-empty field="parameters.fromDate">
                <set field="parameters.fromDate" from-field="workEffort.estimatedStartDate" type="Timestamp"/>
                <else>
                    <set field="parameters.fromDate" from-field="parameters.fromDate" type="Timestamp"/>
                </else>
            </if-empty>
            <if-empty field="parameters.thruDate">
                <set field="parameters.thruDate" from-field="workEffort.estimatedCompletionDate" type="Timestamp"/>
                <else>
                    <set field="parameters.thruDate" from-field="parameters.thruDate" type="Timestamp"/>
                </else>
            </if-empty>

            <!-- gn 266 gestione campo weOtherGoalEnumId -->
            <if-empty field="parameters.weOtherGoalEnumId">
                <set field="parameters.weOtherGoalEnumId" value="WEMOMG_NONE"/>

                <if-not-empty field="glAccount">
                    <if-compare operator="equals" value="Y" field="glAccount.detectOrgUnitIdFlag">
                        <!-- in realta' la gestione del WEMOMG_ORG non deve essere piu' utilizzata:
            			per sapere se il movimento va memorizzato con l'unita' organizzativa del workeffort, 
            			ci si basa sul valore di detectOrgUnitIdFlag -->
                 		<set field="parameters.weOtherGoalEnumId" value="WEMOMG_ORG"/>
                    </if-compare>
                </if-not-empty>
            </if-empty>
            
            <if-empty field="parameters.periodTypeId">
                <set field="parameters.periodTypeId" from-field="glAccount.periodTypeId"/>
            </if-empty>
            <if-empty field="parameters.periodTypeId">
                <set field="parameters.periodTypeId" from-field="workEffortType.periodTypeId"/>
            </if-empty>
            
            <if>
                <condition>
                    <and>
                        <if-empty field="parameters.accountReference"/>
                        <if-empty field="parameters.accountReferenceUO"/>
                    </and>
                </condition>
                <then>
            		<if-compare operator="equals" value="WEMT_PERF" field="parameters.weMeasureTypeEnumId">
                		<if-empty field="parameters.kpiScoreWeight">
                    		<set field="parameters.kpiScoreWeight" value="100" type="Double"/>
                		</if-empty>
                		<if-empty field="parameters.kpiOtherWeight">
                    		<set field="parameters.kpiOtherWeight" value="100" type="Double"/>
                		</if-empty>
                
                		<else>
                    		<if-empty field="parameters.kpiScoreWeight">
                        		<set field="parameters.kpiScoreWeight" value="0" type="Double"/>
                    		</if-empty>
                    		<if-empty field="parameters.kpiOtherWeight">
                        		<set field="parameters.kpiOtherWeight" value="0" type="Double"/>
                    		</if-empty>
                		</else>           
            		</if-compare>                 
                </then>
            </if>
            
            <if-not-empty field="parameters.accountReference">
                <set field="parameters.glAccountId" from-field="parameters.accountReference"/>              
                <entity-condition list="accountReferenceList" entity-name="AccountReferenceView">
                    <condition-list>
                        <condition-expr field-name="glAccountId" from-field="parameters.accountReference"/>
                        <condition-expr field-name="workEffortId" from-field="parameters.workEffortId"/>
                        <condition-expr field-name="contentId" from-field="parameters.contentId"/>
                        <condition-expr field-name="glAccountIdRef" from-field="parameters.glAccountIdRef"/>
                    </condition-list>
                </entity-condition>
                <first-from-list entry="accountReferenceItem" list="accountReferenceList"/>
                <if-empty field="parameters.uomDescr">
                    <if-not-empty field="accountReferenceItem">
                        <set field="parameters.uomDescr" from-field="accountReferenceItem.accountName"/>
                    </if-not-empty>
                </if-empty>
                <if-empty field="parameters.uomDescrLang">
                    <if-not-empty field="accountReferenceItem">
                        <set field="parameters.uomDescrLang" from-field="accountReferenceItem.accountNameLang"/>
                    </if-not-empty>
                </if-empty>
                <if-not-empty field="accountReferenceItem">
                	<if-empty field="parameters.kpiScoreWeight">
                		<set field="parameters.kpiScoreWeight" from-field="accountReferenceItem.kpiScoreWeight" type="Double"/>
                	</if-empty>
                	<if-empty field="parameters.kpiOtherWeight">
                		<set field="parameters.kpiOtherWeight" from-field="accountReferenceItem.kpiOtherWeight" type="Double"/>
                	</if-empty>                	
                </if-not-empty> 
                
                <if-not-empty field="glAccount">
                    <set field="parameters.detailEnumId" from-field="glAccount.detailEnumId"/>
                    <set field="parameters.weMeasureTypeEnumId" from-field="glAccount.weMeasureTypeEnumId"/>
                    <set field="parameters.weScoreRangeEnumId" from-field="glAccount.weScoreRangeEnumId"/>
                    <set field="parameters.weScoreConvEnumId" from-field="glAccount.weScoreConvEnumId"/>
                    <set field="parameters.weAlertRuleEnumId" from-field="glAccount.weAlertRuleEnumId"/>
                    <set field="parameters.weWithoutPerf" from-field="glAccount.weWithoutPerf"/>
                </if-not-empty>             
            </if-not-empty>
            
            <if-not-empty field="parameters.accountReferenceUO">
                <set field="parameters.glAccountId" from-field="parameters.accountReferenceUO"/>              
                <entity-condition list="accountReferenceUOList" entity-name="AccountReferenceUOView">
                    <condition-list>
                        <condition-expr field-name="glAccountId" from-field="parameters.accountReferenceUO"/>
                        <condition-expr field-name="workEffortId" from-field="parameters.workEffortId"/>
                        <condition-expr field-name="contentId" from-field="parameters.contentId"/>
                        <condition-expr field-name="glAccountIdRef" from-field="parameters.glAccountIdRef"/>
                    </condition-list>
                </entity-condition>
                <first-from-list entry="accountReferenceUOItem" list="accountReferenceUOList"/>
                <if-empty field="parameters.uomDescr">
                    <if-not-empty field="accountReferenceUOItem">
                        <set field="parameters.uomDescr" from-field="accountReferenceUOItem.accountName"/>
                    </if-not-empty>
                </if-empty>
                <if-empty field="parameters.uomDescrLang">
                    <if-not-empty field="accountReferenceUOItem">
                        <set field="parameters.uomDescrLang" from-field="accountReferenceUOItem.accountNameLang"/>
                    </if-not-empty>
                </if-empty>
                <if-not-empty field="accountReferenceUOItem">
                	<if-empty field="parameters.kpiScoreWeight">
                		<set field="parameters.kpiScoreWeight" from-field="accountReferenceUOItem.kpiScoreWeight" type="Double"/>
                	</if-empty>
                	<if-empty field="parameters.kpiOtherWeight">
                		<set field="parameters.kpiOtherWeight" from-field="accountReferenceUOItem.kpiOtherWeight" type="Double"/>
                	</if-empty>                	
                </if-not-empty> 
                
                <if-not-empty field="glAccount">
                    <set field="parameters.detailEnumId" from-field="glAccount.detailEnumId"/>
                    <set field="parameters.weMeasureTypeEnumId" from-field="glAccount.weMeasureTypeEnumId"/>
                    <set field="parameters.weScoreRangeEnumId" from-field="glAccount.weScoreRangeEnumId"/>
                    <set field="parameters.weScoreConvEnumId" from-field="glAccount.weScoreConvEnumId"/>
                    <set field="parameters.weAlertRuleEnumId" from-field="glAccount.weAlertRuleEnumId"/>
                    <set field="parameters.weWithoutPerf" from-field="glAccount.weWithoutPerf"/>
                </if-not-empty>             
            </if-not-empty>            

            <set-service-fields service-name="crudServiceOperation" to-map="crudServiceOperationMap" map="parametersCrud"/>
            <call-service service-name="crudServiceOperation" in-map-name="crudServiceOperationMap">
                <result-to-field result-name="id"/>
            </call-service>
            <field-to-result field="id"/>
            <set field="parameters.workEffortMeasureId" from-field="id.workEffortMeasureId"/>
            
            <if-not-empty field="parameters.accountReference">
            	<if-not-empty field="accountReferenceItem">
          			<call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="toTimeZone" ret-field="currentTimeZone">
						<string value=""/>
					</call-class-method>
            	 	<call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getYearEnd" ret-field="yearEnd">
					    <field field="parameters.thruDate" type="java.sql.Timestamp"/>
						<field field="currentTimeZone" type="java.util.TimeZone"/>
						<field field="locale" type="java.util.Locale"/>
					</call-class-method>
					<call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getDayStart" ret-field="transactionDate">
					    <field field="yearEnd" type="java.sql.Timestamp"/>
					</call-class-method>
           	
            		<entity-one value-field="glAccountRef" entity-name="GlAccount" auto-field-map="false">
            		    <field-map field-name="glAccountId" from-field="accountReferenceItem.glAccountIdRef"/>
            		</entity-one>
            		<if-compare operator="equals" value="ACCINP_OBJ" field="glAccountRef.inputEnumId">
            		    <entity-and list="acctgTransEntryList" entity-name="AcctgTransAndEntriesView">
            		        <field-map field-name="entryVoucherRef" from-field="accountReferenceItem.workEffortMeasureId"/>
            		        <field-map field-name="workEffortId" from-field="accountReferenceItem.workEffortIdRef"/>
            		        <field-map field-name="entryGlAccountId" from-field="accountReferenceItem.glAccountIdRef"/>
            		        <field-map field-name="glFiscalTypeId" value="BUDGET"/>
            		        <field-map field-name="transactionDate" from-field="transactionDate"/>
            		    </entity-and>
            		<else>
            			<if-compare operator="equals" value="Y" field="glAccountRef.detectOrgUnitIdFlag">
         					<entity-one value-field="workEffortRef" entity-name="WorkEffort" auto-field-map="false">
            		    		<field-map field-name="workEffortId" from-field="accountReferenceItem.workEffortIdRef"/>
            				</entity-one>
             				<entity-and list="acctgTransEntryList" entity-name="AcctgTransAndEntriesView">
            		        	<field-map field-name="entryVoucherRef" value="${null}"/>
            		        	<field-map field-name="workEffortId" value="${null}"/>
            		        	<field-map field-name="partyId"  from-field="workEffortRef.orgUnitId"/>
            		        	<field-map field-name="entryGlAccountId" from-field="accountReferenceItem.glAccountIdRef"/>
            		        	<field-map field-name="glFiscalTypeId" value="BUDGET"/>
            		        	<field-map field-name="transactionDate" from-field="transactionDate"/>
            		    	</entity-and>
            			<else>
             				<if-not-empty field="glAccountRef.respCenterId">
            		    		<entity-and list="acctgTransEntryList" entity-name="AcctgTransAndEntriesView">
            		        		<field-map field-name="entryVoucherRef" value="${null}"/>
            		        		<field-map field-name="workEffortId" value="${null}"/>
            		        		<field-map field-name="partyId" from-field="glAccountRef.respCenterId"/>
            		        		<field-map field-name="entryGlAccountId" from-field="accountReferenceItem.glAccountIdRef"/>
            		        		<field-map field-name="glFiscalTypeId" value="BUDGET"/>
            		        		<field-map field-name="transactionDate" from-field="transactionDate"/>
            		    		</entity-and> 
            		    	<else>
             					<entity-and list="acctgTransEntryList" entity-name="AcctgTransAndEntriesView">
            		        		<field-map field-name="entryVoucherRef" value="${null}"/>
            		        		<field-map field-name="workEffortId" value="${null}"/>
            		        		<field-map field-name="partyId" from-field="parameters.defaultOrganizationPartyId"/>
            		        		<field-map field-name="entryGlAccountId" from-field="accountReferenceItem.glAccountIdRef"/>
            		        		<field-map field-name="glFiscalTypeId" value="BUDGET"/>
            		        		<field-map field-name="transactionDate" from-field="transactionDate"/>
            		    		</entity-and> 
            		    	</else> 
            				</if-not-empty>            			
            			</else>       			
            			</if-compare>
        			</else>
            		</if-compare>
            		<first-from-list entry="acctgTransEntryItem" list="acctgTransEntryList"/>
            		<if-not-empty field="acctgTransEntryItem">          	    	
            	    	<set field="createWeTransInputMap.workEffortMeasureId" from-field="id.workEffortMeasureId"/>
            			<set field="createWeTransInputMap.voucherRef" from-field="id.workEffortMeasureId"/>
            			<set field="createWeTransInputMap.transValue" from-field="acctgTransEntryItem.entryAmount" type="Double"/>
            			<set field="createWeTransInputMap.origTransValue" from-field="acctgTransEntryItem.entryAmount" type="Double"/>
            			<set field="createWeTransInputMap.acctgTransTypeId" from-field="workEffortType.parentTypeId"/>
            			<set field="createWeTransInputMap.glAccountId" from-field="parameters.accountReference"/>
            			<set field="createWeTransInputMap.workEffortId" from-field="workEffort.workEffortId"/>
            			<set field="createWeTransInputMap.glFiscalTypeId" value="BUDGET"/>
            			<set field="createWeTransInputMap.roleTypeId" from-field="workEffort.orgUnitRoleTypeId"/>
            			<set field="createWeTransInputMap.partyId" from-field="workEffort.orgUnitId"/>
            			<set field="createWeTransInputMap.transDate" from-field="transactionDate" type="Timestamp"/>
            			<set field="createWeTransInputMap.defaultOrganizationPartyId" from-field="parameters.defaultOrganizationPartyId"/>        
            			<call-service service-name="createWeTrans" in-map-name="createWeTransInputMap">
                			<result-to-field result-name="acctgTransId" field="id.weTransId"/>
                			<result-to-field result-name="acctgTransEntrySeqId" field="id.weTransEntryId"/>
            			</call-service>
            			<check-errors/> 	
            		</if-not-empty>
            	</if-not-empty>         	
            </if-not-empty>
            
            <if-not-empty field="parameters.accountReferenceUO">
            	<if-not-empty field="accountReferenceUOItem">
          			<call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="toTimeZone" ret-field="currentTimeZone">
						<string value=""/>
					</call-class-method>
            	 	<call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getYearEnd" ret-field="yearEnd">
					    <field field="parameters.thruDate" type="java.sql.Timestamp"/>
						<field field="currentTimeZone" type="java.util.TimeZone"/>
						<field field="locale" type="java.util.Locale"/>
					</call-class-method>
					<call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getDayStart" ret-field="transactionDate">
					    <field field="yearEnd" type="java.sql.Timestamp"/>
					</call-class-method>
           	
            		<entity-one value-field="glAccountRef" entity-name="GlAccount" auto-field-map="false">
            		    <field-map field-name="glAccountId" from-field="accountReferenceUOItem.glAccountIdRef"/>
            		</entity-one>
            		<if-compare operator="equals" value="ACCINP_OBJ" field="glAccountRef.inputEnumId">
            		    <entity-and list="acctgTransEntryList" entity-name="AcctgTransAndEntriesView">
            		        <field-map field-name="entryVoucherRef" from-field="accountReferenceUOItem.workEffortMeasureId"/>
            		        <field-map field-name="workEffortId" from-field="accountReferenceUOItem.workEffortIdRef"/>
            		        <field-map field-name="entryGlAccountId" from-field="accountReferenceUOItem.glAccountIdRef"/>
            		        <field-map field-name="glFiscalTypeId" value="BUDGET"/>
            		        <field-map field-name="transactionDate" from-field="transactionDate"/>
            		    </entity-and>
            		<else>
            			<if-compare operator="equals" value="Y" field="glAccountRef.detectOrgUnitIdFlag">
         					<entity-one value-field="workEffortRef" entity-name="WorkEffort" auto-field-map="false">
            		    		<field-map field-name="workEffortId" from-field="accountReferenceUOItem.workEffortIdRef"/>
            				</entity-one>
             				<entity-and list="acctgTransEntryList" entity-name="AcctgTransAndEntriesView">
            		        	<field-map field-name="entryVoucherRef" value="${null}"/>
            		        	<field-map field-name="workEffortId" value="${null}"/>
            		        	<field-map field-name="partyId"  from-field="workEffortRef.orgUnitId"/>
            		        	<field-map field-name="entryGlAccountId" from-field="accountReferenceUOItem.glAccountIdRef"/>
            		        	<field-map field-name="glFiscalTypeId" value="BUDGET"/>
            		        	<field-map field-name="transactionDate" from-field="transactionDate"/>
            		    	</entity-and>
            			<else>
             				<if-not-empty field="glAccountRef.respCenterId">
            		    		<entity-and list="acctgTransEntryList" entity-name="AcctgTransAndEntriesView">
            		        		<field-map field-name="entryVoucherRef" value="${null}"/>
            		        		<field-map field-name="workEffortId" value="${null}"/>
            		        		<field-map field-name="partyId" from-field="glAccountRef.respCenterId"/>
            		        		<field-map field-name="entryGlAccountId" from-field="accountReferenceUOItem.glAccountIdRef"/>
            		        		<field-map field-name="glFiscalTypeId" value="BUDGET"/>
            		        		<field-map field-name="transactionDate" from-field="transactionDate"/>
            		    		</entity-and> 
            		    	<else>
             					<entity-and list="acctgTransEntryList" entity-name="AcctgTransAndEntriesView">
            		        		<field-map field-name="entryVoucherRef" value="${null}"/>
            		        		<field-map field-name="workEffortId" value="${null}"/>
            		        		<field-map field-name="partyId" from-field="parameters.defaultOrganizationPartyId"/>
            		        		<field-map field-name="entryGlAccountId" from-field="accountReferenceUOItem.glAccountIdRef"/>
            		        		<field-map field-name="glFiscalTypeId" value="BUDGET"/>
            		        		<field-map field-name="transactionDate" from-field="transactionDate"/>
            		    		</entity-and> 
            		    	</else> 
            				</if-not-empty>            			
            			</else>       			
            			</if-compare>
        			</else>
            		</if-compare>
            		<first-from-list entry="acctgTransEntryItem" list="acctgTransEntryList"/>
            		<if-not-empty field="acctgTransEntryItem">          	    	
            	    	<set field="createWeTransInputMap.workEffortMeasureId" from-field="id.workEffortMeasureId"/>
            			<set field="createWeTransInputMap.voucherRef" from-field="id.workEffortMeasureId"/>
            			<set field="createWeTransInputMap.transValue" from-field="acctgTransEntryItem.entryAmount" type="Double"/>
            			<set field="createWeTransInputMap.origTransValue" from-field="acctgTransEntryItem.entryAmount" type="Double"/>
            			<set field="createWeTransInputMap.acctgTransTypeId" from-field="workEffortType.parentTypeId"/>
            			<set field="createWeTransInputMap.glAccountId" from-field="parameters.accountReferenceUO"/>
            			<set field="createWeTransInputMap.workEffortId" from-field="workEffort.workEffortId"/>
            			<set field="createWeTransInputMap.glFiscalTypeId" value="BUDGET"/>
            			<set field="createWeTransInputMap.roleTypeId" from-field="workEffort.orgUnitRoleTypeId"/>
            			<set field="createWeTransInputMap.partyId" from-field="workEffort.orgUnitId"/>
            			<set field="createWeTransInputMap.transDate" from-field="transactionDate" type="Timestamp"/>
            			<set field="createWeTransInputMap.defaultOrganizationPartyId" from-field="parameters.defaultOrganizationPartyId"/>        
            			<call-service service-name="createWeTrans" in-map-name="createWeTransInputMap">
                			<result-to-field result-name="acctgTransId" field="id.weTransId"/>
                			<result-to-field result-name="acctgTransEntrySeqId" field="id.weTransEntryId"/>
            			</call-service>
            			<check-errors/> 	
            		</if-not-empty>
            	</if-not-empty>         	
            </if-not-empty>            

            <!-- bug 5125 - inserimento di automatismo per la creazione in unità extra
                di un prodotto/servizio -->
            <if-not-empty field="parameters.insertAutomaticMeasure">
                <if-compare operator="equals" value="Y" field="parameters.insertAutomaticMeasure">
                    <if-not-empty field="glAccount.detailEnumId">
                        <if-compare operator="not-equals" value="ACCDET_NULL" field="glAccount.detailEnumId">
                            <entity-condition list="listElement" entity-name="ProductRole">
                                <condition-list>
                                    <condition-expr field-name="productId" from-field="parameters.productId"/>
                                    <condition-expr field-name="thruDate" operator="equals" value=""/>
                                </condition-list>
                            </entity-condition>
                            <iterate entry="element" list="listElement">
                                <make-value value-field="workEffortMeasureRole" entity-name="WorkEffortMeasureRole"/>
                                <set field="workEffortMeasureRole.workEffortMeasureId" from-field="parameters.workEffortMeasureId"/>
                                <set field="workEffortMeasureRole.roleTypeId" from-field="element.roleTypeId"/>
                                <set field="workEffortMeasureRole.partyId" from-field="element.partyId"/>
                                <create-value value-field="workEffortMeasureRole"/>
                            </iterate>
                        </if-compare>
                    </if-not-empty>
                </if-compare>
            </if-not-empty>
        </if-compare>

        <if-compare field="parametersCrud.operation" operator="equals" value="UPDATE">
            <if-compare field="uom.uomTypeId" operator="not-equals" value="RATING_SCALE">
                <entity-and list="wemrsList" entity-name="WorkEffortMeasRatSc">
                    <field-map field-name="workEffortMeasureId" from-field="parameters.workEffortMeasureId"/>
                </entity-and>
                <if-not-empty field="wemrsList">
                    <remove-list list="wemrsList"/>
                </if-not-empty>
            </if-compare>
            
            <set-service-fields service-name="crudServiceOperation" to-map="crudServiceOperationMap" map="parametersCrud"/>
            <call-service service-name="crudServiceOperation" in-map-name="crudServiceOperationMap"/>
        </if-compare>

        <if-compare field="parametersCrud.operation" operator="equals" value="DELETE">
            <!-- Cancello WorkEffortMeasRatSc -->
            <if-compare field="uom.uomTypeId" operator="equals" value="RATING_SCALE">
                <entity-and list="wemrsList" entity-name="WorkEffortMeasRatSc">
                    <field-map field-name="workEffortMeasureId" from-field="parameters.workEffortMeasureId"/>
                </entity-and>
                <if-not-empty field="wemrsList">
                    <remove-list list="wemrsList"/>
                </if-not-empty>
            </if-compare>

            <!-- Bug 4463 -->
            <entity-condition list="acctgTransEntryList" entity-name="AcctgTransEntry">
                <condition-expr field-name="voucherRef" from-field="parameters.workEffortMeasureId"/>
            </entity-condition>
            <remove-list list="acctgTransEntryList"/>
            <entity-condition list="acctgTransList" entity-name="AcctgTrans">
                <condition-expr field-name="voucherRef" from-field="parameters.workEffortMeasureId"/>
            </entity-condition>
            <remove-list list="acctgTransList"/>

            <set-service-fields service-name="crudServiceOperation" to-map="crudServiceOperationMap" map="parametersCrud"/>
            <call-service service-name="crudServiceOperation" in-map-name="crudServiceOperationMap"/>
        </if-compare>

        <if>
            <condition>
                <or>
                    <if-compare field="parametersCrud.operation" operator="equals" value="CREATE"/>
                    <if-compare field="parametersCrud.operation" operator="equals" value="UPDATE"/>
                </or>
            </condition>
            <then>
                <entity-and entity-name="WorkEffortMeasRatSc" list="wemrsList">
                    <field-map field-name="workEffortMeasureId" from-field="parameters.workEffortMeasureId"/>
                </entity-and>
                <if-empty field="wemrsList">
                    <if-compare field="uom.uomTypeId" operator="equals" value="RATING_SCALE">
                        <!-- GN-512 alimenta tramite GlAccountMeasRatSc e non piu direttamente
                            da UomRatingScale -->
                        <entity-and list="ratingValues" entity-name="GlAccountMeasRatSc">
                            <field-map field-name="uomId" from-field="uom.uomId"/>
                            <field-map field-name="glAccountId" from-field="glAccount.glAccountId"/>
                        </entity-and>
                        <set field="createRatScMap" type="NewMap"/>
                        <set field="createRatScMap.operation" value="CREATE"/>
                        <set field="createRatScMap.entityName" value="WorkEffortMeasRatSc"/>
                        <set field="createRatScMap.locale" from-field="parametersCrud.locale"/>
                        <set field="createRatScMap.parameters" type="NewMap"/>
                        <iterate entry="ratSc" list="ratingValues">
                            <set field="createRatScMap.parameters.workEffortMeasureId" from-field="parameters.workEffortMeasureId"/>
                            <set field="createRatScMap.parameters.uomId" from-field="uom.uomId"/>
                            <set field="createRatScMap.parameters.uomRatingValue" from-field="ratSc.uomRatingValue"/>
                            <set field="createRatScMap.parameters.uomCode" from-field="ratSc.uomCode"/>
                            <set field="createRatScMap.parameters.uomCodeLang" from-field="ratSc.uomCodeLang"/>
                            <set field="createRatScMap.parameters.uomDescr" from-field="ratSc.uomDescr"/>
                            <set field="createRatScMap.parameters.uomDescrLang" from-field="ratSc.uomDescrLang"/>
                            <call-service service-name="crudServiceDefaultOrchestration_WorkEffortMeasRatSc" in-map-name="createRatScMap"/>
                        </iterate>
                    </if-compare>
                </if-empty>
            </then>
        </if>
    </simple-method>

    <simple-method method-name="uploadWorkEffortContentFileExtended_DateValidation" short-description="uploadWorkEffortContentFileExtended_DateValidation">
        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="parameters.fromDate"/>
                    </not>
                    <not>
                        <if-empty field="parameters.thruDate"/>
                    </not>
                </and>
            </condition>
            <then>
                <if>
                    <condition>
                        <if-compare-field field="parameters.fromDate" operator="greater" to-field="parameters.thruDate"/>
                    </condition>
                    <then>
                        <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="toTimeZone" ret-field="currentTimeZone">
							<string value=""/>
						</call-class-method>
				        <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getDateFormat" ret-field="format">
							<field field="locale" type="java.util.Locale"/>
						</call-class-method>
						<set field="fromDate" from-field="parameters.fromDate" type="PlainString" />
						<set field="thruDate" from-field="parameters.thruDate" type="PlainString" />
						<call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getFormattedDate" ret-field="fromDateFormatted">
							<field field="fromDate" type="java.lang.String"/>
							<field field="format" type="java.lang.String"/>
							<field field="currentTimeZone" type="java.util.TimeZone"/>
							<field field="locale" type="java.util.Locale"/>
						</call-class-method>
						<call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getFormattedDate" ret-field="thruDateFormatted">
							<field field="thruDate" type="java.lang.String"/>
							<field field="format" type="java.lang.String"/>
							<field field="currentTimeZone" type="java.util.TimeZone"/>
							<field field="locale" type="java.util.Locale"/>
						</call-class-method>
                        <add-error>
                            <fail-property resource="BaseErrorLabels" property="FromAndThruDateNotAllowedParams"/>
                        </add-error>
                        <check-errors/>
                    </then>
                </if>
            </then>
        </if>
    </simple-method>

    <simple-method method-name="crudServiceOperation_WorkEffortAndContentDataResourceExtended" short-description="crudServiceOperation_WorkEffortAndContentDataResourceExtended">

        <set field="parameters" from-field="parameters.parameters"/>

        <!-- ******************************************* -->
        <!-- UPDATE -->
        <!-- ******************************************* -->
        <if-compare operator="equals" value="UPDATE" field="parameters.operation">
            <set-service-fields service-name="dateValidationService" to-map="dateValidationServiceMap" map="parameters"/>
            <call-service service-name="dateValidationService" in-map-name="dateValidationServiceMap"/>
            <check-errors/>

            <set-service-fields service-name="updateContent" to-map="updateContentInputFields" map="parameters"/>
            <call-service service-name="updateContent" in-map-name="updateContentInputFields"/>

            <set-service-fields service-name="updateWorkEffortContent" to-map="updateWorkEffortContentInputFields" map="parameters"/>
            <call-service service-name="updateWorkEffortContent" in-map-name="updateWorkEffortContentInputFields"/>
        </if-compare>

        <!-- ******************************************* -->
        <!-- DELETE Cancellazione fisica -->
        <!-- ******************************************* -->
        <if-compare operator="equals" value="DELETE" field="parameters.operation">
            <entity-one value-field="workEffortContentType" entity-name="WorkEffortContentType">
                <field-map field-name="workEffortContentTypeId" from-field="parameters.workEffortContentTypeId"/>
            </entity-one>
            <if-compare field="workEffortContentType.inInquiry" operator="equals" value="Y">
                <entity-one value-field="content" entity-name="Content">
                    <field-map field-name="contentId" from-field="parameters.contentId"/>
                </entity-one>
                <entity-one value-field="contentAssoc" entity-name="ContentAssoc">
                    <field-map field-name="contentId" value="WE_CRU_ANALYSIS"/>
                    <field-map field-name="contentIdTo" from-field="parameters.contentId"/>
                    <field-map field-name="contentAssocTypeId" value="CRU_CONTENT"/>
                    <field-map field-name="fromDate" from-field="content.createdDate"/>
                </entity-one>
                <if-not-empty field="contentAssoc">
                    <remove-value value-field="contentAssoc"/>
                </if-not-empty>
            </if-compare>

            <set-service-fields service-name="deleteWorkEffortContent" to-map="deleteWorkEffortContentInputFields" map="parameters"/>
            <call-service service-name="deleteWorkEffortContent" in-map-name="deleteWorkEffortContentInputFields"/>

            <entity-and list="contentRoleList" entity-name="ContentRole">
                <field-map field-name="contentId" from-field="parameters.contentId"/>
                <field-map field-name="partyId" from-field="parameters.partyId"/>
                <field-map field-name="fromDate" from-field="parameters.fromDate"/>
            </entity-and>

            <iterate entry="contentRole" list="contentRoleList">
                <set field="parameters.roleTypeId" from-field="contentRole.roleTypeId"/>
                <set-service-fields service-name="removeContentRole" to-map="removeContentRoleInputFields" map="parameters"/>
                <call-service service-name="removeContentRole" in-map-name="removeContentRoleInputFields"/>
            </iterate>

            <set-service-fields service-name="removeContent" to-map="removeContentInputFields" map="parameters"/>
            <call-service service-name="removeContent" in-map-name="removeContentInputFields"/>

            <entity-and list="dataResourceRoleList" entity-name="DataResourceRole">
                <field-map field-name="dataResourceId" from-field="parameters.dataResourceId"/>
                <field-map field-name="partyId" from-field="parameters.partyId"/>
                <field-map field-name="roleTypeId" from-field="parameters.roleTypeId"/>
            </entity-and>

            <iterate entry="dataResourceRole" list="dataResourceRoleList">
                <set-service-fields service-name="removeDataResourceRole" to-map="removeDataResourceRoleInputFields" map="parameters"/>
                <set field="removeDataResourceRoleInputFields.fromDate" from-field="dataResourceRole.fromDate"/>
                <call-service service-name="removeDataResourceRole" in-map-name="removeDataResourceRoleInputFields"/>
            </iterate>

            <set-service-fields service-name="removeDataResource" to-map="removeDataResourceInputFields" map="parameters"/>
            <call-service service-name="removeDataResource" in-map-name="removeDataResourceInputFields"/>
        </if-compare>
        <check-errors/>
    </simple-method>

    <simple-method method-name="crudServiceValueValidation_WorkEffortTypeAttr" short-description="crudServiceValueValidation_WorkEffortTypeAttr">
        <set field="parametersCrud" from-field="parameters"/>
        <set field="parameters" from-field="parameters.parameters"/>

        <if-compare operator="equals" value="Y" field="parameters.isMain">
            <entity-count count-field="workEffortTypeAttrMainNoteCount" entity-name="WorkEffortTypeAttr">
                <condition-list>
                    <condition-expr field-name="workEffortTypeId" from-field="parameters.workEffortTypeId"/>
                    <condition-expr field-name="isNote" value="Y"/>
                    <condition-expr field-name="isMain" value="Y"/>
                </condition-list>
            </entity-count>
            <if-compare operator="equals" value="2" field="workEffortTypeAttrMainNoteCount" type="Integer">
                <add-error>
                    <fail-property resource="WorkeffortExtErrorLabels" property="TooMuchNoteMain"/>
                </add-error>
                <check-errors/>
            </if-compare>
        </if-compare>
    </simple-method>

    <simple-method method-name="crudServiceOperation_WorkEffortTypeAttr" short-description="crudServiceOperation_WorkEffortTypeAttr">
        <log message="................ parameters.parameters=${parameters.parameters}" level="always"/>
        <!-- Se sono in creazione creo la Nota -->
        <!-- <if-compare operator="equals" value="CREATE" field="parameters.operation"> -->
        <if-empty field="parameters.parameters.noteId">
            <make-value value-field="noteData" entity-name="NoteData"/>
            <sequenced-id sequence-name="NoteData" field="noteData.noteId"/>
            <set field="noteData.noteName" from-field="parameters.parameters.attrName"/>
            <set field="noteData.noteNameLang" from-field="parameters.parameters.attrNameLang"/>
            <set field="noteData.noteInfo" value=" "/>
            <set field="noteData.noteInfoLang" value=" "/>
            <now-timestamp field="noteData.noteDateTime"/>
            <create-value value-field="noteData"/>
            <check-errors/>

            <!-- Inserisco la noteId nel workEffortType -->
            <set field="parameters.parameters.noteId" from-field="noteData.noteId"/>
        </if-empty>

        <set-service-fields service-name="crudServiceDefaultOrchestration" to-map="crudServiceDefaultOrchestrationParams" map="parameters"/>
        <make-value value-field="crudServiceDefaultOrchestrationParams.parameters" entity-name="WorkEffortTypeAttr"/>
        
        
        <set-pk-fields value-field="crudServiceDefaultOrchestrationParams.parameters" map="parameters.parameters"/>
        <set-nonpk-fields value-field="crudServiceDefaultOrchestrationParams.parameters" map="parameters.parameters"/>
        
        <log message="................ crudServiceDefaultOrchestrationParams.parameters=${crudServiceDefaultOrchestrationParams.parameters}" level="always"/>
        
        <call-service service-name="crudServiceDefaultOrchestration" in-map-name="crudServiceDefaultOrchestrationParams"/>
        <check-errors/>

        <if-compare operator="equals" value="DELETE" field="parameters.operation">
            <entity-one value-field="noteData" entity-name="NoteData">
                <field-map field-name="noteId" from-field="parameters.parameters.noteId"/>
            </entity-one>
            <remove-value value-field="noteData"/>
        </if-compare>

    </simple-method>

    <!-- ************************************ Activity 2278 ************************************* -->
    <simple-method method-name="createWeTrans_fixedGlAccount" short-description="createWeTrans_fixedGlAccount">

        <entity-one value-field="workEffortMeasure" entity-name="WorkEffortMeasure"></entity-one>
        <if-empty field="workEffortMeasure">
            <add-error>
                <fail-property resource="WorkeffortExtErrorLabels" property="CreateWeTrans_DataNotFound"/>
            </add-error>
            <check-errors/>
        </if-empty>

        <get-related-one relation-name="MainWorkEffort" to-value-field="workEffort" value-field="workEffortMeasure"/>
        <if-empty field="workEffortMeasure">
            <add-error>
                <fail-property resource="WorkeffortExtErrorLabels" property="CreateWeTrans_DataNotFound"/>
            </add-error>
            <check-errors/>
        </if-empty>

        <get-related-one relation-name="WorkEffortType" to-value-field="workEffortType" value-field="workEffort"/>
        <if-empty field="workEffort">
            <add-error>
                <fail-property resource="WorkeffortExtErrorLabels" property="CreateWeTrans_DataNotFound"/>
            </add-error>
            <check-errors/>
        </if-empty>

        <entity-one value-field="parentWorkEffort" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="workEffort.workEffortParentId"/>
        </entity-one>
        <if-empty field="parentWorkEffort">
            <add-error>
                <fail-property resource="WorkeffortExtErrorLabels" property="CreateWeTrans_DataNotFound"/>
            </add-error>
            <check-errors/>
        </if-empty>

        <entity-one value-field="workEffortTypeStatus" entity-name="WorkEffortTypeStatus">
            <field-map field-name="workEffortTypeRootId" from-field="parentWorkEffort.workEffortTypeId"/>
            <field-map field-name="currentStatusId" from-field="workEffort.currentStatusId"/>
        </entity-one>
        <set field="glFiscalTypeId" from-field="parameters.glFiscalTypeId" default-value="${workEffortTypeStatus.glFiscalTypeId}"/>

        <entity-one value-field="glAccount" entity-name="GlAccount">
            <field-map field-name="glAccountId" from-field="parameters.glAccountId"/>
        </entity-one>
        <if-empty field="glAccount">
            <add-error>
                <fail-property resource="WorkeffortExtErrorLabels" property="CreateWeTrans_DataNotFound"/>
            </add-error>
            <check-errors/>
        </if-empty>

        <!-- Seleziono acctgTransTypeId -->
        <if-empty field="parameters.acctgTransTypeId">
            <set field="acctgTransTypeId" from-field="workEffortType.parentTypeId"/>
            <else>
                <set field="acctgTransTypeId" from-field="parameters.acctgTransTypeId"/>
            </else>
        </if-empty>

        <!-- Creo AcctgTrans -->
        <set field="acctgTransMap._AUTOMATIC_PK_" value="Y"/>
        <set field="acctgTransMap.transactionDate" value="${parameters.transDate}"/>
        <set field="acctgTransMap.isPosted" value="N"/>
        <set field="acctgTransMap.voucherRef" value="${parameters.workEffortMeasureId}"/>
        <set field="acctgTransMap.voucherDate" value="${parameters.transDate}"/>
        <set field="acctgTransMap.acctgTransTypeId" value="${acctgTransTypeId}"/>
        <set field="acctgTransMap.roleTypeId" value="${workEffort.orgUnitRoleTypeId}"/>
        <set field="acctgTransMap.partyId" value="${workEffort.orgUnitId}"/>
        <set field="acctgTransMap.glFiscalTypeId" value="${glFiscalTypeId}"/>
        <set field="acctgTransMap.workEffortId" value="${workEffort.workEffortId}"/>
        <set field="acctgTransMap.isPosted" from-field="parameters.isPosted"/>

        <set field="serviceMap.entityName" value="AcctgTrans"/>
        <set field="serviceMap.operation" value="CREATE"/>
        <map-to-map map="acctgTransMap" to-map="serviceMap.parameters"/>
        <set field="serviceMap.locale" value="${locale}"/>

        <call-service service-name="crudServiceDefaultOrchestration" in-map-name="serviceMap">
            <result-to-field result-name="id" field="resultId"/>
        </call-service>
        <check-errors/>


        <!-- Creo AcctgTransEntry -->
        <!-- bug 3867 recupero value dai parameters e tronca in base al currrencyUomId -->
        <set field="defaultUomId" from-field="glAccount.defaultUomId"/>
        <if-compare field="parameters.acctgTransTypeId" operator="equals" value="SCOREKPI">
            <entity-one value-field="scorekpi" entity-name="GlAccount">
                <field-map field-name="glAccountId" value="SCOREKPI"/>
            </entity-one>
            <set field="defaultUomId" from-field="scorekpi.defaultUomId"/>
        </if-compare>
        <entity-one value-field="uomIdValue" entity-name="Uom">
            <field-map field-name="uomId" from-field="defaultUomId"/>
        </entity-one>
        <if-not-empty field="uomIdValue.decimalScale">
            <calculate type="Double" field="parameters.transValue" decimal-scale="${uomIdValue.decimalScale}" rounding-mode="HalfUp">
                <calcop operator="get" field="parameters.transValue"></calcop>
            </calculate>
        </if-not-empty>

        <!-- Controllo parametri -->
        <set field="perfAmountActual" type="Double" value="0"/>
        <set field="perfAmountTarget" type="Double" value="0"/>
        <if-not-empty field="parameters.perfAmountActual">
            <set field="perfAmountActual" from-field="parameters.perfAmountActual"/>
        </if-not-empty>
        <if-not-empty field="parameters.perfAmountTarget">
            <set field="perfAmountTarget" from-field="parameters.perfAmountTarget"/>
        </if-not-empty>

        <sequenced-id sequence-name="AcctgTransEntry" field="acctgTransEntrySeqId"/>
        <set field="acctgTransEntryMap.acctgTransId" value="${resultId.acctgTransId}"/>
        <set field="acctgTransEntryMap.acctgTransEntrySeqId" value="${acctgTransEntrySeqId}"/>
        <set field="acctgTransEntryMap.description" value="${parameters.transDescription}"/>
        <set field="acctgTransEntryMap.voucherRef" value="${parameters.workEffortMeasureId}"/>
        <set field="acctgTransEntryMap.amount" value="${parameters.transValue}"/>
        <set field="acctgTransEntryMap.origAmount" value="${parameters.transValue}"/>
        <set field="acctgTransEntryMap.debitCreditFlag" value="${glAccount.debitCreditDefault}"/>
        <set field="acctgTransEntryMap.productId" value="${workEffortMeasure.productId}"/>
        <set field="acctgTransEntryMap.isSummary" value="N"/>
        <set field="acctgTransEntryMap.roleTypeId" value="${workEffortMeasure.roleTypeId}"/>
        <set field="acctgTransEntryMap.partyId" value="${workEffortMeasure.partyId}"/>
        <set field="acctgTransEntryMap.glAccountId" value="SCOREKPI"/>
        <set field="acctgTransEntryMap.organizationPartyId" value="${workEffort.organizationId}"/>
        <set field="acctgTransEntryMap.glAccountTypeId" value="${glAccount.glAccountTypeId}"/>
        <set field="acctgTransEntryMap.currencyUomId" value="${glAccount.defaultUomId}"/>
        <set field="acctgTransEntryMap.origCurrencyUomId" value="${glAccount.defaultUomId}"/>
        <set field="acctgTransEntryMap.emplPositionTypeId" value="${workEffortMeasure.emplPositionTypeId}"/>
        <set field="acctgTransEntryMap.perfAmountTarget" value="${perfAmountTarget}"/>
        <set field="acctgTransEntryMap.perfAmountActual" value="${perfAmountActual}"/>
        <set field="acctgTransEntryMap.hasScoreAlert" value="${parameters.hasScoreAlert}" set-if-empty="false"/>
        <set field="acctgTransEntryMap.perfAmountCalc" from-field="parameters.perfAmountCalc"/>

        <set field="serviceMap.entityName" value="AcctgTransEntry"/>
        <set field="serviceMap.operation" value="CREATE"/>
        <map-to-map map="acctgTransEntryMap" to-map="serviceMap.parameters"/>
        <set field="serviceMap.locale" value="${locale}"/>
        <call-service service-name="crudServiceDefaultOrchestration" in-map-name="serviceMap">
            <result-to-field result-name="id" field="resultEntryId"/>
        </call-service>
        <check-errors/>

        <field-to-result field="resultId.acctgTransId" result-name="acctgTransId"/>
        <field-to-result field="resultEntryId.acctgTransEntrySeqId" result-name="acctgTransEntrySeqId"/>
    </simple-method>


    <!-- ======================================== Calcolo punteggio 2278 ======================================== -->

    <!-- ======================================== Calcolo punteggio singola scheda ======================================== -->
    <!-- ..................... interfaccia ..................... -->
    <simple-method use-transaction="false" method-name="scoreCardCalc" short-description="scoreCardCalc">
        <log level="info" message=" ############################### scoreCardCalc "></log>
        <!-- Sottopongo l'elaborazione vera e propria attraverso serviceLogger
            in modo da controllarne il logging -->
        <set field="loggerMap.serviceName" value="scoreCardCalcImpl"/> <!-- qui setto l'implementazione da usare per il calcolo -->
        <set field="loggerMap.serviceTypeId" value="SCORE_CARD"/>
        <set field="loggerMap.sessionId" from-field="parameters.sessionId"/>

        <!-- parametro richiesto dall'interfaccia loggedServiceInterface implementata
            da scoreCardCalcImpl -->

        <set field="loggerMap.serviceParameters.thruDate" value="${parameters.thruDate}" type="Timestamp"/>
        <set field="loggerMap.serviceParameters.limitExcellent" value="${parameters.limitExcellent}"/>
        <set field="loggerMap.serviceParameters.limitMax" value="${parameters.limitMax}"/>
        <set field="loggerMap.serviceParameters.target" value="${parameters.target}"/>
        <set field="loggerMap.serviceParameters.limitMed" value="${parameters.limitMed}"/>       
        <set field="loggerMap.serviceParameters.limitMin" value="${parameters.limitMin}"/>       
        <set field="loggerMap.serviceParameters.performance" value="${parameters.performance}"/>
        <set field="loggerMap.serviceParameters.scoreValueType" value="${parameters.scoreValueType}"/>
        <set field="loggerMap.serviceParameters.weightType" value="${parameters.weightType}"/>
        <set field="loggerMap.serviceParameters.workEffortId" value="${parameters.workEffortId}"/>
        <set field="loggerMap.serviceParameters.cleanOnlyScoreCard" value="${parameters.cleanOnlyScoreCard}"/>

        <call-service service-name="serviceLogger" in-map-name="loggerMap">
            <result-to-field result-name="jobLogId" field="jobLogId"/>
            <result-to-field result-name="warningMessages" field="warningMessages"/>
            <result-to-field result-name="blockingErrors" field="blockingErrors"/>  
            <result-to-field result-name="serviceOutParameters" field="serviceOutParameters"/>            
        </call-service>
        <check-errors/>

        <log level="info" message=" #################################### jobLogId ${jobLogId}"></log>       

        <field-to-result field="jobLogId" result-name="jobLogId"/>
        <field-to-result field="warningMessages" result-name="warningMessages"/>
        <field-to-result field="blockingErrors" result-name="blockingErrors"/>
        <field-to-result field="serviceOutParameters.valueScoreCardCal" result-name="valueScoreCardCal"/>
        <field-to-result field="parameters.cleanOnlyScoreCard" result-name="cleanOnlyScoreCard"/>
    </simple-method>

    <simple-method method-name="crudServiceOperation_isPostedValidation" short-description="crudServiceOperation_isPostedValidation">
        <set field="parameters" from-field="parameters.parameters"/>
        <if-compare operator="not-equals" field="parameters.isObiettivo" value="Y">
            <entity-one value-field="acctgTrans" entity-name="AcctgTrans">
                <field-map field-name="acctgTransId" from-field="parameters.weTransId"/>
            </entity-one>
        	<if-compare field="acctgTrans.isPosted" operator="equals" value="Y">
                <add-error>
                    <fail-property resource="BaseErrorLabels" property="UpdateOperationNotAllowed"/>
                </add-error>
                <check-errors/>
            </if-compare>
        </if-compare>

    </simple-method>

    <simple-method method-name="crudServiceOperation_saveOldWorkEffortEstimatedStartAndCompletionDate" short-description="crudServiceOperation_saveOldWorkEffortEstimatedStartAndCompletionDate">
        <set field="parameters" from-field="parameters.parameters"/>
        
        <if-not-empty field="parameters.workEffortId">
            <entity-one value-field="workEffort" entity-name="WorkEffort">
                <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
            </entity-one>
        
            <set field="parameters.oldEstimatedStartDate" from-field="workEffort.estimatedStartDate" type="Timestamp"/>
            <set field="parameters.oldEstimatedCompletionDate" from-field="workEffort.estimatedCompletionDate" type="Timestamp"/>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="crudServiceOperation_updateWorkEffortMeasureByEstimatedStartAndCompletionDate" short-description="updateWorkEffortMeasureByEstimatedStartAndCompletionDate">
        <set field="parameters" from-field="parameters.parameters"/>

        <if-not-empty field="parameters.workEffortId">
            <entity-one value-field="workEffort" entity-name="WorkEffort">
                <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
            </entity-one>

            <if-compare-field field="workEffort.estimatedStartDate" operator="not-equals" to-field="parameters.oldEstimatedStartDate" type="Timestamp">
                <entity-condition list="workEffortMeasureList" entity-name="WorkEffortMeasure">
                    <condition-list>
                        <condition-expr field-name="workEffortId" from-field="workEffort.workEffortId"/>
                        <condition-expr field-name="fromDate" from-field="parameters.oldEstimatedStartDate"/>
                    </condition-list>
                </entity-condition>

                <iterate entry="workEffortMeasure" list="workEffortMeasureList">
                    <set field="workEffortMeasure.fromDate" from-field="workEffort.estimatedStartDate" type="Timestamp"/>
                    <store-value value-field="workEffortMeasure"/>
                    <check-errors/>
                </iterate>
            </if-compare-field>

            <if-compare-field field="workEffort.estimatedCompletionDate" operator="not-equals" to-field="parameters.oldEstimatedCompletionDate" type="Timestamp">
                <entity-condition list="workEffortMeasureList" entity-name="WorkEffortMeasure">
                    <condition-list>
                        <condition-expr field-name="workEffortId" from-field="workEffort.workEffortId"/>
                        <condition-expr field-name="thruDate" from-field="parameters.oldEstimatedCompletionDate"/>
                    </condition-list>
                </entity-condition>

                <iterate entry="workEffortMeasure" list="workEffortMeasureList">
                    <set field="workEffortMeasure.thruDate" from-field="workEffort.estimatedCompletionDate" type="Timestamp"/>
                    <store-value value-field="workEffortMeasure"/>
                    <check-errors/>
                </iterate>
            </if-compare-field>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="crudServiceOperation_updateWorkEffortPartyAssignmentByEstimatedStartAndCompletionDate" short-description="crudServiceOperation_updateWorkEffortPartyAssignmentByEstimatedStartAndCompletionDate">
        <set field="parameters" from-field="parameters.parameters"/>        

		<if-compare operator="not-equals" value="Y" field="parameters.fixedDatesHumanResource">
        	<if-not-empty field="parameters.workEffortId">
            	<entity-one value-field="workEffort" entity-name="WorkEffort">
                	<field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
            	</entity-one>          
            
                <log message=" ##### a workEffort.estimatedStartDate ${workEffort.estimatedStartDate}" level="always"/>
            	<log message=" ##### a parameters.oldEstimatedStartDate ${parameters.oldEstimatedStartDate}" level="always"/>
                <if-compare-field field="workEffort.estimatedStartDate" operator="not-equals" to-field="parameters.oldEstimatedStartDate" type="Timestamp">
                	<entity-condition list="workEffortPartyAssignmentList" entity-name="WorkEffortPartyAssignment">
                    	<condition-list>
                        	<condition-expr field-name="workEffortId" from-field="workEffort.workEffortId"/>
                        	<condition-expr field-name="fromDate" from-field="parameters.oldEstimatedStartDate"/>
                    	</condition-list>
                	</entity-condition>

                	<iterate entry="workEffortPartyAssignment" list="workEffortPartyAssignmentList">
                    	<set field="oldWorkEffortPartyAssignment" from-field="workEffortPartyAssignment"/>
                    	<remove-value value-field="oldWorkEffortPartyAssignment"/>
                    	<set field="workEffortPartyAssignment.fromDate" from-field="workEffort.estimatedStartDate" type="Timestamp"/>
                    	<create-value value-field="workEffortPartyAssignment"/>
                    	<check-errors/>
                	</iterate>
            	</if-compare-field>

            	<if-compare-field field="workEffort.estimatedCompletionDate" operator="not-equals" to-field="parameters.oldEstimatedCompletionDate" type="Timestamp">
                	<entity-condition list="workEffortPartyAssignmentList" entity-name="WorkEffortPartyAssignment">
                    	<condition-list>
                        	<condition-expr field-name="workEffortId" from-field="workEffort.workEffortId"/>
                        	<condition-expr field-name="thruDate" from-field="parameters.oldEstimatedCompletionDate"/>
                    	</condition-list>
                	</entity-condition>

                	<iterate entry="workEffortPartyAssignment" list="workEffortPartyAssignmentList">
                    	<set field="workEffortPartyAssignment.thruDate" from-field="workEffort.estimatedCompletionDate" type="Timestamp"/>
                    	<store-value value-field="workEffortPartyAssignment"/>
                    	<check-errors/>
                	</iterate>
            	</if-compare-field>
        	</if-not-empty>
        </if-compare>
    </simple-method>

    <simple-method method-name="crudServiceOperation_updateNoteDataByEstimatedStartAndCompletionDate" short-description="crudServiceOperation_updateNoteDataByEstimatedStartAndCompletionDate">
        <set field="parameters" from-field="parameters.parameters"/>

        <if-not-empty field="parameters.workEffortId">
            <entity-one value-field="workEffort" entity-name="WorkEffort">
                <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
            </entity-one>

            <if-compare-field field="workEffort.estimatedStartDate" operator="not-equals" to-field="parameters.oldEstimatedStartDate" type="Timestamp">
                <entity-condition list="workEffortNoteAndDataList" entity-name="WorkEffortNoteAndData">
                    <condition-list>
                        <condition-expr field-name="workEffortId" from-field="workEffort.workEffortId"/>
                        <condition-expr field-name="noteDateTime" from-field="parameters.oldEstimatedStartDate"/>
                    </condition-list>
                </entity-condition>

                <iterate entry="workEffortNoteAndData" list="workEffortNoteAndDataList">
                    <entity-one value-field="noteData" entity-name="NoteData">
                        <field-map field-name="noteId" from-field="workEffortNoteAndData.noteId"/>
                    </entity-one>
                    <set field="noteData.noteDateTime" from-field="workEffort.estimatedStartDate" type="Timestamp"/>
                    <store-value value-field="noteData"/>
                    <check-errors/>
                </iterate>
            </if-compare-field>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="crudServiceOperation_updateWorkEffortAssocByEstimatedStartAndCompletionDate" short-description="crudServiceOperation_updateWorkEffortAssocByEstimatedStartAndCompletionDate">
        <set field="parameters" from-field="parameters.parameters"/>

        <if-not-empty field="parameters.workEffortId">
            <entity-one value-field="workEffort" entity-name="WorkEffort">
                <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
            </entity-one>

            <entity-condition list="workEffortAssocList" entity-name="WorkEffortAssoc">
                <condition-list combine="or">
                    <condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortId"/>
                    <condition-expr field-name="workEffortIdTo" from-field="parameters.workEffortId"/>
                </condition-list>
            </entity-condition>

            <if>
                <condition>
                    <or>
                        <if-compare-field field="workEffort.estimatedStartDate" operator="not-equals" to-field="parameters.oldEstimatedStartDate" type="Timestamp"/>
                        <if-compare-field field="workEffort.estimatedCompletionDate" operator="not-equals" to-field="parameters.oldEstimatedCompletionDate" type="Timestamp"/>
                    </or>
                </condition>
                <then>
                    <iterate entry="workEffortAssoc" list="workEffortAssocList">
                        <if-compare-field field="workEffortAssoc.workEffortIdFrom" operator="not-equals" to-field="parameters.workEffortId">
                            <entity-one value-field="workEffortFrom" entity-name="WorkEffort">
                                <field-map field-name="workEffortId" from-field="workEffortAssoc.workEffortIdFrom"/>
                            </entity-one>
                            <set field="fromEstimatedStartDate" from-field="workEffortFrom.estimatedStartDate" type="Timestamp"/>
                            <set field="fromEstimatedCompletionDate" from-field="workEffortFrom.estimatedCompletionDate" type="Timestamp"/>
                            <else>
                                <set field="fromEstimatedStartDate" from-field="workEffort.estimatedStartDate" type="Timestamp"/>
                                <set field="fromEstimatedCompletionDate" from-field="workEffort.estimatedCompletionDate" type="Timestamp"/>
                            </else>
                        </if-compare-field>

                        <if-compare-field field="workEffortAssoc.workEffortIdTo" operator="not-equals" to-field="parameters.workEffortId">
                            <entity-one value-field="workEffortTo" entity-name="WorkEffort">
                                <field-map field-name="workEffortId" from-field="workEffortAssoc.workEffortIdTo"/>
                            </entity-one>
                            <set field="toEstimatedStartDate" from-field="workEffortTo.estimatedStartDate" type="Timestamp"/>
                            <set field="toEstimatedCompletionDate" from-field="workEffortTo.estimatedCompletionDate" type="Timestamp"/>
                            <else>
                                <set field="toEstimatedStartDate" from-field="workEffort.estimatedStartDate" type="Timestamp"/>
                                <set field="toEstimatedCompletionDate" from-field="workEffort.estimatedCompletionDate" type="Timestamp"/>
                            </else>
                        </if-compare-field>

                        <if-compare-field field="fromEstimatedStartDate" operator="greater" to-field="toEstimatedStartDate">
                            <set field="maxEstimatedStartDate" from-field="fromEstimatedStartDate" type="Timestamp"/>
                            <else>
                                <set field="maxEstimatedStartDate" from-field="toEstimatedStartDate" type="Timestamp"/>
                            </else>
                        </if-compare-field>
                        <if-compare-field field="fromEstimatedCompletionDate" operator="less" to-field="toEstimatedCompletionDate">
                            <set field="minEstimatedCompletionDate" from-field="fromEstimatedCompletionDate" type="Timestamp"/>
                            <else>
                                <set field="minEstimatedCompletionDate" from-field="toEstimatedCompletionDate" type="Timestamp"/>
                            </else>
                        </if-compare-field>

                        <if-compare-field field="workEffort.estimatedStartDate" operator="not-equals" to-field="parameters.oldEstimatedStartDate" type="Timestamp">
                            <set field="oldWorkEffortAssoc" from-field="workEffortAssoc"/>
                            <remove-value value-field="oldWorkEffortAssoc"/>
                            <set field="workEffortAssoc.fromDate" from-field="maxEstimatedStartDate" type="Timestamp"/>
                            <create-value value-field="workEffortAssoc"/>
                        </if-compare-field>

                        <if-compare-field field="workEffort.estimatedCompletionDate" operator="not-equals" to-field="parameters.oldEstimatedCompletionDate" type="Timestamp">
                            <set field="workEffortAssoc.thruDate" from-field="minEstimatedCompletionDate" type="Timestamp"/>
                            <store-value value-field="workEffortAssoc"/>
                        </if-compare-field>

                        <check-errors/>
                    </iterate>
                </then>
            </if>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="crudServiceOperation_updateWorkEffortIsPostedFlag" short-description="crudServiceOperation_updateWorkEffortIsPostedFlag">
        <set field="parameters" from-field="parameters.parameters"/>
		<set field="parameters.workEffortIdRoot" from-field="parameters.workEffortId"/>

        <entity-one value-field="workEffort" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortIdRoot"/>
        </entity-one>
        <if-not-empty field="workEffort">
            <!-- lista che contiene tutti i workeffort in relazione con la radice,
                inclusa se stessa -->
            <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssocExtView">
                <condition-list>
                    <condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortIdRoot"/>
                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                </condition-list>
            </entity-condition>

            <set field="contentId" value="WEFLD_MAIN"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <clear-field field="toPost"/>
                <clear-field field="workEffortTypeStatusCnt"/>
                <!-- 2 viste che, dato un workeffortId, ne ricava il tipo e lo stato
                    e infine i valori di toPost per il nodo corrente o eventualmente per la radice -->
                <entity-one entity-name="WorkEffortTypeStatusCntChildView" value-field="childView">
                    <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                    <field-map field-name="contentId" from-field="contentId"/>
                </entity-one>
                <entity-one entity-name="WorkEffortTypeStatusCntParentView" value-field="parentView">
                    <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                    <field-map field-name="contentId" from-field="contentId"/>
                </entity-one>
                <set field="workEffortTypeStatusCnt" from-field="childView"/>
		        <if-empty field="workEffortTypeStatusCnt">
		        	<set field="workEffortTypeStatusCnt" from-field="parentView"/>
		        </if-empty>
		        <set field="toPost" from-field="workEffortTypeStatusCnt.toPost"/>
                <if-not-empty field="toPost">
                	<log level="always" message=" #### For workEffortId = ${workEffortAssocExtView.workEffortIdTo}, toPost = ${toPost}"/>
                </if-not-empty>
                <if>
                    <condition>
                        <and>
                            <not>
                                <if-empty field="workEffortTypeStatusCnt"/>
                            </not>
                            <not>
                                <if-empty field="toPost"/>
                            </not>
                        </and>
                    </condition>
                    <then>
                        <entity-one value-field="workEffortChild" entity-name="WorkEffort">
                            <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                        </entity-one>
                        <if-compare-field operator="not-equals" field="workEffortChild.isPosted" to-field="toPost">
                            <set field="workEffortChild.isPosted" from-field="toPost"/>
                            <store-value value-field="workEffortChild"/>
                            <check-errors/>
                        </if-compare-field>
                    </then>
                </if>
            </iterate>
        </if-not-empty>
    </simple-method>

	<simple-method method-name="executeWorkEffortNoteAndDataScript" short-description="execute the groovy script executeChildPerformFindWorkEffortNoteAndData and store the value isPosted for the workEffortNote ">
        <clear-field field="toPost"/>
        <clear-field field="workEffortTypeStatusCnt"/>
        <entity-one entity-name="WorkEffortTypeStatusCntChildView" value-field="childView">
            <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
            <field-map field-name="contentId" from-field="contentId"/>
        </entity-one>
        <entity-one entity-name="WorkEffortTypeStatusCntParentView" value-field="parentView">
            <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
            <field-map field-name="contentId" from-field="contentId"/>
        </entity-one>
        <set field="workEffortTypeStatusCnt" from-field="childView"/>
        <if-empty field="workEffortTypeStatusCnt">
        	<set field="workEffortTypeStatusCnt" from-field="parentView"/>
        </if-empty>
        <set field="toPost" from-field="workEffortTypeStatusCnt.toPost"/>
        <if-not-empty field="toPost">
       		<log level="always" message=" #### For workEffortId = ${workEffortAssocExtView.workEffortIdTo}, toPost = ${toPost}"/>
        </if-not-empty>
        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="workEffortTypeStatusCnt"/>
                    </not>
                    <not>
                        <if-empty field="toPost"/>
                    </not>
                </and>
            </condition>
            <then>
		        <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="toTimeZone" ret-field="currentTimeZone">
					<string value=""/>
				</call-class-method>
            	<call-bsh>
        		<![CDATA[
        			groovyContext = new java.util.HashMap();
        			groovyContext.put("dispatcher", dispatcher);
   					groovyContext.put("delegator", delegator);
   					groovyContext.put("locale", locale);
   					groovyContext.put("timeZone", currentTimeZone);
   					groovyContext.put("entityName", "WorkEffortNoteAndData");
   					groovyContext.put("parentEntityName", "WorkEffortView");
   					
   					parameters.put("workEffortId", workEffortAssocExtView.get("workEffortIdTo"));
   					parameters.put("noteContentId", contentId);
            		groovyContext.put("parameters", parameters);
   					
   					inputFields = new java.util.HashMap();
        			inputFields.put("workEffortId", workEffortAssocExtView.get("workEffortIdTo"));
        			inputFields.put("noteContentId", contentId);
   					groovyContext.put("inputFields", inputFields);
   					
   					context = new java.util.HashMap();
   					context.put("workEffortId", workEffortAssocExtView.get("workEffortIdTo"));
   					groovyContext.put("context", context);
            					
   					org.ofbiz.base.util.GroovyUtil.runScriptAtLocation("component:/workeffortext/webapp/workeffortext/WEB-INF/actions/executeChildPerformFindWorkEffortNoteAndData.groovy", groovyContext);
        			result = new java.util.HashMap();
            		result.put("workEffortNoteAndDataList", groovyContext.get("listIt"));
            
            		return result;
        		]]>
                </call-bsh>
                <check-errors/>
                <if-not-empty field="workEffortNoteAndDataList">
                <iterate entry="workEffortNoteAndData" list="workEffortNoteAndDataList">
                    <entity-one value-field="workEffortNote" entity-name="WorkEffortNote">
                        <field-map field-name="workEffortId" from-field="workEffortNoteAndData.workEffortId"/>
                        <field-map field-name="noteId" from-field="workEffortNoteAndData.noteId"/>
                    </entity-one>
                    <if-not-empty field="workEffortNote">
                        <if-compare-field operator="not-equals" field="workEffortNote.isPosted" to-field="toPost">
                            <set field="workEffortNote.isPosted" from-field="toPost"/>
                    	    <store-value value-field="workEffortNote"/>
                    	    <check-errors/>
                        </if-compare-field>
                    </if-not-empty>
                 </iterate>
             </if-not-empty>
            </then>
        </if>
    </simple-method>

    <simple-method method-name="crudServiceOperation_updateWorkEffortNoteIsPostedFlag" short-description="crudServiceOperation_updateWorkEffortNoteIsPostedFlag">
        <set field="parameters" from-field="parameters.parameters"/>
		<log level="always" message=" #### parameters.workEffortIdRoot ${parameters.workEffortIdRoot}"/>
        
        <entity-one value-field="workEffort" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortIdRoot"/>
        </entity-one>
        <if-not-empty field="workEffort">
            <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssocExtView">
                <condition-list>
                    <condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortIdRoot"/>
                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                </condition-list>
            </entity-condition>

            <set field="contentId" value="WEFLD_NOTE"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <call-simple-method method-name="executeWorkEffortNoteAndDataScript"/>
            </iterate>
            
            <set field="contentId" value="WEFLD_NOTE2"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <call-simple-method method-name="executeWorkEffortNoteAndDataScript"/>
            </iterate>
            
            <set field="contentId" value="WEFLD_NOTE3"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <call-simple-method method-name="executeWorkEffortNoteAndDataScript"/>
            </iterate>

			<set field="contentId" value="WEFLD_NOTE4"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <call-simple-method method-name="executeWorkEffortNoteAndDataScript"/>
            </iterate>
            
            <set field="contentId" value="WEFLD_NOTER"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <call-simple-method method-name="executeWorkEffortNoteAndDataScript"/>
            </iterate>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="crudServiceOperation_updateWorkEffortAttributeIsPostedFlag" short-description="crudServiceOperation_updateWorkEffortAttributeIsPostedFlag">
        <set field="parameters" from-field="parameters.parameters"/>

        <log level="always" message=" #### parameters.workEffortIdRoot ${parameters.workEffortIdRoot}"/>
        
        <entity-one value-field="workEffort" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortIdRoot"/>
        </entity-one>
        <if-not-empty field="workEffort">
            <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssocExtView">
                <condition-list>
                    <condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortIdRoot"/>
                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                </condition-list>
            </entity-condition>

            <set field="contentId" value="WEFLD_ATTR"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <clear-field field="toPost"/>
        		<clear-field field="workEffortTypeStatusCnt"/>
        		<entity-one entity-name="WorkEffortTypeStatusCntChildView" value-field="childView">
                    <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                    <field-map field-name="contentId" from-field="contentId"/>
                </entity-one>
                <entity-one entity-name="WorkEffortTypeStatusCntParentView" value-field="parentView">
                    <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                    <field-map field-name="contentId" from-field="contentId"/>
                </entity-one>
                <set field="workEffortTypeStatusCnt" from-field="childView"/>
		        <if-empty field="workEffortTypeStatusCnt">
		        	<set field="workEffortTypeStatusCnt" from-field="parentView"/>
		        </if-empty>
		        <set field="toPost" from-field="workEffortTypeStatusCnt.toPost"/>
                <if-not-empty field="toPost">
		       		<log level="always" message=" #### For workEffortId = ${workEffortAssocExtView.workEffortIdTo}, toPost = ${toPost}"/>
		        </if-not-empty>
		        <if>
                    <condition>
                        <and>
                            <not>
                                <if-empty field="workEffortTypeStatusCnt"/>
                            </not>
                            <not>
		                        <if-empty field="toPost"/>
		                    </not>
                        </and>
                    </condition>
                    <then>
                        <entity-condition list="workEffortAttributeList" entity-name="WorkEffortAttribute">
                            <condition-expr field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                        </entity-condition>
                        <iterate entry="workEffortAttribute" list="workEffortAttributeList">
                            <if-compare-field operator="not-equals" field="workEffortAttribute.isPosted" to-field="toPost">
                                <set field="workEffortAttribute.isPosted" from-field="toPost"/>
                                <store-value value-field="workEffortAttribute"/>
                                <check-errors/>
                            </if-compare-field>
                        </iterate>
                    </then>
                </if>
            </iterate>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="crudServiceOperation_updateWorkEffortPartyAssignmentDestIsPostedFlag" short-description="crudServiceOperation_updateWorkEffortPartyAssignmentDestIsPostedFlag">
        <set field="parameters" from-field="parameters.parameters"/>

        <log level="always" message=" #### parameters.workEffortIdRoot ${parameters.workEffortIdRoot}"/>
        
        <entity-one value-field="workEffort" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortIdRoot"/>
        </entity-one>
        <if-not-empty field="workEffort">
            <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssocExtView">
                <condition-list>
                    <condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortIdRoot"/>
                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                </condition-list>
            </entity-condition>

            <set field="contentId" value="WEFLD_DEST"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <clear-field field="toPost"/>
        		<clear-field field="workEffortTypeStatusCnt"/>
        		<entity-one entity-name="WorkEffortTypeStatusCntChildView" value-field="childView">
                    <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                    <field-map field-name="contentId" from-field="contentId"/>
                </entity-one>
                <entity-one entity-name="WorkEffortTypeStatusCntParentView" value-field="parentView">
                    <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                    <field-map field-name="contentId" from-field="contentId"/>
                </entity-one>
                <set field="workEffortTypeStatusCnt" from-field="childView"/>
		        <if-empty field="workEffortTypeStatusCnt">
		        	<set field="workEffortTypeStatusCnt" from-field="parentView"/>
		        </if-empty>
		        <set field="toPost" from-field="workEffortTypeStatusCnt.toPost"/>
                <if-not-empty field="toPost">
		       		<log level="always" message=" #### For workEffortId = ${workEffortAssocExtView.workEffortIdTo}, toPost = ${toPost}"/>
		        </if-not-empty>
                <if>
                    <condition>
                        <and>
                            <not>
                                <if-empty field="workEffortTypeStatusCnt"/>
                            </not>
                            <not>
                            	<if-empty field="toPost"/>
                            </not>
                        </and>
                    </condition>
                    <then>
                        <entity-condition list="workEffortAssignmentGoalViewList" entity-name="WorkEffortAssignmentGoalView">
                            <condition-list>
                                <condition-expr field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                            </condition-list>
                        </entity-condition>
                        <iterate entry="workEffortAssignmentGoalView" list="workEffortAssignmentGoalViewList">
                            <entity-one value-field="workEffortPartyAssignment" entity-name="WorkEffortPartyAssignment">
                                <field-map field-name="workEffortId" from-field="workEffortAssignmentGoalView.workEffortId"/>
                                <field-map field-name="partyId" from-field="workEffortAssignmentGoalView.partyId"/>
                                <field-map field-name="roleTypeId" from-field="workEffortAssignmentGoalView.roleTypeId"/>
                                <field-map field-name="fromDate" from-field="workEffortAssignmentGoalView.fromDate"/>
                            </entity-one>
                            <if-not-empty field="workEffortPartyAssignment">
                                <if-compare-field operator="not-equals" field="workEffortPartyAssignment.isPosted" to-field="toPost">
                                    <set field="workEffortPartyAssignment.isPosted" from-field="toPost"/>
                                    <store-value value-field="workEffortPartyAssignment"/>
                                    <check-errors/>
                                </if-compare-field>
                            </if-not-empty>
                        </iterate>
                    </then>
                </if>
            </iterate>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="crudServiceOperation_updateWorkEffortPartyAssignmentOrgUnitIsPostedFlag" short-description="crudServiceOperation_updateWorkEffortPartyAssignmentOrgUnitIsPostedFlag">
        <set field="parameters" from-field="parameters.parameters"/>

        <log level="always" message=" #### parameters.workEffortIdRoot ${parameters.workEffortIdRoot}"/>
        
        <entity-one value-field="workEffort" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortIdRoot"/>
        </entity-one>
        <if-not-empty field="workEffort">
            <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssocExtView">
                <condition-list>
                    <condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortIdRoot"/>
                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                </condition-list>
            </entity-condition>

		    <set field="contentId" value="WEFLD_ORGUNIT"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <clear-field field="toPost"/>
        		<clear-field field="workEffortTypeStatusCnt"/>
        		<entity-one entity-name="WorkEffortTypeStatusCntChildView" value-field="childView">
                    <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                    <field-map field-name="contentId" from-field="contentId"/>
                </entity-one>
                <entity-one entity-name="WorkEffortTypeStatusCntParentView" value-field="parentView">
                    <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                    <field-map field-name="contentId" from-field="contentId"/>
                </entity-one>
                <set field="workEffortTypeStatusCnt" from-field="childView"/>
		        <if-empty field="workEffortTypeStatusCnt">
		        	<set field="workEffortTypeStatusCnt" from-field="parentView"/>
		        </if-empty>
		        <set field="toPost" from-field="workEffortTypeStatusCnt.toPost"/>
                <if-not-empty field="toPost">
		       		<log level="always" message=" #### For workEffortId = ${workEffortAssocExtView.workEffortIdTo}, toPost = ${toPost}"/>
                </if-not-empty>
                <if>
                    <condition>
                        <and>
                            <not>
                                <if-empty field="workEffortTypeStatusCnt"/>
                            </not>
                            <not>
                            	<if-empty field="toPost"/>
                            </not>
                        </and>
                    </condition>
                    <then>
                        <entity-condition list="workEffortAssignmentOrgUnitViewList" entity-name="WorkEffortAssignmentOrgUnitView">
                            <condition-list>
                                <condition-expr field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                            </condition-list>
                        </entity-condition>
                        <iterate entry="workEffortAssignmentOrgUnitView" list="workEffortAssignmentOrgUnitViewList">
                            <entity-one value-field="workEffortPartyAssignment" entity-name="WorkEffortPartyAssignment">
                                <field-map field-name="workEffortId" from-field="workEffortAssignmentOrgUnitView.workEffortId"/>
                                <field-map field-name="partyId" from-field="workEffortAssignmentOrgUnitView.partyId"/>
                                <field-map field-name="roleTypeId" from-field="workEffortAssignmentOrgUnitView.roleTypeId"/>
                                <field-map field-name="fromDate" from-field="workEffortAssignmentOrgUnitView.fromDate"/>
                            </entity-one>
                            <if-not-empty field="workEffortPartyAssignment">
                                <if-compare-field operator="not-equals" field="workEffortPartyAssignment.isPosted" to-field="toPost">
                                    <set field="workEffortPartyAssignment.isPosted" from-field="toPost"/>
                                    <store-value value-field="workEffortPartyAssignment"/>
                                    <check-errors/>
                                </if-compare-field>
                            </if-not-empty>
                        </iterate>
                    </then>
                </if>
            </iterate>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="crudServiceOperation_updateWorkEffortPartyAssignmentAssignmentIsPostedFlag" short-description="crudServiceOperation_updateWorkEffortPartyAssignmentAssignmentIsPostedFlag">
        <set field="parameters" from-field="parameters.parameters"/>

        <log level="always" message=" #### parameters.workEffortIdRoot ${parameters.workEffortIdRoot}"/>
        
        <entity-one value-field="workEffort" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortIdRoot"/>
        </entity-one>
        <if-not-empty field="workEffort">
            <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssocExtView">
                <condition-list>
                    <condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortIdRoot"/>
                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                </condition-list>
            </entity-condition>
		
		    <set field="contentId" value="WEFLD_PARTY"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <clear-field field="toPost"/>
        		<clear-field field="workEffortTypeStatusCnt"/>
        		<entity-one entity-name="WorkEffortTypeStatusCntChildView" value-field="childView">
                    <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                    <field-map field-name="contentId" from-field="contentId"/>
                </entity-one>
                <entity-one entity-name="WorkEffortTypeStatusCntParentView" value-field="parentView">
                    <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                    <field-map field-name="contentId" from-field="contentId"/>
                </entity-one>
                <set field="workEffortTypeStatusCnt" from-field="childView"/>
		        <if-empty field="workEffortTypeStatusCnt">
		        	<set field="workEffortTypeStatusCnt" from-field="parentView"/>
		        </if-empty>
		        <set field="toPost" from-field="workEffortTypeStatusCnt.toPost"/>
                <if-not-empty field="toPost">
		       		<log level="always" message=" #### For workEffortId = ${workEffortAssocExtView.workEffortIdTo}, toPost = ${toPost}"/>
                </if-not-empty>
                <if>
                    <condition>
                        <and>
                            <not>
                                <if-empty field="workEffortTypeStatusCnt"/>
                            </not>
                            <not>
                            	<if-empty field="toPost"/>
                            </not>
                        </and>
                    </condition>
                    <then>
                    	<entity-condition list="workEffortAssignmentAssignmentViewList" entity-name="WorkEffortAssignmentView">
                            <condition-list>
                                <condition-expr field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                                <condition-expr field-name="roleTypeId" value="WE_ASSIGNMENT"/>
                            </condition-list>
                        </entity-condition>
                        <iterate entry="workEffortAssignmentAssignmentView" list="workEffortAssignmentAssignmentViewList">
                            <entity-one value-field="workEffortPartyAssignment" entity-name="WorkEffortPartyAssignment">
                                <field-map field-name="workEffortId" from-field="workEffortPartyAssignment.workEffortId"/>
                                <field-map field-name="partyId" from-field="workEffortPartyAssignment.partyId"/>
                                <field-map field-name="roleTypeId" from-field="workEffortPartyAssignment.roleTypeId"/>
                                <field-map field-name="fromDate" from-field="workEffortPartyAssignment.fromDate"/>
                            </entity-one>
                            <if-not-empty field="workEffortPartyAssignment">
                                <if-compare-field operator="not-equals" field="workEffortPartyAssignment.isPosted" to-field="toPost">
                                    <set field="workEffortPartyAssignment.isPosted" from-field="toPost"/>
                                    <store-value value-field="workEffortPartyAssignment"/>
                                    <check-errors/>
                                </if-compare-field>
                            </if-not-empty>
                        </iterate>
                    </then>
                </if>
            </iterate>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="crudServiceOperation_updateWorkEffortPartyAssignmentRoleViewIsPostedFlag" short-description="crudServiceOperation_updateWorkEffortPartyAssignmentRoleViewIsPostedFlag">
        <set field="parameters" from-field="parameters.parameters"/>

       <log level="always" message=" #### parameters.workEffortIdRoot ${parameters.workEffortIdRoot}"/>
        
        <entity-one value-field="workEffort" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortIdRoot"/>
        </entity-one>
        <if-not-empty field="workEffort">
            <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssocExtView">
                <condition-list>
                    <condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortIdRoot"/>
                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                </condition-list>
            </entity-condition>

		    <set field="contentId" value="WEFLD_WROLE"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <clear-field field="toPost"/>
        		<clear-field field="workEffortTypeStatusCnt"/>
        		<entity-one entity-name="WorkEffortTypeStatusCntChildView" value-field="childView">
                    <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                    <field-map field-name="contentId" from-field="contentId"/>
                </entity-one>
                <entity-one entity-name="WorkEffortTypeStatusCntParentView" value-field="parentView">
                    <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                    <field-map field-name="contentId" from-field="contentId"/>
                </entity-one>
                <set field="workEffortTypeStatusCnt" from-field="childView"/>
		        <if-empty field="workEffortTypeStatusCnt">
		        	<set field="workEffortTypeStatusCnt" from-field="parentView"/>
		        </if-empty>
		        <set field="toPost" from-field="workEffortTypeStatusCnt.toPost"/>
                <if-not-empty field="toPost">
		       		<log level="always" message=" #### For workEffortId = ${workEffortAssocExtView.workEffortIdTo}, toPost = ${toPost}"/>
                </if-not-empty>
                <if>
                    <condition>
                        <and>
                            <not>
                                <if-empty field="workEffortTypeStatusCnt"/>
                            </not>
                            <not>
                            	<if-empty field="toPost"/>
                            </not>
                        </and>
                    </condition>
                    <then>
                        <entity-condition list="workEffortAssignmentRoleViewList" entity-name="WorkEffortAssignmentRoleView">
                            <condition-list>
                                <condition-expr field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                            </condition-list>
                        </entity-condition>
                        <iterate entry="workEffortAssignmentRoleView" list="workEffortAssignmentRoleViewList">
                            <entity-one value-field="workEffortPartyAssignment" entity-name="WorkEffortPartyAssignment">
                                <field-map field-name="workEffortId" from-field="workEffortAssignmentRoleView.workEffortId"/>
                                <field-map field-name="partyId" from-field="workEffortAssignmentRoleView.partyId"/>
                                <field-map field-name="roleTypeId" from-field="workEffortAssignmentRoleView.roleTypeId"/>
                                <field-map field-name="fromDate" from-field="workEffortAssignmentRoleView.fromDate"/>
                            </entity-one>
                            <if-not-empty field="workEffortPartyAssignment">
                                <if-compare-field operator="not-equals" field="workEffortPartyAssignment.isPosted" to-field="toPost">
                                    <set field="workEffortPartyAssignment.isPosted" from-field="toPost"/>
                                    <store-value value-field="workEffortPartyAssignment"/>
                                    <check-errors/>
                                </if-compare-field>
                            </if-not-empty>
                        </iterate>
                    </then>
                </if>
            </iterate>
        </if-not-empty>
    </simple-method>

	<simple-method method-name="executeWorkEffortAssocFromScript" short-description="execute the groovy script executeChildPerformFindWorkEffortNoteAndData and store the value isPosted for the workEffortAssoc ">
        <clear-field field="toPost"/>
        <clear-field field="workEffortTypeStatusCnt"/>
        <entity-one entity-name="WorkEffortTypeStatusCntChildView" value-field="childView">
            <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
            <field-map field-name="contentId" from-field="contentId"/>
        </entity-one>
        <entity-one entity-name="WorkEffortTypeStatusCntParentView" value-field="parentView">
            <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
            <field-map field-name="contentId" from-field="contentId"/>
        </entity-one>
        <set field="workEffortTypeStatusCnt" from-field="childView"/>
        <if-empty field="workEffortTypeStatusCnt">
        	<set field="workEffortTypeStatusCnt" from-field="parentView"/>
        </if-empty>
        <set field="toPost" from-field="workEffortTypeStatusCnt.toPost"/>
        <if-not-empty field="toPost">
		    <log level="always" message=" #### For workEffortId = ${workEffortAssocExtView.workEffortIdTo}, toPost = ${toPost}"/>
		</if-not-empty>
        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="workEffortTypeStatusCnt"/>
                    </not>
                    <not>
                    	<if-empty field="toPost"/>
                    </not>
                </and>
            </condition>
            <then>
                <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="toTimeZone" ret-field="currentTimeZone">
					<string value=""/>
				</call-class-method>
            	<call-bsh>
        		<![CDATA[
        			groovyContext = new java.util.HashMap();
        			groovyContext.put("dispatcher", dispatcher);
   					groovyContext.put("delegator", delegator);
   					groovyContext.put("locale", locale);
   					groovyContext.put("timeZone", currentTimeZone);
   					groovyContext.put("entityName", "WorkEffortAssocExtView");
   					groovyContext.put("parentEntityName", "WorkEffortView");
   					
   					parameters.put("workEffortId", workEffortAssocExtView.get("workEffortIdTo"));
   					parameters.put("contentId", contentId);
   					groovyContext.put("parameters", parameters);
   					
   					inputFields = new java.util.HashMap();
        			groovyContext.put("inputFields", inputFields);
   					
   					context = new java.util.HashMap();
   					context.put("workEffortId", workEffortAssocExtView.get("workEffortIdTo"));
   					groovyContext.put("context", context);
            					
   					org.ofbiz.base.util.GroovyUtil.runScriptAtLocation("component:/workeffortext/webapp/workeffortext/WEB-INF/actions/executeChildPerformFindWorkEffortAssocExtFromSpecial.groovy", groovyContext);
        			result = new java.util.HashMap();
            		result.put("workEffortAssocFromList", groovyContext.get("listIt"));
            
            		return result;
        		]]>
                </call-bsh>
                <check-errors/>
                <if-not-empty field="workEffortAssocFromList">
                	<iterate entry="workEffortAssocFrom" list="workEffortAssocFromList">
                    	<entity-one value-field="workEffortAssoc" entity-name="WorkEffortAssoc">
                        	<field-map field-name="workEffortIdFrom" from-field="workEffortAssocFrom.workEffortIdFrom"/>
                        	<field-map field-name="workEffortIdTo" from-field="workEffortAssocFrom.workEffortIdTo"/>
                        	<field-map field-name="workEffortAssocTypeId" from-field="workEffortAssocFrom.workEffortAssocTypeId"/>
                        	<field-map field-name="fromDate" from-field="workEffortAssocFrom.fromDate"/>
                     	</entity-one>
                     	<if-not-empty field="workEffortAssoc">
							<if-compare-field operator="not-equals" field="workEffortAssoc.isPosted" to-field="toPost">
                                <set field="workEffortAssoc.isPosted" from-field="toPost"/>
                      		    <store-value value-field="workEffortAssoc"/>
                      		    <check-errors/>
                            </if-compare-field>
						</if-not-empty>
                	</iterate>
            	</if-not-empty>
            </then>
        </if>
    </simple-method>
    
    <simple-method method-name="crudServiceOperation_updateWorkEffortAssocExtViewFromIsPostedFlag" short-description="crudServiceOperation_updateWorkEffortAssocExtViewFromIsPostedFlag">
        <set field="parameters" from-field="parameters.parameters"/>

        <log level="always" message=" #### parameters.workEffortIdRoot ${parameters.workEffortIdRoot}"/>
        
        <entity-one value-field="workEffort" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortIdRoot"/>
        </entity-one>
        <if-not-empty field="workEffort">
            <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssocExtView">
                <condition-list>
                    <condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortIdRoot"/>
                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                </condition-list>
            </entity-condition>
            
            <set field="contentId" value="WEFLD_WEFROM"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
            	<call-simple-method method-name="executeWorkEffortAssocFromScript"/>
            </iterate>
            
            <set field="contentId" value="WEFLD_WEFROM2"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
            	<call-simple-method method-name="executeWorkEffortAssocFromScript"/>
            </iterate>
            
            <set field="contentId" value="WEFLD_WEFROM3"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
            	<call-simple-method method-name="executeWorkEffortAssocFromScript"/>
            </iterate>
            
            <set field="contentId" value="WEFLD_WEFROM4"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
            	<call-simple-method method-name="executeWorkEffortAssocFromScript"/>
            </iterate>
        </if-not-empty>
    </simple-method>

	<simple-method method-name="executeWorkEffortAssocToScript" short-description="execute the groovy script executeChildPerformFindWorkEffortNoteAndData and store the value isPosted for the workEffortAssoc ">
        <clear-field field="toPost"/>
        <clear-field field="workEffortTypeStatusCnt"/>
        <entity-one entity-name="WorkEffortTypeStatusCntChildView" value-field="childView">
            <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
            <field-map field-name="contentId" from-field="contentId"/>
        </entity-one>
        <entity-one entity-name="WorkEffortTypeStatusCntParentView" value-field="parentView">
            <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
            <field-map field-name="contentId" from-field="contentId"/>
        </entity-one>
        <set field="workEffortTypeStatusCnt" from-field="childView"/>
        <if-empty field="workEffortTypeStatusCnt">
        	<set field="workEffortTypeStatusCnt" from-field="parentView"/>
        </if-empty>
        <set field="toPost" from-field="workEffortTypeStatusCnt.toPost"/>
        <if-not-empty field="toPost">
		    <log level="always" message=" #### For workEffortId = ${workEffortAssocExtView.workEffortIdTo}, toPost = ${toPost}"/>
        </if-not-empty>
        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="workEffortTypeStatusCnt"/>
                    </not>
                    <not>
                    	<if-empty field="toPost"/>
                    </not>
                </and>
            </condition>
            <then>
                <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="toTimeZone" ret-field="currentTimeZone">
					<string value=""/>
				</call-class-method>
            	<call-bsh>
        		<![CDATA[
        			groovyContext = new java.util.HashMap();
        			groovyContext.put("dispatcher", dispatcher);
   					groovyContext.put("delegator", delegator);
   					groovyContext.put("locale", locale);
   					groovyContext.put("timeZone", currentTimeZone);
   					groovyContext.put("entityName", "WorkEffortAssocExtView");
   					groovyContext.put("parentEntityName", "WorkEffortView");
   					
   					parameters.put("workEffortId", workEffortAssocExtView.get("workEffortIdTo"));
   					parameters.put("contentId", contentId);
   					groovyContext.put("parameters", parameters);
   					
   					inputFields = new java.util.HashMap();
        			groovyContext.put("inputFields", inputFields);
   					
   					context = new java.util.HashMap();
   					context.put("workEffortId", workEffortAssocExtView.get("workEffortIdTo"));
   					groovyContext.put("context", context);
            					
   					org.ofbiz.base.util.GroovyUtil.runScriptAtLocation("component:/workeffortext/webapp/workeffortext/WEB-INF/actions/executeChildPerformFindWorkEffortAssocExtToSpecial.groovy", groovyContext);
        			result = new java.util.HashMap();
            		result.put("workEffortAssocFromList", groovyContext.get("listIt"));
            
            		return result;
        		]]>
                </call-bsh>
                <check-errors/>
                <if-not-empty field="workEffortAssocFromList">
                	<iterate entry="workEffortAssocFrom" list="workEffortAssocFromList">
                    	<entity-one value-field="workEffortAssoc" entity-name="WorkEffortAssoc">
                        	<field-map field-name="workEffortIdFrom" from-field="workEffortAssocFrom.workEffortIdFrom"/>
                        	<field-map field-name="workEffortIdTo" from-field="workEffortAssocFrom.workEffortIdTo"/>
                        	<field-map field-name="workEffortAssocTypeId" from-field="workEffortAssocFrom.workEffortAssocTypeId"/>
                        	<field-map field-name="fromDate" from-field="workEffortAssocFrom.fromDate"/>
                     	</entity-one>
                     	<if-not-empty field="workEffortAssoc">
							<if-compare-field operator="not-equals" field="workEffortAssoc.isPosted" to-field="toPost">
                                <set field="workEffortAssoc.isPosted" from-field="toPost"/>
                      		    <store-value value-field="workEffortAssoc"/>
                      		    <check-errors/>
                            </if-compare-field>
						</if-not-empty>
                	</iterate>
            	</if-not-empty>
            </then>
        </if>
    </simple-method>
    
    <simple-method method-name="crudServiceOperation_updateWorkEffortAssocExtViewToIsPostedFlag" short-description="crudServiceOperation_updateWorkEffortAssocExtViewToIsPostedFlag">
        <set field="parameters" from-field="parameters.parameters"/>

		<log level="always" message=" #### parameters.workEffortIdRoot ${parameters.workEffortIdRoot}"/>
        
        <entity-one value-field="workEffort" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortIdRoot"/>
        </entity-one>
        <if-not-empty field="workEffort">
            <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssocExtView">
                <condition-list>
                    <condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortIdRoot"/>
                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                </condition-list>
            </entity-condition>

            <set field="contentId" value="WEFLD_WETO"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <call-simple-method method-name="executeWorkEffortAssocToScript"/>
            </iterate>

			<set field="contentId" value="WEFLD_WETO2"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <call-simple-method method-name="executeWorkEffortAssocToScript"/>
            </iterate>
            
            <set field="contentId" value="WEFLD_WETO3"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <call-simple-method method-name="executeWorkEffortAssocToScript"/>
            </iterate>
            
            <set field="contentId" value="WEFLD_WETO4"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <call-simple-method method-name="executeWorkEffortAssocToScript"/>
            </iterate>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="crudServiceOperation_updateWorkEffortMeasureResIsPostedFlag" short-description="crudServiceOperation_updateWorkEffortMeasureResIsPostedFlag">
        <set field="parameters" from-field="parameters.parameters"/>

		<log level="always" message=" #### parameters.workEffortIdRoot ${parameters.workEffortIdRoot}"/>
        
        <entity-one value-field="workEffort" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortIdRoot"/>
        </entity-one>
        <if-not-empty field="workEffort">
            <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssocExtView">
                <condition-list>
                    <condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortIdRoot"/>
                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                </condition-list>
            </entity-condition>

            <set field="contentId" value="WEFLD_MFIN"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <clear-field field="toPost"/>
                <clear-field field="workEffortTypeStatusCnt"/>
                <entity-one entity-name="WorkEffortTypeStatusCntChildView" value-field="childView">
                    <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                    <field-map field-name="contentId" from-field="contentId"/>
                </entity-one>
                <entity-one entity-name="WorkEffortTypeStatusCntParentView" value-field="parentView">
                    <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                    <field-map field-name="contentId" from-field="contentId"/>
                </entity-one>
                <set field="workEffortTypeStatusCnt" from-field="childView"/>
		        <if-empty field="workEffortTypeStatusCnt">
		        	<set field="workEffortTypeStatusCnt" from-field="parentView"/>
		        </if-empty>
		        <set field="toPost" from-field="workEffortTypeStatusCnt.toPost"/>
		        <if-not-empty field="toPost">
		       	    <log level="always" message=" #### For workEffortId = ${workEffortAssocExtView.workEffortIdTo}, toPost = ${toPost}"/>
                </if-not-empty>
                <if>
                    <condition>
                        <and>
                            <not>
                                <if-empty field="workEffortTypeStatusCnt"/>
                            </not>
                            <not>
		                    	<if-empty field="toPost"/>
		                    </not>
                        </and>
                    </condition>
                    <then>
                        <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="toTimeZone" ret-field="currentTimeZone">
							<string value=""/>
						</call-class-method>
		            	<call-bsh>
		        		<![CDATA[
		        			groovyContext = new java.util.HashMap();
		        			groovyContext.put("dispatcher", dispatcher);
		   					groovyContext.put("delegator", delegator);
		   					groovyContext.put("locale", locale);
		   					groovyContext.put("timeZone", currentTimeZone);
		   					groovyContext.put("userLogin", userLogin);
		   					
		   					groovyContext.put("parentEntityName", "WorkEffortView");
		   					
		   					parameters.put("workEffortId", workEffortAssocExtView.get("workEffortIdTo"));
		   					parameters.put("layoutType", contentId);
   							parameters.put("insertMode", "N");
   							groovyContext.put("parameters", parameters);
		   					
		   					inputFields = new java.util.HashMap();
		        			groovyContext.put("inputFields", inputFields);
		   					
		   					context = new java.util.HashMap();
		   					context.put("workEffortId", workEffortAssocExtView.get("workEffortIdTo"));
   							groovyContext.put("context", context);
		            					
		   					org.ofbiz.base.util.GroovyUtil.runScriptAtLocation("component:/workeffortext/webapp/workeffortext/WEB-INF/actions/executeChildPerformFindWEMResource.groovy", groovyContext);
		        			result = new java.util.HashMap();
		            		result.put("workEffortMeasureList", groovyContext.get("listIt"));
		            
		            		return result;
		            		
		        		]]>
		                </call-bsh>
		                <check-errors/>
		                <if-not-empty field="workEffortMeasureList">
		                	<iterate entry="workEffortMeasure" list="workEffortMeasureList">
		                    	<entity-one value-field="workEffortMeasure" entity-name="WorkEffortMeasure">
		                        	<field-map field-name="workEffortMeasureId" from-field="workEffortMeasure.workEffortMeasureId"/>
		                     	</entity-one>
		                     	<if-not-empty field="workEffortMeasure">
                                    <if-compare-field operator="not-equals" field="workEffortMeasure.isPosted" to-field="toPost">
                                        <set field="workEffortMeasure.isPosted" from-field="toPost"/>
		                      		    <store-value value-field="workEffortMeasure"/>
		          					    <check-errors/>
                                    </if-compare-field>
								</if-not-empty>
		                	</iterate>
		            	</if-not-empty>
                    </then>
                </if>
            </iterate>
        </if-not-empty>
    </simple-method>

	<simple-method method-name="executeWorkEffortMeasureScript" short-description="execute the groovy script executeChildPerformFindWorkEffortNoteAndData and store the value isPosted for the workEffortAssoc ">
        <clear-field field="toPost"/>
        <clear-field field="workEffortTypeStatusCnt"/>
        <entity-one entity-name="WorkEffortTypeStatusCntChildView" value-field="childView">
            <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
            <field-map field-name="contentId" from-field="contentId"/>
        </entity-one>
        <entity-one entity-name="WorkEffortTypeStatusCntParentView" value-field="parentView">
            <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
            <field-map field-name="contentId" from-field="contentId"/>
        </entity-one>
        <set field="workEffortTypeStatusCnt" from-field="childView"/>
        <if-empty field="workEffortTypeStatusCnt">
        	<set field="workEffortTypeStatusCnt" from-field="parentView"/>
        </if-empty>
        <set field="toPost" from-field="workEffortTypeStatusCnt.toPost"/>
        <if-not-empty field="toPost">
		    <log level="always" message=" #### For workEffortId = ${workEffortAssocExtView.workEffortIdTo}, toPost = ${toPost}"/>
        </if-not-empty>
        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="workEffortTypeStatusCnt"/>
                    </not>
                    <not>
                    	<if-empty field="toPost"/>
                    </not>
                </and>
            </condition>
            <then>
                <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="toTimeZone" ret-field="currentTimeZone">
					<string value=""/>
				</call-class-method>
            	<call-bsh>
        		<![CDATA[
        			groovyContext = new java.util.HashMap();
        			groovyContext.put("dispatcher", dispatcher);
   					groovyContext.put("delegator", delegator);
   					groovyContext.put("locale", locale);
   					groovyContext.put("timeZone", currentTimeZone);
   					groovyContext.put("userLogin", userLogin);
		   					
   					groovyContext.put("parentEntityName", "WorkEffortView");
   					
   					groovyContext.put("contentIdInd", contentId);
   					
   					parameters.put("workEffortId", workEffortAssocExtView.get("workEffortIdTo"));
   					parameters.put("contentIdInd", contentId);
   					groovyContext.put("parameters", parameters);
   					
   					inputFields = new java.util.HashMap();
        			groovyContext.put("inputFields", inputFields);
   					
   					context = new java.util.HashMap();
   					context.put("workEffortId", workEffortAssocExtView.get("workEffortIdTo"));
   					groovyContext.put("context", context);
            					
   					org.ofbiz.base.util.GroovyUtil.runScriptAtLocation("component:/workeffortext/webapp/workeffortext/WEB-INF/actions/executeChildPerformFindWEMIndicator.groovy", groovyContext);
        			result = new java.util.HashMap();
            		result.put("workEffortMeasureList", groovyContext.get("listIt"));
            
            		return result;
            		
        		]]>
                </call-bsh>
                <check-errors/>
                <if-not-empty field="workEffortMeasureList">
                	<iterate entry="workEffortMeasure" list="workEffortMeasureList">
                    	<log level="always" message=" #### workEffortMeasure ${workEffortMeasure.workEffortMeasureId}"/>
                        <entity-one value-field="workEffortMeasure" entity-name="WorkEffortMeasure">
                        	<field-map field-name="workEffortMeasureId" from-field="workEffortMeasure.workEffortMeasureId"/>
                     	</entity-one>
                     	<if-not-empty field="workEffortMeasure">
                            <if-compare-field operator="not-equals" field="workEffortMeasure.isPosted" to-field="toPost">
              					<set field="workEffortMeasure.isPosted" from-field="toPost"/>
                          		<store-value value-field="workEffortMeasure"/>
              					<check-errors/>
                            </if-compare-field>
						</if-not-empty>
                	</iterate>
            	</if-not-empty>
            </then>
        </if>
    </simple-method>
    
    <simple-method method-name="crudServiceOperation_updateWorkEffortMeasureIndIsPostedFlag" short-description="crudServiceOperation_updateWorkEffortMeasureIndIsPostedFlag">
        <set field="parameters" from-field="parameters.parameters"/>
		<log level="always" message=" #### parameters.workEffortIdRoot ${parameters.workEffortIdRoot}"/>
        
        <entity-one value-field="workEffort" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortIdRoot"/>
        </entity-one>
        <if-not-empty field="workEffort">
            <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssocExtView">
                <condition-list>
                    <condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortIdRoot"/>
                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                </condition-list>
            </entity-condition>
                        
            <set field="contentId" value="WEFLD_IND"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <call-simple-method method-name="executeWorkEffortMeasureScript"/>
            </iterate>
                
            <set field="contentId" value="WEFLD_IND2"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <call-simple-method method-name="executeWorkEffortMeasureScript"/>
            </iterate>
            
            <set field="contentId" value="WEFLD_IND3"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <call-simple-method method-name="executeWorkEffortMeasureScript"/>
            </iterate>
            
            <set field="contentId" value="WEFLD_IND4"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <call-simple-method method-name="executeWorkEffortMeasureScript"/>
            </iterate>
            
            <set field="contentId" value="WEFLD_IND5"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <call-simple-method method-name="executeWorkEffortMeasureScript"/>
            </iterate>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="crudServiceOperation_updateWorkEffortTransactionResIsPostedFlag" short-description="crudServiceOperation_updateWorkEffortTransactionResIsPostedFlag">
        <set field="parameters" from-field="parameters.parameters"/>

		<log level="always" message=" #### parameters.workEffortIdRoot ${parameters.workEffortIdRoot}"/>
        
        <entity-one value-field="workEffort" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortIdRoot"/>
        </entity-one>
        <if-not-empty field="workEffort">
            <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssocExtView">
                <condition-list>
                    <condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortIdRoot"/>
                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                </condition-list>
            </entity-condition>

            <set field="contentId" value="WEFLD_AFIN"/>
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <clear-field field="toPost"/>
		        <clear-field field="workEffortTypeStatusCnt"/>
		        <entity-one entity-name="WorkEffortTypeStatusCntChildView" value-field="childView">
                    <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                    <field-map field-name="contentId" from-field="contentId"/>
                </entity-one>
                <entity-one entity-name="WorkEffortTypeStatusCntParentView" value-field="parentView">
                    <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
                    <field-map field-name="contentId" from-field="contentId"/>
                </entity-one>
                <set field="workEffortTypeStatusCnt" from-field="childView"/>
		        <if-empty field="workEffortTypeStatusCnt">
		        	<set field="workEffortTypeStatusCnt" from-field="parentView"/>
		        </if-empty>
		        <set field="toPost" from-field="workEffortTypeStatusCnt.toPost"/>
		        <if-not-empty field="toPost">
		       		<log level="always" message=" #### For workEffortId = ${workEffortAssocExtView.workEffortIdTo}, toPost = ${toPost}"/>
                </if-not-empty>
                <if>
                    <condition>
                        <and>
                            <not>
                                <if-empty field="workEffortTypeStatusCnt"/>
                            </not>
                        </and>
                    </condition>
                    <then>
                        <call-bsh>
		              		<![CDATA[
		              			groovyContext = new java.util.HashMap();
		              			groovyContext.put("dispatcher", dispatcher);
            					groovyContext.put("delegator", delegator);
            					groovyContext.put("parameters", parameters);
            					groovyContext.put("userLogin", userLogin);
		   					
            					context = new java.util.HashMap();
            					context.put("workEffortId", workEffortAssocExtView.get("workEffortIdTo"));
            					parameters.put("workEffortId", workEffortAssocExtView.get("workEffortIdTo"));
   								groovyContext.put("parameters", parameters);
            					groovyContext.put("locale", locale);
            					groovyContext.put("context", context);
            					org.ofbiz.base.util.GroovyUtil.runScriptAtLocation("component:/workeffortext/webapp/workeffortext/WEB-INF/actions/executeChildPerformFindWETResource.groovy", groovyContext);
		              			result = new java.util.HashMap();
		                  		result.put("workEffortTransactionAndPurposeAccountResList", groovyContext.get("listIt"));
		                  
		                  		return result;
		              		]]>
                        </call-bsh>
                        <check-errors/>
                        <iterate entry="workEffortTransactionAndPurposeAccountRes" list="workEffortTransactionAndPurposeAccountResList">
                            <entity-one value-field="acctgTrans" entity-name="AcctgTrans">
                                <field-map field-name="acctgTransId" from-field="workEffortTransactionAndPurposeAccountRes.weTransId"/>
                            </entity-one>
                            <if-not-empty field="acctgTrans">
                                <if-compare-field operator="not-equals" field="acctgTrans.isPosted" to-field="toPost">
                                    <set field="acctgTrans.isPosted" from-field="toPost"/>
                                    <store-value value-field="acctgTrans"/>
                                    <check-errors/>
                                </if-compare-field>
                            </if-not-empty>
                        </iterate>
                    </then>
                </if>
            </iterate>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="updateWorkEffortTransactionIndIsPostedFlag" short-description="updateWorkEffortTransactionIndIsPostedFlag">   
        <clear-field field="toPost"/>
        <clear-field field="workEffortTypeStatusCnt"/>
        <entity-one entity-name="WorkEffortTypeStatusCntChildView" value-field="childView">
            <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
            <field-map field-name="contentId" from-field="transContentId"/>
        </entity-one>
        <entity-one entity-name="WorkEffortTypeStatusCntParentView" value-field="parentView">
            <field-map field-name="workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
            <field-map field-name="contentId" from-field="transContentId"/>
        </entity-one>
        <set field="workEffortTypeStatusCnt" from-field="childView"/>
        <if-empty field="workEffortTypeStatusCnt">
        	<set field="workEffortTypeStatusCnt" from-field="parentView"/>
        </if-empty>
        <set field="toPost" from-field="workEffortTypeStatusCnt.toPost"/>
        <if-not-empty field="toPost">
		    <log level="always" message=" #### For workEffortId = ${workEffortAssocExtView.workEffortIdTo}, toPost = ${toPost}, contentId = ${contentId}"/>
        </if-not-empty>
        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="workEffortTypeStatusCnt"/>
                    </not>
                    <not>
                    	<if-empty field="toPost"/>
                    </not>
                </and>
            </condition>
            <then>
                <set field="mappa.workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
 				<set field="mappa.contentId" from-field="contentId"/>
                <call-service service-name="executeChildPerformFindTransIndicator" in-map-name="mappa">
 					<result-to-field result-name="rowList" field="workEffortTransactionList"/>
 				</call-service>
                <if-not-empty field="workEffortTransactionList">
                	<iterate entry="item" list="workEffortTransactionList">
                        <set field="workEffortTransaction" from-field="item.gv"/>
                		<if-not-empty field="workEffortTransaction.weTransId">
	                		<entity-one value-field="acctgTrans" entity-name="AcctgTrans">
	                            <field-map field-name="acctgTransId" from-field="workEffortTransaction.weTransId"/>
	                        </entity-one>
	                        <if-not-empty field="acctgTrans">
                                <if-compare-field operator="not-equals" field="acctgTrans.isPosted" to-field="toPost">
    	                            <set field="acctgTrans.isPosted" from-field="toPost"/>
    	                            <store-value value-field="acctgTrans"/>
    	                            <check-errors/>
                                </if-compare-field>
	                        </if-not-empty>
	                    </if-not-empty>
                    </iterate>
            	</if-not-empty>
            </then>
        </if>
    </simple-method>

    <simple-method method-name="crudServiceOperation_updateWorkEffortTransactionIndIsPostedFlag" short-description="crudServiceOperation_updateWorkEffortTransactionIndIsPostedFlag">
        <set field="parameters" from-field="parameters.parameters"/>
		<log level="always" message=" #### parameters.workEffortIdRoot ${parameters.workEffortIdRoot}"/>
        
        <entity-one value-field="workEffort" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortIdRoot"/>
        </entity-one>
        <if-not-empty field="workEffort">
            <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssocExtView">
                <condition-list>
                    <condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortIdRoot"/>
                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                </condition-list>
            </entity-condition>
            
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
	            <!-- contentId contains value of indicator (WEFLD_INDX, not WEFLD_AINDX) for match workeffortPurposeType -->
	            <!-- transContentId contains value WEFLD_AINDX for match workEffortTypeStatusCnt -->
	            <set field="contentId" value="WEFLD_IND"/>
	            <set field="transContentId" value="WEFLD_AIND"/>
	            <call-simple-method method-name="updateWorkEffortTransactionIndIsPostedFlag"/>
	            
	            <set field="contentId" value="WEFLD_IND2"/>
	            <set field="transContentId" value="WEFLD_AIND2"/>
	            <call-simple-method method-name="updateWorkEffortTransactionIndIsPostedFlag"/>
	            
	            <set field="contentId" value="WEFLD_IND3"/>
	            <set field="transContentId" value="WEFLD_AIND3"/>
	            <call-simple-method method-name="updateWorkEffortTransactionIndIsPostedFlag"/>
	            
	            <set field="contentId" value="WEFLD_IND4"/>
	            <set field="transContentId" value="WEFLD_AIND4"/>
	            <call-simple-method method-name="updateWorkEffortTransactionIndIsPostedFlag"/>
	            
	            <set field="contentId" value="WEFLD_IND5"/>
	            <set field="transContentId" value="WEFLD_AIND5"/>
	            <call-simple-method method-name="updateWorkEffortTransactionIndIsPostedFlag"/>
	        </iterate>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="crudServiceOperation_WorkEffortTypeContentFolder" short-description="crudServiceValueValidation_WorkEffortTypeStatus">
        <log level="verbose" message="**** parameters=${parameters}"/>
        <set-service-fields service-name="crudServiceOperation" to-map="crudServiceOperationMap" map="parameters"/>
        <set field="parameters" from-field="parameters.parameters"/>

        <set-service-fields service-name="crudServiceDefaultOrchestration" to-map="crudServiceDefaultOrchestrationParams" map="parameters"/>
        <set field="crudServiceDefaultOrchestrationParams.parameters.operation" value="parameters.operation"/>

        <make-value value-field="crudServiceDefaultOrchestrationParams.parameters" entity-name="WorkEffortTypeContent"/>
        <set-pk-fields value-field="crudServiceDefaultOrchestrationParams.parameters" map="parameters"/>
        <set-nonpk-fields value-field="crudServiceDefaultOrchestrationParams.parameters" map="parameters"/>
        <set field="crudServiceDefaultOrchestrationParams.entityName" value="WorkEffortTypeContent"/>
        <call-object-method method-name="getAllFields" obj-field="crudServiceDefaultOrchestrationParams.parameters" ret-field="crudServiceDefaultOrchestrationParams.parameters"/>
        
        <!--  i params sono validi prima nel layoutContentId, altrimenti nel contentId -->
        <if-not-empty field="parameters.layoutContentId">
        	<set field="crudServiceDefaultOrchestrationParams.parameters.params" value="" set-if-null="true"/>
        	<else>
        		<set field="crudServiceDefaultOrchestrationParams.parameters.params" from-field="parameters.params"/>
        	</else>
        </if-not-empty>

        <call-service service-name="crudServiceDefaultOrchestration" in-map-name="crudServiceDefaultOrchestrationParams">
            <result-to-field result-name="id"/>
        </call-service>
        <check-errors/>

        <!-- trova lista di layout e confronta con cio che arriva -->
        <entity-and list="listWorkEffortTypeContent" entity-name="WorkEffortTypeContent">
            <field-map field-name="workEffortTypeId" from-field="parameters.workEffortTypeId"/>
            <field-map field-name="weTypeContentTypeId" from-field="parameters.contentId"/>
        </entity-and>
        <if-not-empty field="listWorkEffortTypeContent">
            <first-from-list entry="workEffortTypeContent" list="listWorkEffortTypeContent"/>
            <if-empty field="parameters.layoutContentId">
                <remove-value value-field="workEffortTypeContent"/>
            </if-empty>
            <if-compare-field field="parameters.layoutContentId" operator="not-equals" to-field="workEffortTypeContent.contentId">
                <remove-value value-field="workEffortTypeContent"/>
            </if-compare-field>
        </if-not-empty>

        <if-not-empty field="parameters.layoutContentId">
            <entity-one value-field="layoutContent" entity-name="Content">
                <field-map field-name="contentId" from-field="parameters.layoutContentId"/>
            </entity-one>

            <if-not-empty field="layoutContent">
                <entity-one value-field="otherWorkEffortTypeContent" entity-name="WorkEffortTypeContent">
                    <field-map field-name="workEffortTypeId" from-field="parameters.workEffortTypeId"/>
                    <field-map field-name="contentId" from-field="parameters.layoutContentId"/>
                </entity-one>
                <if-empty field="otherWorkEffortTypeContent">
                    <set field="parameters.operation" value="CREATE"/>
                </if-empty>
                <set-service-fields service-name="crudServiceDefaultOrchestration" to-map="otherParams" map="parameters"/>
                <make-value value-field="otherParams.parameters" entity-name="WorkEffortTypeContent"/>
                <set field="otherParams.parameters.params" from-field="parameters.params"/>
                <set field="otherParams.parameters.workEffortTypeId" from-field="parameters.workEffortTypeId"/>
                <set field="otherParams.parameters.contentId" from-field="parameters.layoutContentId"/>
                <set field="otherParams.parameters.weTypeContentTypeId" from-field="layoutContent.contentTypeId"/>
                <set field="otherParams.entityName" value="WorkEffortTypeContent"/>
                <call-object-method method-name="getAllFields" obj-field="otherParams.parameters" ret-field="otherParams.parameters"/>

                <call-service service-name="crudServiceDefaultOrchestration" in-map-name="otherParams">
                </call-service>
                <check-errors/>
            </if-not-empty>
        </if-not-empty>
    </simple-method>

    <!-- Bug 4374 -->
    <simple-method method-name="workEffortContentPostCreate" short-description="workEffortContentPostCreate">
        <entity-one value-field="workEffortContentType" entity-name="WorkEffortContentType"/>
        <entity-one value-field="content" entity-name="Content"/>
        <if-compare field="workEffortContentType.inInquiry" operator="equals" value="Y">
            <make-value value-field="contentAssoc" entity-name="ContentAssoc"/>
            <set field="contentAssoc.contentId" value="WE_CRU_ANALYSIS"/>
            <set field="contentAssoc.contentIdTo" from-field="parameters.contentId"/>
            <set field="contentAssoc.contentAssocTypeId" value="CRU_CONTENT"/>
            <set field="contentAssoc.fromDate" from-field="content.createdDate"/>
            <create-value value-field="contentAssoc"/>
        </if-compare>
        <check-errors/>
        <field-to-result field="content.contentName" result-name="contentName"/>
    </simple-method>

    <!-- Bug 4279 TODO ELIMINATO -->
	<simple-method method-name="crudServiceOperation_WorkEffortTypePeriod" short-description="crudServiceValueValidation_WorkEffortTypePeriod">
		<log level="verbose" message="**** parameters=${parameters}"/>
		<set-service-fields service-name="crudServiceOperation" to-map="crudServiceOperationMap" map="parameters"/>
		<log level="verbose" message="**** crudServiceOperationMap"/>
		<set field="parameters" from-field="parameters.parameters"/>

		<!-- mi salvo il vecchio valore per fare le verifiche sulla status -->
		<if-compare operator="equals" value="UPDATE" field="parameters.operation">
			<entity-one value-field="oldWorkEffortTypePeriod" entity-name="WorkEffortTypePeriod">
				<field-map field-name="workEffortTypePeriodId" from-field="parameters.workEffortTypePeriodId"/>
			</entity-one>
		</if-compare>

		<!-- SALVATAGGIO DATI -->
		<call-service service-name="crudServiceOperation" in-map-name="crudServiceOperationMap">
			<result-to-field result-name="id"/>
		</call-service>
		<check-errors/>
		
		
		<!-- metto nuova condizione
			1. se apro periodo e openAllRoots = Y allora eseguo nuovo servizione altrimenti fine
		 -->
		<if>
			<condition>
				<and>
					<if-compare field="parameters.statusEnumId" operator="equals" value="OPEN"/>
					<if-compare field="parameters.openAllRoots" operator="equals" value="Y" />
					<if-compare-field operator="not-equals" field="oldWorkEffortTypePeriod.statusEnumId" to-field="parameters.statusEnumId"/>
				</and>
			</condition>
			<then>
				<set-service-fields service-name="openPeriodWorkEffortTypePeriod" to-map="openPeriodWorkEffortTypePeriodMap" map="parameters"/>
				<call-service service-name="openPeriodWorkEffortTypePeriod" in-map-name="openPeriodWorkEffortTypePeriodMap"/>
				<check-errors/>
			</then>
		</if>
		
	

		<!--  GN-1983 se apro il periodo e non voglio aprire le schede faccio solo aggiornamento periodo 
		<if>
			<condition>
				<or>
					<if-compare field="parameters.statusEnumId" operator="not-equals" value="OPEN" />
					<if-compare field="parameters.openAllRoots" operator="equals" value="Y" />
				</or>
			</condition>
			<then>
				<if-not-empty field="id.workEffortTypePeriodId">
					<set field="workEffortTypePeriodId" from-field="id.workEffortTypePeriodId"/>
					<else>
						<set field="workEffortTypePeriodId" from-field="parameters.workEffortTypePeriodId"/>
					</else>
				</if-not-empty>


				carico il periodo selezionato
				<entity-one value-field="workEffortTypePeriod" entity-name="WorkEffortTypePeriod">
					<field-map field-name="workEffortTypePeriodId" from-field="workEffortTypePeriodId"/>
				</entity-one>

				carico il periodo
				<entity-one value-field="customTimePeriod" entity-name="CustomTimePeriod">
					<field-map field-name="customTimePeriodId" from-field="workEffortTypePeriod.customTimePeriodId"/>
				</entity-one>


				esecuzione punto 5.7 quando il cambio stato è open - reopen- rilevabile
					 applico la condizione - solo al passaggio di stato!!!
				<if>
					<condition>
						<and>
							<or>
								<if-compare field="parameters.statusEnumId" operator="equals" value="OPEN"/>
								<if-compare field="parameters.statusEnumId" operator="equals" value="REOPEN"/>
								<if-compare field="parameters.statusEnumId" operator="equals" value="DETECTABLE"/>
							</or>
							<if-compare-field operator="not-equals" field="oldWorkEffortTypePeriod.statusEnumId" to-field="parameters.statusEnumId"/>
						</and>
					</condition>
					<then>
						Il cambio di stato deve essere fatto se passo ad OPEN
						<if>
							<condition>
								<or>
									<and>
										<not>
											<if-empty field="workEffortTypePeriod"></if-empty>
										</not>
										<if-compare operator="equals" value="OPEN" field="parameters.statusEnumId"/>
									</and>
									<if-empty field="workEffortTypePeriod"></if-empty>
								</or>
							</condition>
							<then>
								<if-empty field="parameters.statusTypeId">
									<add-error>
										<fail-property resource="WorkeffortExtErrorLabels" property="StatusTypeWorkEffortTypePeriodNotNullValidation"/>
									</add-error>
									<check-errors/>
								</if-empty>
								<entity-one entity-name="StatusType" value-field="statusType">
									<field-map field-name="statusTypeId" from-field="parameters.statusTypeId"/>
								</entity-one>
								<if-empty field="statusType">
									<add-error>
										<fail-property resource="WorkeffortExtErrorLabels" property="StatusTypeWorkEffortTypePeriodNotNullValidation"/>
									</add-error>
									<check-errors/>
								</if-empty>
								<entity-and entity-name="StatusItem" list="statusItemList">
									<field-map field-name="statusTypeId" from-field="parameters.statusTypeId"/>
									<order-by field-name="sequenceId"/>
								</entity-and>
								<first-from-list entry="statusItem" list="statusItemList"/>
								<log level="always" message="**** statusItem=${statusItem}"/>



								CAMBIO STATO WORK_EFFORT
								<entity-condition list="activeWorkEffortList" entity-name="WorkEffort">
									<condition-list>
										<condition-expr field-name="workEffortTypeId" from-field="workEffortTypePeriod.workEffortTypeId"/>
										<condition-expr field-name="estimatedStartDate" operator="less-equals" from-field="customTimePeriod.thruDate"/>
										<condition-expr field-name="estimatedCompletionDate" operator="greater-equals" from-field="customTimePeriod.fromDate"/>
									</condition-list>
								</entity-condition>

								<iterate entry="activeWorkEffort" list="activeWorkEffortList">


									Carica i campi da aggiornare
									<set field="workEffortRootStatusMap.entityName" value="WorkEffortStatus"/>
									<set field="workEffortRootStatusMap.operation" value="CREATE"/>

									<make-value value-field="workEffortRootStatusMap.parameters" entity-name="WorkEffortStatus"/>
									<call-object-method method-name="getAllFields" obj-field="workEffortRootStatusMap.parameters" ret-field="workEffortRootStatusMap.parameters"/>
									<set field="workEffortRootStatusMap.parameters.workEffortId" from-field="activeWorkEffort.workEffortId"/>
									<set field="workEffortRootStatusMap.parameters.statusId" from-field="statusItem.statusId"/>
									<now-timestamp field="nowTimestamp"/>
									<set field="workEffortRootStatusMap.parameters.statusDatetime" from-field="nowTimestamp"/>
									<set field="workEffortRootStatusMap.parameters.reason" from-field="workEffortTypePeriod.desProc" default-value=""/>

									<call-service service-name="crudServiceDefaultOrchestration_WorkEffortRootStatus" in-map-name="workEffortRootStatusMap" transaction-timeout="7200"/>
									<check-errors/>

									<set field="activeWorkEffort.currentStatusId" from-field="statusItem.statusId"/>
									<set field="activeWorkEffort.workEffortTypePeriodId" from-field="parameters.workEffortTypePeriodId"/>

									<store-value value-field="activeWorkEffort"/>

									<set field="updateWorkEffortIsPostedFlagNMap.entityName" value="WorkEffort"/>
									<set field="updateWorkEffortIsPostedFlagNMap.operation" value="UPDATE"/>

									<set field="updateWorkEffortIsPostedFlagNMap.parameters.workEffortId" from-field="activeWorkEffort.workEffortId"/>

									<call-service service-name="crudServiceDefaultOrchestration_updateWorkEffortTransactionIndIsPostedFlagN" in-map-name="updateWorkEffortIsPostedFlagNMap" transaction-timeout="7200"/>


									<call-service service-name="crudServiceDefaultOrchestration_updateWorkEffortTransactionResIsPostedFlagN" in-map-name="updateWorkEffortIsPostedFlagNMap" transaction-timeout="7200"/>
								</iterate>


							</then>
						</if>
					</then>
				</if>
				fine esecuzione punto 5.7


				esecuzione punto 6
				<if-compare operator="equals" value="OPEN" field="parameters.statusEnumId">
					<if>
						<condition>
							<or>
								<and>
									<not>
										<if-empty field="workEffortTypePeriod"></if-empty>
									</not>
									<if-compare operator="equals" value="TO_OPEN" field="workEffortTypePeriod.statusEnumId"/>
								</and>
								<if-empty field="workEffortTypePeriod"></if-empty>
							</or>
						</condition>
						<then>
							<entity-condition list="activeWorkEffortList" entity-name="WorkEffort">
								<condition-list>
									<condition-expr field-name="workEffortTypeId" from-field="parameters.workEffortTypeId"/>
									<condition-expr field-name="estimatedStartDate" operator="less-equals" from-field="customTimePeriod.thruDate"/>
									<condition-expr field-name="estimatedCompletionDate" operator="greater-equals" from-field="customTimePeriod.fromDate"/>
								</condition-list>
							</entity-condition>
							<iterate entry="activeWorkEffort" list="activeWorkEffortList">


								<set field="updateWorkEffortIsPostedFlagNMap.entityName" value="WorkEffort"/>
								<set field="updateWorkEffortIsPostedFlagNMap.operation" value="UPDATE"/>

								<set field="updateWorkEffortIsPostedFlagNMap.parameters.workEffortId" from-field="activeWorkEffort.workEffortId"/>

								<call-service service-name="crudServiceDefaultOrchestration_updateWorkEffortTransactionIndIsPostedFlagN" in-map-name="updateWorkEffortIsPostedFlagNMap" transaction-timeout="7200"/>

								<call-service service-name="crudServiceDefaultOrchestration_updateWorkEffortTransactionResIsPostedFlagN" in-map-name="updateWorkEffortIsPostedFlagNMap" transaction-timeout="7200"/>
							</iterate>

							fine esecuzione punto 6
						</then>
					</if>
				</if-compare>

				BUG 5186 punto 5 file creazione note automatica all'apertura del periodo
				<if>
					<condition>
						<and>
							<if-compare field="workEffortTypePeriod.statusEnumId" operator="equals" value="OPEN"/>
							<if-compare-field operator="not-equals" field="oldWorkEffortTypePeriod.statusEnumId" to-field="workEffortTypePeriod.statusEnumId"/>
						</and>
					</condition>
					<then>
						set noteDateTime con data inizio periodo x apertura di periodi previsionali e data fine x apertura di periodi di consuntivo
						<if-compare operator="equals" field="workEffortTypePeriod.glFiscalTypeEnumId" value="GLFISCTYPE_TARGET">
							<set field="noteDateTime" from-field="customTimePeriod.fromDate" type="Timestamp"/>
							<else>
								<set field="noteDateTime" from-field="customTimePeriod.thruDate" type="Timestamp"/>
							</else>
						</if-compare>

						prendo la lista di tutte le schede che contiene il tipo della rilevazione
						<entity-condition list="workEffortList" entity-name="WorkEffort">
							<condition-list>
								<condition-expr field-name="workEffortTypeId" from-field="workEffortTypePeriod.workEffortTypeId"/>
								<condition-expr field-name="estimatedStartDate" operator="less-equals" from-field="customTimePeriod.thruDate"/>
								<condition-expr field-name="estimatedCompletionDate" operator="greater-equals" from-field="customTimePeriod.fromDate"/>
							</condition-list>
						</entity-condition>        
						<iterate entry="we" list="workEffortList">

							Per ogni scheda devo prendere tutti gli obiettivi e creare la nota
							<entity-and list="weObiettivoList" entity-name="WorkEffort">
								<field-map field-name="workEffortParentId" from-field="we.workEffortId"/>
							</entity-and>
							<iterate entry="weObiettivo" list="weObiettivoList">
								Carico la lista di note che devo inserire cosiderando al rilevazione
                            che si sta aprendo è consuntivo o preventivo
								<entity-condition list="noteList" entity-name="WorkEffortTypeAttrAndNoteData">
									<condition-list>
										<condition-expr field-name="workEffortTypeId" from-field="weObiettivo.workEffortTypeId"/>
										<condition-expr field-name="isNote" value="Y"/>
										<condition-expr field-name="isAutomatic" operator="equals" from-field="workEffortTypePeriod.glFiscalTypeEnumId"/>
									</condition-list>
								</entity-condition>
								<iterate entry="note" list="noteList">
									Prima di inserire la nota controllo che essa non è già inserita
									<entity-and list="workEffortNoteList" entity-name="WorkEffortNoteAndData">
										<field-map field-name="noteName" from-field="note.noteName"/>
										<field-map field-name="noteDateTime" from-field="noteDateTime"/>
										<field-map field-name="workEffortId" from-field="weObiettivo.workEffortId"/>
									</entity-and>
									<if-empty field="workEffortNoteList">

										<clear-field field="mapNoteDataWorkEffort"/>
										<set field="mapNoteDataWorkEffort.operation" value="CREATE"/>
										<set field="mapNoteDataWorkEffort.entityName" value="WorkEffortNoteAndData"/>
										<set field="mapNoteDataWorkEffort.parameters._AUTOMATIC_PK_" value="Y"/>

										<set field="mapNoteDataWorkEffort.parameters.noteName" from-field="note.noteName"/>
										<set field="mapNoteDataWorkEffort.parameters.noteInfo" from-field="note.noteInfo"/>
										<set field="mapNoteDataWorkEffort.parameters.workEffortId" from-field="weObiettivo.workEffortId"/>
										<set field="mapNoteDataWorkEffort.parameters.sequenceId" from-field="note.sequenceId"/>
										<set field="mapNoteDataWorkEffort.parameters.internalNote" from-field="note.internalNote"/>
										<set field="mapNoteDataWorkEffort.parameters.isMain" from-field="note.isMain"/>
										<set field="mapNoteDataWorkEffort.parameters.isHtml" from-field="note.isHtml"/>
										<set field="mapNoteDataWorkEffort.parameters.noteDateTime" from-field="noteDateTime" type="Timestamp"/>

										<set-service-fields service-name="crudServiceDefaultOrchestration_WorkEffortNoteAndData" to-map="crudServiceOperationMap" map="mapNoteDataWorkEffort"/>
										<call-service service-name="crudServiceDefaultOrchestration_WorkEffortNoteAndData" in-map-name="crudServiceOperationMap"/>

									</if-empty>
								</iterate>
							</iterate>
						</iterate>
					</then>
				</if>

				Inserimenti eventi TASK e CALENDARIO per gli Stati Aperto e Riaperto

				<if>
					<condition>
						<and>
							<or>
								<if-compare field="parameters.statusEnumId" operator="equals" value="OPEN"/>
								<if-compare field="parameters.statusEnumId" operator="equals" value="REOPEN"/>
							</or>
							<if-compare-field operator="not-equals" field="oldWorkEffortTypePeriod.statusEnumId" to-field="parameters.statusEnumId"/>
						</and>
					</condition>
					<then>

						Leggo tutti i responsabili e delegati che verranio utilizzati epr
							 il calendario e per il task
						<set field="listCalendario" type="NewList"/>
						<now-timestamp field="now"/>

						<entity-one value-field="workEffortType" entity-name="WorkEffortType"/>
						<entity-condition list="workEffortList" entity-name="WorkEffort">
							<condition-list>
								<condition-expr field-name="workEffortTypeId" from-field="workEffortType.workEffortTypeId"/>
								<condition-expr field-name="estimatedStartDate" operator="less-equals" from-field="customTimePeriod.thruDate"/>
								<condition-expr field-name="estimatedCompletionDate" operator="greater-equals" from-field="customTimePeriod.fromDate"/>
							</condition-list>
						</entity-condition>
						<iterate entry="we" list="workEffortList">
							<call-bsh>
								<![CDATA[
									groovyContext = new java.util.HashMap();
									groovyContext.put("dispatcher", dispatcher);
									groovyContext.put("delegator", delegator);
									context = new java.util.HashMap();
									parameters.put("workEffort", we);
									parameters.put("respList", "Y");
									parameters.put("delList", "Y");
									context.put("workEffort", we);
									context.put("respList", "Y");
									context.put("delList", "Y");
									groovyContext.put("parameters", parameters);
									groovyContext.put("context", context);
									groovyContext.put("locale", locale);
        					
									org.ofbiz.base.util.GroovyUtil.runScriptAtLocation("component:/workeffortext/webapp/workeffortext/WEB-INF/actions/getWorkEffortResponsibleByRole.groovy", groovyContext);
	              			
									result = new java.util.HashMap();
									result.put("delegatoList", groovyContext.get("delegatoList"));
									result.put("responsibileList", groovyContext.get("responsibileList"));
	                  
									return result;
								]]>
							</call-bsh>
							scorro la lista di delegati e reponsabili
							<list-to-list to-list="listCalendario" list="delegatoList"/>
							<list-to-list to-list="listCalendario" list="responsibileList"/>


							creazione NOTE uno per ogni scheda!!!
							<clear-field field="listNote"/>
							<list-to-list to-list="listNote" list="delegatoList"/>
							<list-to-list to-list="listNote" list="responsibileList"/>

							<iterate entry="insertNote" list="listNote">
								creo la nota per ogni reponsabile o delegato!
								<clear-field field="updateCreateNoteDataMap"/>
								<set field="updateCreateNoteDataMap.operation" value="CREATE"/>
								<set field="updateCreateNoteDataMap.entityName" value="NoteData"/>
								<set field="updateCreateNoteDataMap.parameters._AUTOMATIC_PK_" value="Y"/>
								<set field="updateCreateNoteDataMap.parameters.isPublic" value="N"/>
								<set field="updateCreateNoteDataMap.parameters.noteName" value="SYSTEMNOTE"/>
								<set field="updateCreateNoteDataMap.parameters.noteParty" from-field="insertNote.partyIdTo"/>
								<set field="updateCreateNoteDataMap.parameters.moreInfoItemId" from-field="we.workEffortId"/>
								<set field="updateCreateNoteDataMap.parameters.noteDateTime" from-field="now"/>

								<property-to-field resource="WorkeffortExtUiLabels" property="SystemInfoStatusTasksCod" field="SystemInfoStatusTasksCod"/>
								<set field="updateCreateNoteDataMap.parameters.noteInfo" from-field="SystemInfoStatusTasksCod"/>

								<call-service service-name="crudServiceOperation_updateCreateNoteData" in-map-name="updateCreateNoteDataMap"/>
							</iterate>

						</iterate>



						prendi tutti gli elementi una sola volta

						<call-class-method method-name="getFieldListFromEntityList" class-name="org.ofbiz.entity.util.EntityUtil" ret-field="setCalendario">
							<field field="listCalendario" type="List"/>
							<string value="partyIdTo"/>
							<field field="true" type="boolean"/>
						</call-class-method>

						trovata li lista definitiva la scorro per scirvere gli eventi sul
							 calendario
						<iterate entry="partyIdTo" list="setCalendario">
							creazione evento calendario
							<clear-field field="workEffortMap"/>
							<set field="workEffortMap.operationalEntityName" value="WorkEffort"/>
							<set field="workEffortMap.partyId" from-field="partyIdTo"/>
							<set field="workEffortMap.currentStatusId" value="CAL_TENTATIVE"/>
							<set field="workEffortMap.roleTypeId" value="CAL_OWNER"/>

							<set field="workEffortMap.estimatedCompletionDate" from-field="workEffortTypePeriod.perLavThru"/>
							<set field="workEffortMap.estimatedStartDate" from-field="workEffortTypePeriod.perLavThru"/>

							<set field="workEffortMap.scopeEnumId" value="WES_PRIVATE"/>
							<set field="workEffortMap.statusId" value="PRTYASGN_ASSIGNED"/>

							<set field="workEffortMap.workEffortIdFrom" from-field="we.workEffortId"/>
							<property-to-field resource="WorkeffortExtUiLabels" property="TaskWorkEffortName" field="TaskWorkEffortName"/>
							<set field="workEffortMap.workEffortName" value="${TaskWorkEffortName} : ${workEffortTypePeriod.desProc}"/>
							<set field="workEffortMap.workEffortTypeId" value="PERSONAL_TIMEOFF"/>
							<set field="workEffortMap.description" value=""/>

							<clear-field field="crudServiceDefaultOrchestrationParams"/>
							<map-to-map map="workEffortMap" to-map="crudServiceDefaultOrchestrationParams.parameters"/>
							<set field="crudServiceDefaultOrchestrationParams.parameters.operation" value="CREATE"/>
							<set field="crudServiceDefaultOrchestrationParams.operation" value="CREATE"/>
							<set field="crudServiceDefaultOrchestrationParams.entityName" value="WorkEffort"/>

							<set field="crudServiceDefaultOrchestrationParams.parameters._AUTOMATIC_PK_" value="Y"/>
							<call-service service-name="crudServiceDefaultOrchestration_WorkEffort" in-map-name="crudServiceDefaultOrchestrationParams">
								<result-to-field result-name="id"/>
							</call-service>
							<check-errors/>
							NON creazione TASK
						</iterate>

					</then>
				</if>
			</then>
		</if>

		NON Chiudo i Task che sono stati apert -->
		<log level="always" message="**** crudServiceOperationMap=${crudServiceOperationMap}"/>

	</simple-method>

    <simple-method method-name="crudServiceEpilog_WorkEffortTypePeriod" short-description="crudServiceEpilog_WorkEffortTypePeriod">
        <!-- Bug 4968 punto 5 -->
        <set field="parameters" from-field="parameters.parameters"/>

        <!-- Controllo punto 1 -->
        <entity-condition list="workEffortTypePeriodList" entity-name="WorkEffortTypePeriod"/>

        <iterate entry="workEffortTypePeriod" list="workEffortTypePeriodList">

            <entity-condition list="openList" entity-name="WorkEffortTypePeriod">
                <condition-list>
                    <condition-expr field-name="workEffortTypeId" from-field="workEffortTypePeriod.workEffortTypeId"/>
                    <condition-expr field-name="statusEnumId" value="OPEN"/>
                </condition-list>
            </entity-condition>
            <call-object-method obj-field="openList" method-name="size" ret-field="openSize"/>
            <if-compare field="openSize" operator="greater-equals" value="2" type="Long">
                <add-error>
                    <fail-property resource="WorkeffortExtErrorLabels" property="OpenWorkEffortTypePeriodNotAllowed"/>
                </add-error>
                <check-errors/>
            </if-compare>

            <entity-condition list="reopenList" entity-name="WorkEffortTypePeriod">
                <condition-list>
                    <condition-expr field-name="workEffortTypeId" from-field="workEffortTypePeriod.workEffortTypeId"/>
                    <condition-expr field-name="statusEnumId" value="REOPEN"/>
                </condition-list>
            </entity-condition>
            <call-object-method obj-field="reopenList" method-name="size" ret-field="reopenSize"/>
            <if-compare field="reopenSize" operator="greater-equals" value="2" type="Long">
                <add-error>
                    <fail-property resource="WorkeffortExtErrorLabels" property="ReopenWorkEffortTypePeriodNotAllowed"/>
                </add-error>
                <check-errors/>
            </if-compare>

            <entity-condition list="openItemList" entity-name="WorkEffortTypePeriod">
                <condition-list>
                    <condition-expr field-name="workEffortTypeId" from-field="workEffortTypePeriod.workEffortTypeId"/>
                    <condition-expr field-name="statusEnumId" value="OPEN"/>
                </condition-list>
            </entity-condition>
            <entity-condition list="reopenItemList" entity-name="WorkEffortTypePeriod">
                <condition-list>
                    <condition-expr field-name="workEffortTypeId" from-field="workEffortTypePeriod.workEffortTypeId"/>
                    <condition-expr field-name="statusEnumId" value="REOPEN"/>
                </condition-list>
            </entity-condition>
            <call-object-method obj-field="openItemList" method-name="size" ret-field="openItemSize"/>
            <call-object-method obj-field="reopenItemList" method-name="size" ret-field="reopenItemSize"/>
            <if>
                <condition>
                    <and>
                        <if-compare field="openItemSize" operator="equals" value="1" type="Long"/>
                        <if-compare field="reopenItemSize" operator="equals" value="1" type="Long"/>
                    </and>
                </condition>
                <then>
                    <add-error>
                        <fail-property resource="WorkeffortExtErrorLabels" property="OpenReopenWorkEffortTypePeriodNotAllowed"/>
                    </add-error>
                    <check-errors/>
                </then>
            </if>
        </iterate>

    </simple-method>

    <simple-method method-name="crudServiceOperation_updateWorkEffortTransactionResIsPostedFlagN" short-description="crudServiceOperation_updateWorkEffortTransactionResIsPostedFlag">
        <set field="parameters" from-field="parameters.parameters"/>
        <entity-one value-field="workEffort" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-one>
        <entity-one value-field="workEffortTypePeriod" entity-name="WorkEffortTypePeriod">
            <field-map field-name="workEffortTypePeriodId" from-field="workEffort.workEffortTypePeriodId"/>
        </entity-one>
        <entity-one value-field="customTimePeriod" entity-name="CustomTimePeriod">
            <field-map field-name="customTimePeriodId" from-field="workEffortTypePeriod.customTimePeriodId"/>
        </entity-one>


        <if-not-empty field="workEffort">
            <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssocExtView">
                <condition-list>
                    <condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortId"/>
                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                </condition-list>
            </entity-condition>
            <!-- <log level="always" message="#### workEffortAssocExtViewList ${workEffortAssocExtViewList}"/> -->
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
                <call-bsh>
              		<![CDATA[
              			groovyContext = new java.util.HashMap();
              			groovyContext.put("dispatcher", dispatcher);
          					groovyContext.put("delegator", delegator);
          					groovyContext.put("parameters", parameters);
          					groovyContext.put("userLogin", userLogin);
		   					
          					context = new java.util.HashMap();
          					context.put("workEffortId", workEffortAssocExtView.get("workEffortIdTo"));
          					parameters.put("workEffortId", workEffortAssocExtView.get("workEffortIdTo"));
          					groovyContext.put("parameters", parameters);
          					groovyContext.put("locale", locale);
          					groovyContext.put("context", context);
          					org.ofbiz.base.util.GroovyUtil.runScriptAtLocation("component:/workeffortext/webapp/workeffortext/WEB-INF/actions/executeChildPerformFindWETResource.groovy", groovyContext);
              			result = new java.util.HashMap();
                  		result.put("workEffortTransactionAndPurposeAccountResList", groovyContext.get("listIt"));
                  
                  		return result;
              		]]>
                </call-bsh>
                <iterate entry="workEffortTransactionAndPurposeAccountRes" list="workEffortTransactionAndPurposeAccountResList">
                    <entity-one value-field="acctgTrans" entity-name="AcctgTrans">
                        <field-map field-name="acctgTransId" from-field="workEffortTransactionAndPurposeAccountRes.weTransEntryId"/>
                    </entity-one>
                    <if-not-empty field="acctgTrans">
                        <entity-one entity-name="GlFiscalType" value-field="glFiscalType">
                            <field-map field-name="glFiscalTypeId" from-field="acctgTrans.glFiscalTypeId"/>
                        </entity-one>
                        
                        <if-compare-field operator="equals" field="glFiscalType.glFiscalTypeEnumId" to-field="workEffortTypePeriod.glFiscalTypeEnumId">
                            <if-compare-field operator="equals" field="acctgTrans.transactionDate" to-field="customTimePeriod.thruDate">
                                <set field="acctgTrans.isPosted" value="N"/>
                                <store-value value-field="acctgTrans"/>
                                <check-errors/>
                            </if-compare-field>
                            <if>
                                <condition>
                                    <and>
                                        <if-compare-field operator="less-equals" field="acctgTrans.transactionDate" to-field="customTimePeriod.thruDate"/>
                                        <if-compare-field operator="greater-equals" field="acctgTrans.transactionDate" to-field="customTimePeriod.fromDate"/>
                                    </and>
                                </condition>
                                <then>
                                    <entity-condition entity-name="AcctgTransEntry" list="acctgTransEntryList">
                                        <condition-list>
                                            <condition-expr field-name="acctgTransEntrySeqId" from-field="acctgTrans.acctgTransId"/>
                                            <condition-expr field-name="acctgTransId" from-field="acctgTrans.acctgTransId"/>
                                            <condition-expr operator="like" field-name="glAccountId" value="SAL%"/>
                                        </condition-list>
                                    </entity-condition>
                                    <if-not-empty field="acctgTransEntryList">
                                        <set field="acctgTrans.isPosted" value="N"/>
                                        <store-value value-field="acctgTrans"/>
                                        <check-errors/>
                                    </if-not-empty>
                                </then>
                            </if>
                        </if-compare-field>
                    </if-not-empty>
                </iterate>
            </iterate>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="crudServiceOperation_updateWorkEffortTransactionIndIsPostedFlagN" short-description="crudServiceOperation_updateWorkEffortTransactionIndIsPostedFlag">
        <set field="parameters" from-field="parameters.parameters"/>
        <entity-one value-field="workEffort" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-one>
        <entity-one value-field="workEffortTypePeriod" entity-name="WorkEffortTypePeriod">
            <field-map field-name="workEffortTypePeriodId" from-field="workEffort.workEffortTypePeriodId"/>
        </entity-one>
        <entity-one value-field="customTimePeriod" entity-name="CustomTimePeriod">
            <field-map field-name="customTimePeriodId" from-field="workEffortTypePeriod.customTimePeriodId"/>
        </entity-one>
        <!-- <log level="always" message="#### workEffort.workEffortId ${workEffort.workEffortId}"/> -->

        <if-not-empty field="workEffort">
            <entity-condition list="workEffortAssocExtViewList" entity-name="WorkEffortAssocExtView">
                <condition-list>
                    <condition-expr field-name="workEffortIdFrom" from-field="parameters.workEffortId"/>
                    <condition-expr field-name="workEffortAssocTypeId" value="ROOT"/>
                </condition-list>
            </entity-condition>
            
            <iterate entry="workEffortAssocExtView" list="workEffortAssocExtViewList">
	            <!-- contentId contains value of indicator (WEFLD_IND, not WEFLD_AIND) for match workeffortPurposeType -->
	            <set field="contentId" value="WEFLD_IND"/>
                <call-simple-method method-name="updateWorkEffortTransactionIndIsPostedFlagN"/>
            
	            <!-- contentId contains value of indicator (WEFLD_IND2, not WEFLD_AIND2) for match workeffortPurposeType -->
	            <set field="contentId" value="WEFLD_IND2"/>
                <call-simple-method method-name="updateWorkEffortTransactionIndIsPostedFlagN"/>
            
	            <!-- contentId contains value of indicator (WEFLD_IND3, not WEFLD_AIND3) for match workeffortPurposeType -->
	            <set field="contentId" value="WEFLD_IND3"/>
                <call-simple-method method-name="updateWorkEffortTransactionIndIsPostedFlagN"/>
            
	            <!-- contentId contains value of indicator (WEFLD_IND4, not WEFLD_AIND4) for match workeffortPurposeType -->
	            <set field="contentId" value="WEFLD_IND4"/>
                <call-simple-method method-name="updateWorkEffortTransactionIndIsPostedFlagN"/>
            
	            <!-- contentId contains value of indicator (WEFLD_IND5, not WEFLD_AIND5) for match workeffortPurposeType -->
	            <set field="contentId" value="WEFLD_IND5"/>
                <call-simple-method method-name="updateWorkEffortTransactionIndIsPostedFlagN"/>
            </iterate>
		</if-not-empty>
	</simple-method>
            
	<simple-method method-name="updateWorkEffortTransactionIndIsPostedFlagN" short-description="crudServiceOperation_updateWorkEffortTransactionIndIsPostedFlag">
        <set field="mappa.workEffortId" from-field="workEffortAssocExtView.workEffortIdTo"/>
		<set field="mappa.contentId" from-field="contentId"/>
        <call-service service-name="executeChildPerformFindTransIndicator" in-map-name="mappa">
			<result-to-field result-name="rowList" field="workEffortTransactionList"/>
		</call-service>
        <if-not-empty field="workEffortTransactionList">
          	<iterate entry="item" list="workEffortTransactionList">
                <set field="workEffortTransaction" from-field="item.gv"/>
                <if-not-empty field="workEffortTransaction.weTransId">
                    <entity-one value-field="acctgTrans" entity-name="AcctgTrans">
                        <field-map field-name="acctgTransId" from-field="workEffortTransaction.weTransEntryId"/>
                    </entity-one>
                    <if-not-empty field="acctgTrans">
                        <entity-one entity-name="GlFiscalType" value-field="glFiscalType">
                            <field-map field-name="glFiscalTypeId" from-field="acctgTrans.glFiscalTypeId"/>
                        </entity-one>
                        <if-compare-field operator="equals" field="glFiscalType.glFiscalTypeEnumId" to-field="workEffortTypePeriod.glFiscalTypeEnumId">
                            <if-compare-field operator="equals" field="acctgTrans.transactionDate" to-field="customTimePeriod.thruDate">
                                <set field="acctgTrans.isPosted" value="N"/>
                                <store-value value-field="acctgTrans"/>
                                <check-errors/>
                            </if-compare-field>
                            <if>
                                <condition>
                                    <and>
                                        <if-compare-field operator="less-equals" field="acctgTrans.transactionDate" to-field="customTimePeriod.thruDate"/>
                                        <if-compare-field operator="greater-equals" field="acctgTrans.transactionDate" to-field="customTimePeriod.fromDate"/>
                                    </and>
                                </condition>
                                <then>
                                    <entity-condition entity-name="AcctgTransEntry" list="acctgTransEntryList">
                                        <condition-list>
                                            <condition-expr field-name="acctgTransEntrySeqId" from-field="acctgTrans.acctgTransId"/>
                                            <condition-expr field-name="acctgTransId" from-field="acctgTrans.acctgTransId"/>
                                            <condition-expr operator="like" field-name="glAccountId" value="SAL%"/>
                                        </condition-list>
                                    </entity-condition>
                                    <if-not-empty field="acctgTransEntryList">
                                            <set field="acctgTrans.isPosted" value="N"/>
                                            <store-value value-field="acctgTrans"/>
                                        <check-errors/>
                                    </if-not-empty>
                                </then>
                            </if>
                        </if-compare-field>
                    </if-not-empty>
                </if-not-empty>
            </iterate>
        </if-not-empty>
    </simple-method>

    <!-- bug 4790 -->
    <simple-method method-name="crudServiceOperation_WorkEffortMeasureView" short-description="crudServiceOperation_WorkEffortMeasureView">

        <set field="parameters.parameters.workEffortId" from-field="parameters.parameters.weMeasureWeId"/>
        <set field="parameters.parameters.workEffortMeasureId" from-field="parameters.parameters.weMeasureId"/>
        <set field="parameters.parameters.uomDescr" from-field="parameters.parameters.weMeasureUomDescr"/>
        <set field="parameters.parameters.productId" from-field="parameters.parameters.weMeasureProductId"/>

        <call-service service-name="crudServiceDefaultOrchestration_WorkEffortMeasure" in-map-name="parameters"/>
        <check-errors/>

    </simple-method>

    <simple-method use-transaction="false" method-name="massiveScoreCardCalc" short-description="massiveScoreCardCalc">
        <log level="info" message=" ############################### massiveScoreCardCalc "></log>

		<if>
            <condition>
                <and>
	                <if-empty field="parameters.workEffortTypeId"/>
	                <if-empty field="parameters.filiera"/>
                    <if-empty field="parameters.orgUnitId"/>
                    <or>
                    	<if-empty field="parameters.partyId"/>
                    	<if-empty field="parameters.roleTypeId"/>
                    </or>
                </and>
            </condition>
            <then>
                <add-error>
                    <fail-property resource="WorkeffortExtErrorLabels" property="MassiveScoreCardMandatoryField"/>
                </add-error>
                <check-errors/>
            </then>
        </if>
        
        <if>
            <condition>
                <and>
	                <not>
		                <if-empty field="parameters.workEffortTypeId"/>
		            </not>
		            <not>
		                <if-empty field="parameters.filiera"/>
		            </not>
                </and>
            </condition>
            <then>
                <add-error>
                    <fail-property resource="WorkeffortExtErrorLabels" property="MassiveScoreCardNotAllowed"/>
                </add-error>
                <check-errors/>
            </then>
        </if>
            
        <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="nowAsString" ret-field="nowStamp"/>
        <call-class-method method-name="getDigestHash" class-name="org.ofbiz.base.crypto.HashCrypt" ret-field="sessionId">
            <field field="nowStamp"/>
            <string value="SHA"/>
        </call-class-method>

        <set field="beginIndex" value="37" type="Integer"/>
        <call-object-method method-name="substring" obj-field="sessionId" ret-field="sessionId">
            <field field="beginIndex" type="int"/>
        </call-object-method>

        <!-- Sottopongo l'elaborazione vera e propria attraverso serviceLogger
            in modo da controllarne il logging -->
        <set field="loggerMap.serviceName" value="massiveScoreCardCalcImpl"/> <!-- qui setto l'implementazione da usare per il calcolo -->
        <set field="loggerMap.serviceTypeId" value="MASSIVE_SCORE_CARD"/>
        <set field="loggerMap.sessionId" from-field="sessionId"/>

        <!-- parametro richiesto dall'interfaccia loggedServiceInterface implementata
            da massiveScoreCardCalcImpl -->           

        <set field="loggerMap.serviceParameters.thruDate" value="${parameters.thruDate}" type="Timestamp"/>
        <set field="loggerMap.serviceParameters.weContextId" value="${parameters.weContextId}"/>
        <set field="loggerMap.serviceParameters.estimatedStartDate" value="${parameters.estimatedStartDate}" type="Timestamp"/>
        <set field="loggerMap.serviceParameters.estimatedCompletionDate" value="${parameters.estimatedCompletionDate}" type="Timestamp"/>
        <set field="loggerMap.serviceParameters.target" value="${parameters.target}"/>
        <set field="loggerMap.serviceParameters.performance" value="${parameters.performance}"/>
        <set field="loggerMap.serviceParameters.limitExcellent" value="${parameters.limitExcellent}"/>               
        <set field="loggerMap.serviceParameters.limitMax" value="${parameters.limitMax}"/>
        <set field="loggerMap.serviceParameters.limitMed" value="${parameters.limitMed}"/>     
        <set field="loggerMap.serviceParameters.limitMin" value="${parameters.limitMin}"/>     
        <set field="loggerMap.serviceParameters.scoreValueType" value="${parameters.scoreValueType}"/>      
        <set field="loggerMap.serviceParameters.weightType" value="${parameters.weightType}"/>      
        <set field="loggerMap.serviceParameters.workEffortTypeId" value="${parameters.workEffortTypeId}"/>
        <set field="loggerMap.serviceParameters.filiera" value="${parameters.filiera}"/>
        <set field="loggerMap.serviceParameters.orgUnitId" value="${parameters.orgUnitId}"/>
        <set field="loggerMap.serviceParameters.roleTypeId" value="${parameters.roleTypeId}"/>
        <set field="loggerMap.serviceParameters.partyId" value="${parameters.partyId}"/>
        <set field="loggerMap.serviceParameters.uvUserLoginId" value="${parameters.uvUserLoginId}"/>
        <set field="loggerMap.serviceParameters.organizationId" value="${parameters.organizationId}"/>
        <set field="loggerMap.serviceParameters.recalculate" value="${parameters.recalculate}"/>
        <set field="loggerMap.serviceParameters.cleanOnlyScoreCard" value="${parameters.cleanOnlyScoreCard}"/>
        <set field="loggerMap.serviceParameters.sessionId" from-field="sessionId"/>
        <set field="loggerMap.serviceParameters.sourceReferenceId_fld0_ic" from-field="parameters.sourceReferenceId_fld0_ic"/>
        <set field="loggerMap.serviceParameters.sourceReferenceId_fld0_op" from-field="parameters.sourceReferenceId_fld0_op"/>
        <set field="loggerMap.serviceParameters.sourceReferenceId_fld0_value" from-field="parameters.sourceReferenceId_fld0_value"/>
        <set field="loggerMap.serviceParameters.sourceReferenceId_fld1_value" from-field="parameters.sourceReferenceId_fld1_value"/>        

        <call-service-asynch service-name="serviceLogger" in-map-name="loggerMap"/>
        <check-errors/>

        <log level="always" message=" #################################### sessionId ${sessionId}"></log>

        <field-to-result field="jobLogId" result-name="jobLogId"/>
        <field-to-result field="sessionId" result-name="sessionId"/>
    </simple-method>

    <simple-method method-name="extraScoreCardCalc" short-description="extraScoreCardCalc">
        <log level="info" message=" ################## extraScoreCardCalc "></log>

        <entity-one value-field="customTimePeriod" entity-name="CustomTimePeriod"/>

        <set field="parameters.thruDate" from-field="customTimePeriod.thruDate" type="Timestamp"/>

        <set-service-fields service-name="scoreCardCalc" to-map="scoreCardCalcInMap" map="parameters"/>
        <call-service service-name="scoreCardCalc" in-map-name="scoreCardCalcInMap">
            <result-to-field result-name="jobLogId"/>
            <result-to-field result-name="warningMessages"/>
            <result-to-field result-name="blockingErrors"/>
        </call-service>

        <!-- replace errorMessage and customize -->
        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="blockingErrors"/>
                    </not>
                    <if-compare operator="not-equals" value="0" type="Double" field="blockingErrors"></if-compare>
                </and>
            </condition>
            <then>
                <property-to-field field="msg" resource="WorkeffortExtUiLabels" property="ServerErrorMessage"/>
                <field-to-list field="msg" list="errorMessageLista"/>
                <property-to-field field="bError" resource="WorkeffortExtUiLabels" property="ServerBlockingErrors"/>
                <field-to-list field="bError" list="errorMessageLista"/>
                <property-to-field field="wError" resource="WorkeffortExtUiLabels" property="ServerWarningMessage"/>
                <field-to-list field="wError" list="errorMessageLista"/>
                <property-to-field field="lError" resource="WorkeffortExtUiLabels" property="ServiceMessageLog"/>
                <field-to-list field="lError" list="errorMessageLista"/>
                <field-to-list field="jobLogId" list="errorMessageLista"/>
            </then>
        </if>
        <field-to-result field="jobLogId" result-name="jobLogId"/>
        <field-to-result field="warningMessages" result-name="warningMessages"/>
        <field-to-result field="blockingErrors" result-name="blockingErrors"/>

        <check-errors error-list-name="errorMessageLista"/>
    </simple-method>


    <simple-method method-name="getSystemInfoNotesAndPublic" short-description="">
        <entity-condition list="systemInfoNotes" entity-name="NoteData">
            <condition-list combine="and">
                <condition-expr field-name="noteName" value="SYSTEMNOTE"/>
                <condition-list combine="or">
                    <condition-expr field-name="noteParty" from-field="parameters.userLogin.partyId"/>
                    <condition-expr field-name="isPublic" value="Y"/>
                </condition-list>
            </condition-list>
        </entity-condition>
        <if-not-empty field="systemInfoNotes">
            <field-to-result field="systemInfoNotes"/>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="deleteOneSystemNotes" short-description="deleteOneSystemNotes">
        <entity-one value-field="note" entity-name="NoteData"/>
        <if-compare-field operator="equals" field="parameters.userLogin.partyId" to-field="note.noteParty">
            <remove-value value-field="note"/>
            <else>
                <add-error>
                    <fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortNoteDataNotRemove"/>
                </add-error>
                <check-errors/>
            </else>
        </if-compare-field>
    </simple-method>

    <simple-method method-name="deleteCalendarWorkEffort" short-description="deleteCalendarWorkEffort">
        <entity-one value-field="workEffort" entity-name="WorkEffort"/>
        <set field="workEffort.currentStatusId" value="CAL_CANCELLED"/>
        <store-value value-field="workEffort"/>
    </simple-method>

    <simple-method method-name="crudServiceOperation_updateCreateWorkEffortTypeAttrAndNoteData" short-description="">
        <call-service service-name="crudServiceOperation_updateCreateNoteData" in-map-name="parameters">
            <result-to-field result-name="id"/>
        </call-service>

        <if-not-empty field="id">
            <!-- vado a settare la nota nella tabella WorkEffortTypeAttr -->
            <clear-field field="workEffortTypeAttrMap"/>

            <set field="workEffortTypeAttrMap.operation" value="UPDATE"/>
            <set field="workEffortTypeAttrMap.entityName" value="WorkEffortTypeAttr"/>
            <set field="workEffortTypeAttrMap.parameters.workEffortTypeId" from-field="parameters.parameters.workEffortTypeId"/>
            <set field="workEffortTypeAttrMap.parameters.attrName" from-field="parameters.parameters.attrName"/>
            <set field="workEffortTypeAttrMap.parameters.noteId" from-field="id.noteId"/>

            <call-service service-name="crudServiceDefaultOrchestration_WorkEffortTypeAttr" in-map-name="workEffortTypeAttrMap"/>
        </if-not-empty>

        <set field="id.workEffortTypeId" from-field="parameters.parameters.workEffortTypeId"/>
        <set field="id.attrName" from-field="parameters.parameters.attrName"/>
        <field-to-result field="id"/>
    </simple-method>

    <simple-method use-transaction="false" method-name="workEffortRootCopyAsyncService" short-description="Service workEffortRootCopyAsync">
        <log level="info" message=" ############################### workEffortRootCopyAsyncService "></log>

        <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="nowAsString" ret-field="nowStamp"/>
        <call-class-method method-name="getDigestHash" class-name="org.ofbiz.base.crypto.HashCrypt" ret-field="sessionId">
            <field field="nowStamp"/>
            <string value="SHA"/>
        </call-class-method>

        <set field="beginIndex" value="37" type="Integer"/>
        <call-object-method method-name="substring" obj-field="sessionId" ret-field="sessionId">
            <field field="beginIndex" type="int"/>
        </call-object-method>

        <set field="parameters.sessionId" from-field="sessionId"/>
        <call-service-asynch service-name="workEffortRootCopyService" in-map-name="parameters" include-user-login="true"/>
        <check-errors/>

        <log level="always" message=" #################################### sessionId ${sessionId}"/>

        <field-to-result field="sessionId" result-name="sessionId"/>
    </simple-method>


    <simple-method use-transaction="false" method-name="workEffortSnapshotService" short-description="Service workEffortSnapshot">
        <log level="info" message=" ############################### workEffortSnapshotService "></log>

        <log level="always" message=" ############################### parameters.workEffortTypeIdFrom ${parameters.workEffortTypeIdFrom}"></log>
        <log level="always" message=" ############################### parameters.workEffortId ${parameters.workEffortId} "></log>
        <log level="always" message=" ############################### parameters.estimatedStartDateTo ${parameters.estimatedStartDateTo} "></log>
        <log level="always" message=" ############################### parameters.estimatedStartDateFrom ${parameters.estimatedStartDateFrom} "></log>
        <log level="always" message=" ############################### parameters.estimatedCompletionDateTo ${parameters.estimatedCompletionDateTo} "></log>
        <log level="always" message=" ############################### parameters.estimatedCompletionDateFrom ${parameters.estimatedCompletionDateFrom} "></log>
        <log level="always" message=" ############################### parameters.workEffortTypeIdTo ${parameters.workEffortTypeIdTo} "></log>
        <log level="always" message=" ############################### parameters.snapShotDescription ${parameters.snapShotDescription}"></log>

        <entity-one value-field="w" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-one>
        <entity-one value-field="wtype" entity-name="WorkEffortType">
            <field-map field-name="workEffortTypeId" from-field="parameters.workEffortTypeIdFrom"/>
        </entity-one>
        <entity-one value-field="wtype" entity-name="WorkEffortType">
            <field-map field-name="workEffortTypeId" from-field="wtype.parentTypeId"/>
        </entity-one>
        <log level="always" message=" ############################### wtype.parentTypeId ${wtype.parentTypeId}"></log>

        <now-timestamp field="nowTimestamp"/>
        <set field="crudServiceParam.parameters.isAutomatic" value="Y"/>
        <set field="crudServiceParam.parameters._AUTOMATIC_PK_" value="Y"/>
        <set field="crudServiceParam.parameters.workEffortTypeIdCtx" from-field="wtype.parentTypeId"/>
        <set field="crudServiceParam.parameters.workEffortTypeIdFil" from-field="parameters.workEffortTypeIdFrom"/>
        <set field="crudServiceParam.parameters.refDate" from-field="nowTimestamp" type="Timestamp"/>
        <set field="crudServiceParam.parameters.description" from-field="parameters.snapShotDescription"/>
        <set field="crudServiceParam.parameters.isClosed" value="N"/>
        <set field="crudServiceParam.parameters.hasAcctgTrans" value="Y"/>
        <set field="crudServiceParam.parameters.organizationId" from-field="w.organizationId"/>
        <set field="crudServiceParam.operation" value="CREATE"/>
        <set field="crudServiceParam.entityName" value="WorkEffortRevision"/>
        <call-service service-name="crudServiceDefaultOrchestration_WorkEffortRevision" in-map-name="crudServiceParam">
            <result-to-field result-name="id"/>
        </call-service>
        <check-errors/>
        <log level="always" message=" #################################### id ${id}"></log>

        <if-empty field="id">
            <add-error>
                <fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortRevisionCreateError"/>
            </add-error>
        </if-empty>
        <check-errors/>

        <set field="parameters.workEffortRevisionId" from-field="id.workEffortRevisionId"/>
        <set field="parameters.organizationPartyId" from-field="w.organizationId"/>
        
        <call-service service-name="workEffortRootCopyService" in-map-name="parameters" include-user-login="true">
            <result-to-field result-name="jobLogId"/>
            <result-to-field result-name="recordElaborated"/>
            <result-to-field result-name="blockingErrors"/>
        </call-service>
        <check-errors/>
        <field-to-result field="jobLogId"/>
        <field-to-result field="recordElaborated"/>
        <field-to-result field="blockingErrors"/>
    </simple-method>


    <!-- ************************************************************** -->
    <!-- WorkEffortRevision -->
    <!-- ************************************************************** -->

    <simple-method method-name="crudServiceOperation_WorkEffortRevision" short-description="crudServiceOperation_WorkEffortRevision">
        <set field="params" from-field="parameters.parameters"/>

        <if-compare operator="equals" value="N" field="params.isAutomatic">
            <if>
                <condition>
                    <not>
                        <if-regexp field-name="params.workEffortRevisionId" expr="^[A-Z].*"/>
                    </not>
                </condition>
                <then>
                    <add-error>
                        <fail-property resource="BaseErrorLabels" property="DataNotAllowed"/>
                    </add-error>
                    <check-errors/>
                </then>
            </if>
        </if-compare>

        <!-- controllo coerenza tra contesto e filiera -->
        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="params.workEffortTypeIdCtx"/>
                    </not>
                    <not>
                        <if-empty field="params.workEffortTypeIdFil"/>
                    </not>
                </and>
            </condition>
            <then>
                <entity-one value-field="workEffortTypeCtx" entity-name="WorkEffortType" auto-field-map="false">
                    <field-map field-name="workEffortTypeId" from-field="params.workEffortTypeIdCtx"/>
                    <select-field field-name="parentTypeId"/>
                </entity-one>
                <entity-one value-field="workEffortTypeFil" entity-name="WorkEffortType" auto-field-map="false">
                    <field-map field-name="workEffortTypeId" from-field="params.workEffortTypeIdFil"/>
                    <select-field field-name="parentTypeId"/>
                </entity-one>

                <if-compare-field operator="not-equals" field="workEffortTypeFil.parentTypeId" to-field="workEffortTypeCtx.workEffortTypeId">
                    <add-error>
                        <fail-property resource="BaseErrorLabels" property="DataNotAllowed"/>
                    </add-error>
                    <check-errors/>
                </if-compare-field>
            </then>
        </if>

        <call-service service-name="crudServiceOperation" in-map-name="parameters">
            <result-to-field result-name="id"/>
        </call-service>
        <check-errors/>
        <field-to-result field="id"/>
    </simple-method>

    <simple-method method-name="checkWorkEffortStatusService" short-description="check if workEffort Has Mandatory Note Empty or Weight Control Sum or mandatory transaction empty or mandatory assoc empty or mandatory indicator empty or mandatory amount empty or error in queryConfig">
        <call-class-method class-name="com.mapsengineering.base.events.LanguageLocaleEvent" method-name="isPrimaryLanguage" ret-field="isPrimaryLang">
			<field field="locale" type="java.util.Locale"/>
		</call-class-method>
        <set field="paramsMap" from-field="parameters"/>
		<set field="statusId" from-field="paramsMap.statusId" default-value="${paramsMap.currentStatusId}"/>
        <log level="always" message="###### checkWorkEffortStatusService workEffortId ${paramsMap.workEffortId}, statusId ${paramsMap.statusId}, isPrimaryLang ${isPrimaryLang}"/>
        <!-- controllo delle note obbligatorie -->
        <set field="checkHasMandatoryNote.statusId" from-field="statusId"/>
        <set field="checkHasMandatoryNote.workEffortId" from-field="paramsMap.workEffortId"/>
        <call-service service-name="checkWorkEffortStatusHasMandatoryNoteEmpty" in-map-name="checkHasMandatoryNote">
            <results-to-map map-name="checkWorkEffortStatusHasMandatoryNoteEmptyResult"/>
        </call-service>
		
		<if-compare value="true" operator="equals" field="checkWorkEffortStatusHasMandatoryNoteEmptyResult.hasMandatoryNoteEmpty"> 
        	<string-append suffix="&lt;br&gt;" string="${checkWorkEffortStatusHasMandatoryNoteEmptyResult.errorMsg}" field="errorMessageLista"/>
        </if-compare>
        <log level="always" message="###### checkWorkEffortStatusService dopo controllo delle note obbligatorie errorMessageLista ${errorMessageLista}"/>
                
		<entity-one value-field="workEffort" entity-name="WorkEffort" auto-field-map="false">
            <field-map field-name="workEffortId" from-field="paramsMap.workEffortId"/>
            <select-field field-name="workEffortParentId"/>
            <select-field field-name="workEffortTypeId"/>
            <select-field field-name="workEffortName"/>
        </entity-one>
        <set field="workEffortTypeId" from-field="workEffort.workEffortTypeId"/>

        <entity-one value-field="workEffortTypeStatus" entity-name="WorkEffortTypeStatus" auto-field-map="false">
            <field-map field-name="workEffortTypeRootId" from-field="workEffortTypeId"/>
            <field-map field-name="currentStatusId" from-field="statusId"/>
        </entity-one>

        <!-- controllo pesi se workEffortTypeStatus.sumVerify == Y -->
        <if-not-empty field="workEffortTypeStatus">
            <log level="always" message="###### checkWorkEffortStatusService workEffortTypeStatus.sumVerify = ${workEffortTypeStatus.sumVerify}"></log>
            <if-compare operator="equals" value="Y" field="workEffortTypeStatus.sumVerify">
                <set-service-fields service-name="crudServiceEpilog_WorkEffortAssoc" to-map="checkWeightControlSumMap" map="parameters"/>
                <set field="checkWeightControlSumMap.parameters.workEffortIdFrom" from-field="paramsMap.workEffortId"/>
                <set field="checkWeightControlSumMap.parameters.assocWeight" value="0.0"/>
                <set field="checkWeightControlSumMap.parameters.checkAllHierarchy" value="Y"/>
                <set field="checkWeightControlSumMap.parameters.searchDate" from-field="parameters.searchDate" type="Timestamp"/>
                <set field="checkWeightControlSumMap.workEffortIdFrom" from-field="paramsMap.workEffortId"/>
                <set field="checkWeightControlSumMap.entityName" value="WorkEffortAssocExtView"/>
                <set field="checkWeightControlSumMap.operation" value="CREATE"/>
                <call-service break-on-error="false" service-name="checkWeightControlSum" in-map-name="checkWeightControlSumMap">
                	<results-to-map map-name="resultServiceWeightAssoc"/>
                </call-service>
        		
                <if-not-empty field="resultServiceWeightAssoc.errorMsg">
                	<string-append suffix="&lt;br&gt;" string="${resultServiceWeightAssoc.errorMsg}" field="errorMessageLista"/>
                </if-not-empty>
        
                <set-service-fields service-name="crudServiceEpilog_WorkEffortMeasure" to-map="checkWeightKpiControlSumMap" map="parameters"/>
                <set field="checkWeightKpiControlSumMap.parameters.workEffortId" from-field="paramsMap.workEffortId"/>
                <set field="checkWeightKpiControlSumMap.parameters.kpiScoreWeight" value="0.0"/>
                <set field="checkWeightKpiControlSumMap.parameters.checkAllHierarchy" value="Y"/>
                <set field="checkWeightKpiControlSumMap.parameters.accountTypeEnumId" value="INDICATOR"/>
                <set field="checkWeightKpiControlSumMap.entityName" value="WorkEffortMeasure"/>
                <set field="checkWeightKpiControlSumMap.operation" value="CREATE"/>
                <call-service break-on-error="false" service-name="crudServiceEpilog_WorkEffortMeasure" in-map-name="checkWeightKpiControlSumMap">
                	<results-to-map map-name="resultServiceWeightKpi"/>
                </call-service>
                
                <if-not-empty field="resultServiceWeightKpi.errorMsg">
                	<string-append suffix="&lt;br&gt;" string="${resultServiceWeightKpi.errorMsg}" field="errorMessageLista"/>
                </if-not-empty>
            </if-compare>
            <log level="always" message="###### checkWorkEffortStatusService dopo controllo pesi errorMessageLista ${errorMessageLista}"/>
        
            <!-- Check MANDATORY ASSOC controllo associazioni obbligatorie -->
    		<log level="always" message="###### checkWorkEffortStatusService workEffortTypeStatus.checkIsMandatory = ${workEffortTypeStatus.checkIsMandatory}"></log>
            <if-compare operator="equals" value="Y" field="workEffortTypeStatus.checkIsMandatory">
                <set-service-fields service-name="checkWorkEffortStatusHasMandatoryAssocEmpty" to-map="checkWorkEffortStatusHasMandatoryAssocEmptyMap" map="parameters"/>
			    <set field="checkWorkEffortStatusHasMandatoryAssocEmptyMap.workEffortId" from-field="paramsMap.workEffortId"/>
			    <call-service break-on-error="false" service-name="checkWorkEffortStatusHasMandatoryAssocEmpty" in-map-name="checkWorkEffortStatusHasMandatoryAssocEmptyMap">
			      	<results-to-map map-name="resultServiceAssoc"/>
			    </call-service>
			    <log level="always" message="###### resultServiceAssoc = ${resultServiceAssoc}"/>
        		<if-compare value="true" operator="equals" field="resultServiceAssoc.hasMandatoryAssocEmpty"> 
		        	<string-append suffix="&lt;br&gt;" string="${resultServiceAssoc.errorMsg}" field="errorMessageLista"/>
		        </if-compare>
		        <log level="always" message="###### checkWorkEffortStatusService dopo controllo associazioni obbligatorie errorMessageLista ${errorMessageLista}"/>
            </if-compare>
            
            <!-- Check MANDATORY ROLE controllo ruoli obbligatori -->
    		<if-compare operator="equals" value="Y" field="workEffortTypeStatus.hasMandatoryRole">
                <set-service-fields service-name="checkWorkEffortStatusHasMandatoryRoleEmpty" to-map="checkWorkEffortStatusHasMandatoryRoleEmptyMap" map="parameters"/>
			    <set field="checkWorkEffortStatusHasMandatoryRoleEmptyMap.workEffortId" from-field="paramsMap.workEffortId"/>
			    <call-service break-on-error="false" service-name="checkWorkEffortStatusHasMandatoryRoleEmpty" in-map-name="checkWorkEffortStatusHasMandatoryRoleEmptyMap">
			      	<results-to-map map-name="resultServiceRole"/>
			    </call-service> 
			    <if-compare value="true" operator="equals" field="resultServiceRole.hasMandatoryRoleEmpty"> 
		        	<string-append suffix="&lt;br&gt;" string="${resultServiceRole.errorMsg}" field="errorMessageLista"/>
		        </if-compare>			                
                <log level="always" message="###### checkWorkEffortStatusService dopo controllo ruoli obbligatori errorMessageLista ${errorMessageLista}"/>
 			</if-compare>
            
            <!-- Check MANDATORY MEASURE controllo indicatori obbligatori -->
    		<if-compare operator="equals" value="Y" field="workEffortTypeStatus.hasMandatoryAccount">
                <set-service-fields service-name="checkWorkEffortStatusHasMandatoryIndicator" to-map="checkWorkEffortStatusHasMandatoryIndicatorMap" map="parameters"/>
			    <set field="checkWorkEffortStatusHasMandatoryIndicatorMap.workEffortId" from-field="paramsMap.workEffortId"/>
			    <call-service break-on-error="false" service-name="checkWorkEffortStatusHasMandatoryIndicator" in-map-name="checkWorkEffortStatusHasMandatoryIndicatorMap">
			      	<results-to-map map-name="resultServiceIndicator"/>
			    </call-service>
			    <if-compare value="true" operator="equals" field="resultServiceIndicator.hasMandatoryIndicatorEmpty"> 
		        	<string-append suffix="&lt;br&gt;" string="${resultServiceIndicator.errorMsg}" field="errorMessageLista"/>
		        </if-compare>            
                <log level="always" message="###### checkWorkEffortStatusService dopo controllo indicatori obbligatori errorMessageLista ${errorMessageLista}"/>
 		</if-compare>
        </if-not-empty>
        
        <!-- Controllo queryConfig, da cui escono errorMsg e warningMsg -->
        <if-compare-field operator="equals" field="workEffort.workEffortParentId" to-field="paramsMap.workEffortId">
		    <set-service-fields service-name="checkWorkEffortStatusHasQueryConfigError" to-map="checkWorkEffortStatusHasQueryConfigErrorMap" map="parameters"/>
		    <set field="checkWorkEffortStatusHasQueryConfigErrorMap.statusId" from-field="statusId"/>
		    <set field="checkWorkEffortStatusHasQueryConfigErrorMap.workEffortId" from-field="paramsMap.workEffortId"/>
		    <call-service break-on-error="true" service-name="checkWorkEffortStatusHasQueryConfigError" in-map-name="checkWorkEffortStatusHasQueryConfigErrorMap">
		      	<results-to-map map-name="resultServiceQueryConfig"/>
		    </call-service>
		    <log level="always" message="###### checkWorkEffortStatusService resultServiceQueryConfig ${resultServiceQueryConfig}"/>
		    <if-compare value="true" operator="equals" field="resultServiceQueryConfig.hasQueryConfigError"> 
	        	<string-append suffix="&lt;br&gt;" string="${resultServiceQueryConfig.errorMsg}" field="errorMessageLista"/>
	        </if-compare>
            <log level="always" message="###### checkWorkEffortStatusService dopo controllo queryConfig errorMessageLista ${errorMessageLista}"/>
            <if-compare value="true" operator="equals" field="resultServiceQueryConfig.hasQueryConfigWarning"> 
	        	<string-append suffix="&lt;br&gt;" string="${resultServiceQueryConfig.warningMsg}" field="failMessageLista"/>
	        </if-compare>
	        <log level="always" message="###### checkWorkEffortStatusService dopo controllo queryConfig failMessageLista ${failMessageLista}"/>
 		 </if-compare-field>
 		
        <!-- Controllo valori indicatori solo per schede -->
        <if-compare-field operator="equals" field="workEffort.workEffortParentId" to-field="paramsMap.workEffortId">
		    <set-service-fields service-name="checkWorkEffortStatusHasMandatoryTransEmpty" to-map="checkWorkEffortStatusHasMandatoryTransEmptyMap" map="parameters"/>
		    <set field="checkWorkEffortStatusHasMandatoryTransEmptyMap.statusId" from-field="statusId"/>
		    <set field="checkWorkEffortStatusHasMandatoryTransEmptyMap.workEffortId" from-field="paramsMap.workEffortId"/>
		    <call-service break-on-error="false" service-name="checkWorkEffortStatusHasMandatoryTransEmpty" in-map-name="checkWorkEffortStatusHasMandatoryTransEmptyMap">
		      	<results-to-map map-name="resultServiceTrans"/>
		    </call-service>
		        
		    <if-not-empty field="resultServiceTrans.errorMessage">
	            <string-append suffix="&lt;br&gt;" string="${resultServiceTrans.errorMessage}" field="errorMessageLista"/>
	        </if-not-empty>
	        <log level="always" message="###### checkWorkEffortStatusService errorMessageLista ${errorMessageLista}"/>
 		</if-compare-field>
        
        <if>
        	<condition>
        		<not>
        			<if-empty field="errorMessageLista"></if-empty>
        		</not>
        	</condition>
        	<then>
        		<property-to-field resource="WorkeffortExtUiLabels" property="WorkeffortRoot" field="rootLabel"/> <!-- Scheda -->
	 			<entity-one value-field="workEffortRoot" entity-name="WorkEffort" auto-field-map="false" use-cache="true">
		            <field-map field-name="workEffortId" from-field="workEffort.workEffortParentId"/>
		        </entity-one>
	        	
	        	<set field="errorRootPrefix" value="&lt;br&gt;${rootLabel} &lt;b&gt;${workEffortRoot.workEffortName}&lt;/b&gt;: &lt;br&gt;"/> <!-- Scheda Polo Scientifico (se possibile grassetto) -->
	        	<if>
			    	<condition>
			    		<and>
			    			<if-compare field="isPrimaryLang" value="false" operator="equals" type="Boolean"/>
			    			<not><if-empty field="workEffortRoot.workEffortNameLang"></if-empty></not>
			    		</and>
			    	</condition>
			    	<then>
			    		<set field="errorRootPrefix" value="&lt;br&gt;${rootLabel} &lt;b&gt;${workEffortRoot.workEffortNameLang}&lt;/b&gt;: &lt;br&gt;"/> <!-- Scheda Polo Scientifico (se possibile grassetto) -->
		        	</then>
			    </if>
	        	<string-append prefix="&lt;br&gt;" suffix="&lt;br&gt;" string="${errorRootPrefix}" field="errorMsg"/>
	        	<!-- warning failMessageLista sono concatenati agli errori errorMessageLista -->
	        	<string-append suffix="&lt;br&gt;" string="${failMessageLista}" field="errorMsg"/>
	        	<string-append suffix="&lt;br&gt;" string="${errorMessageLista}" field="errorMsg"/>
	        	<field-to-list list="error_list" field="errorMsg"/>
	        	<!-- in caso di errore, qui gli errori sono contenuti in automatico in errorMessageList -->
        	</then>
        	<else-if>
        		<!-- se ci sono solo warning, compare il nome della scheda con solo i warning -->
	        	<condition>
	        		<not>
	        			<if-empty field="failMessageLista"></if-empty>
	        		</not>
	        	</condition>
	        	<then>
		        	<property-to-field resource="WorkeffortExtUiLabels" property="WorkeffortRoot" field="rootLabel"/> <!-- Scheda -->
		 			<entity-one value-field="workEffortRoot" entity-name="WorkEffort" auto-field-map="false" use-cache="true">
			            <field-map field-name="workEffortId" from-field="workEffort.workEffortParentId"/>
			        </entity-one>
		        	
		        	<set field="errorRootPrefix" value="&lt;br&gt;${rootLabel} &lt;b&gt;${workEffortRoot.workEffortName}&lt;/b&gt;: &lt;br&gt;"/> <!-- Scheda Polo Scientifico (se possibile grassetto) -->
		        	<if>
				    	<condition>
				    		<and>
				    			<if-compare field="isPrimaryLang" value="false" operator="equals" type="Boolean"/>
				    			<not><if-empty field="workEffortRoot.workEffortNameLang"></if-empty></not>
				    		</and>
				    	</condition>
				    	<then>
				    		<set field="errorRootPrefix" value="&lt;br&gt;${rootLabel} &lt;b&gt;${workEffortRoot.workEffortNameLang}&lt;/b&gt;: &lt;br&gt;"/> <!-- Scheda Polo Scientifico (se possibile grassetto) -->
			        	</then>
				    </if>
		        	<string-append prefix="&lt;br&gt;" suffix="&lt;br&gt;" string="${errorRootPrefix}" field="failMessageList"/>
		        	<string-append suffix="&lt;br&gt;" string="${failMessageLista}" field="failMessageList"/>
		        	<field-to-result field="failMessageList" result-name="failMessageList"/>
	        	</then>
        	</else-if>
        </if>
        <check-errors/>
    </simple-method>
    
	<simple-method method-name="crudServiceDefaultOrchestration_WorkEffortRoot" short-description="crudServiceDefaultOrchestration_workEffortRoot">
        <set field="params" from-field="parameters.parameters"/>
        <if-compare field="params.operation" operator="equals" value="DELETE">
	        <set field="workEffortRootPhysicalDeleteMap.workEffortId" from-field="params.workEffortId"/>
	        <call-service break-on-error="false" service-name="workEffortRootPhysicalDelete" in-map-name="workEffortRootPhysicalDeleteMap">
	        	<result-to-field result-name="blockingErrors"/>
	        	<result-to-field result-name="errorMessage"/>
	        </call-service>
	        <check-errors/>
	        
	        <else>
	        	<call-service service-name="crudServiceDefaultOrchestration_WorkEffort" in-map-name="parameters">
	        		 <result-to-field result-name="id"/>
	       		</call-service>
                <check-errors/>
                
                <field-to-result field="id"/>
	        </else>
	    </if-compare>
	    <log level="always" message="id ${id}"/>
	</simple-method>
	
	<simple-method method-name="executeCompareMeasureTypeEnumIdAndWeight" short-description="executeCompareMeasureTypeEnumIdAndWeight">
		<!-- GN-1508 Solo le misure KPI possono avere un peso diverso da zero.
			Il valore del peso e' fondamentale per la determnazione del Tipo Misura, quando ho entrambi i campi.
			Nel caso di aggiornamento da mappa del glAccount, se un utente cambia la droplist, viene cmq passato al servizio un valore per il peso, gia corretto
			Nel caso di aggiornamento dal servizio di allienamneto indicatori/misura il peso deve essere allieanto a partire dal tipo misura,
			Quindi allineo il peso prima di invocare questo servizio -->
        <!-- gn 481 impostazione campo kpiScoreWeight se questo non viene passato al servizio -->
        <set field="kpiScoreWeightOld" from-field="parameters.kpiScoreWeight"/>
        <set field="weMeasureTypeEnumIdOld" from-field="parameters.weMeasureTypeEnumId"/>
        <if-compare operator="equals" value="WEMT_PERF" field="parameters.weMeasureTypeEnumId">
        	<if-empty field="parameters.kpiScoreWeight">
				<set field="parameters.kpiScoreWeight" value="100" type="Double"/>
           	</if-empty>
        	<if-empty field="parameters.kpiOtherWeight">
				<set field="parameters.kpiOtherWeight" value="100" type="Double"/>
           	</if-empty>           	
        </if-compare>
        
        <if-compare operator="not-equals" value="WEMT_PERF" field="parameters.weMeasureTypeEnumId">
        	<if-empty field="parameters.kpiScoreWeight">
				<set field="parameters.kpiScoreWeight" value="0" type="Double"/>
           	</if-empty>
        	<if-empty field="parameters.kpiOtherWeight">
				<set field="parameters.kpiOtherWeight" value="0" type="Double"/>
           	</if-empty>
        </if-compare>
		
		<if-compare operator="equals" value="0" field="parameters.kpiScoreWeight" type="Double">
        	<if-compare operator="equals" value="WEMT_PERF" field="parameters.weMeasureTypeEnumId" >
                <set field="parameters.weMeasureTypeEnumId" value="WEMT_OUTPUT"/>
            </if-compare>
		</if-compare>
			
		<if-compare operator="not-equals" value="0" field="parameters.kpiScoreWeight" type="Double">
        	<if-compare operator="not-equals" value="WEMT_PERF" field="parameters.weMeasureTypeEnumId" >
            	<set field="parameters.weMeasureTypeEnumId" value="WEMT_PERF"/>
            </if-compare>
		</if-compare>
        
        <log message=" ### parameters.kpiScoreWeight ${kpiScoreWeightOld} become ${parameters.kpiScoreWeight}, parameters.weMeasureTypeEnumId ${weMeasureTypeEnumIdOld} become ${parameters.weMeasureTypeEnumId} " level="always" />
        <field-to-result result-name="kpiScoreWeight" field="parameters.kpiScoreWeight"/>
        <field-to-result result-name="kpiOtherWeight" field="parameters.kpiOtherWeight"/>
        <field-to-result result-name="weMeasureTypeEnumId" field="parameters.weMeasureTypeEnumId"/>    
    </simple-method>
    
    <simple-method method-name="crudServiceDefaultOrchestration_WorkEffortCommunicationEventView" short-description="crudServiceOperation_WorkEffortCommunicationEventView">
    	<set field="params" from-field="parameters.parameters"/>
		<log level="always" message=" ### params.contactListId ${params.contactListId}" />
        <log level="always" message=" ### params.contactMechIdTo1 ${params.contactMechIdTo1}" />
        <log level="always" message=" ### params.contactMechIdTo2 ${params.contactMechIdTo2}" />
        <log level="always" message=" ### params.contactMechIdTo3 ${params.contactMechIdTo3}" />
        <log level="always" message=" ### params.contactMechIdFrom ${params.contactMechIdFrom}" />
        
        <if>
    		<condition>
				<or>
					<if-compare-field to-field="params.contactMechIdTo1" operator="equals" field="params.contactMechIdTo2"></if-compare-field>
					<if-compare-field to-field="params.contactMechIdTo1" operator="equals" field="params.contactMechIdTo3"></if-compare-field>
				</or>
			</condition>
			<then>
       			<clear-field field="params.contactMechIdTo1"/>
       			<set field="params.contactMechIdTo1" from-field="params.contactMechIdTo2"/>
                <set field="params.contactMechIdTo2" from-field="params.contactMechIdTo3"/>
       		</then>
       	</if>
       	<if>
    		<condition>
				<or>
					<if-compare-field to-field="params.contactMechIdTo2" operator="equals" field="params.contactMechIdTo1"></if-compare-field>
					<if-compare-field to-field="params.contactMechIdTo2" operator="equals" field="params.contactMechIdTo3"></if-compare-field>
				</or>
			</condition>
			<then>
       			<clear-field field="params.contactMechIdTo2"/>
       			<set field="params.contactMechIdTo1" from-field="params.contactMechIdTo1"/>
                <set field="params.contactMechIdTo2" from-field="params.contactMechIdTo3"/>
       		</then>
       	</if>
       	<if>
    		<condition>
				<or>
					<if-compare-field to-field="params.contactMechIdTo3" operator="equals" field="params.contactMechIdTo1"></if-compare-field>
					<if-compare-field to-field="params.contactMechIdTo3" operator="equals" field="params.contactMechIdTo2"></if-compare-field>
				</or>
			</condition>
			<then>
       			<clear-field field="params.contactMechIdTo3"/>
       		</then>
       	</if>
       	
       	<set-service-fields service-name="createCommunicationEventWorkEff" to-map="createParams" map="params"/>
        
        <entity-and list="contactMechList" entity-name="PartyContactMech">
			<field-map field-name="contactMechId" from-field="params.contactMechIdTo1"/>
		</entity-and>
		<first-from-list entry="contactMech" list="contactMechList"/>
		
		<set field="createParams.partyIdTo" from-field="contactMech.partyId"/>
        <set field="createParams.contactMechIdTo" from-field="params.contactMechIdTo1"/>
        <call-service service-name="createCommunicationEventWorkEff" in-map-name="createParams">
           	<result-to-field result-name="communicationEventId"/>
 		</call-service>
 		
 		<if-not-empty field="params.contactMechIdTo2">
	 		<entity-and list="contactMechList2" entity-name="PartyContactMech">
				<field-map field-name="contactMechId" from-field="params.contactMechIdTo2"/>
			</entity-and>
			<first-from-list entry="contactMech2" list="contactMechList2"/>
			<set field="commRole.communicationEventId" from-field="communicationEventId"/>
	        <set field="commRole.partyId" from-field="contactMech2.partyId"/>
	        <set field="commRole.roleTypeId" value="CC"/>
	        <set field="commRole.contactMechId" from-field="params.contactMechIdTo2"/>
	        <call-service service-name="createCommunicationEventRole" in-map-name="commRole"/>
 		</if-not-empty>
 		<if-not-empty field="params.contactMechIdTo3">
	 		<entity-and list="contactMechList3" entity-name="PartyContactMech">
				<field-map field-name="contactMechId" from-field="params.contactMechIdTo3"/>
			</entity-and>
			<first-from-list entry="contactMech3" list="contactMechList3"/>
			<set field="commRole.communicationEventId" from-field="communicationEventId"/>
	        <set field="commRole.partyId" from-field="contactMech3.partyId"/>
	        <set field="commRole.roleTypeId" value="CC"/>
	        <set field="commRole.contactMechId" from-field="params.contactMechIdTo3"/>
	        <call-service service-name="createCommunicationEventRole" in-map-name="commRole"/>
 		</if-not-empty>
       	<check-errors/>
        
        <set from-field="communicationEventId" field="id.communicationEventId"/>
        <set from-field="params.workEffortId" field="id.workEffortId"/>
        <field-to-result field="id"/>
    </simple-method>
    
    <simple-method method-name="createResponsibleWorkEffortAssoc" short-description="createResponsibleWorkEffortAssoc">   
        <entity-and list="respWeAssocList" entity-name="WorkEffortTypeAssoc">
        	<field-map field-name="workEffortTypeId" from-field="parameters.workEffortTypeId"/>
        	<field-map field-name="hasResp" value="Y"/>
        </entity-and>
        <if-not-empty field="respWeAssocList">
        	<iterate entry="respWeAssoc" list="respWeAssocList">   
        		<clear-field field="workEffortList"/>   		
        		<entity-condition list="workEffortList" entity-name="WorkEffort">
        			<condition-list combine="and">
        				<condition-expr field-name="workEffortTypeId" from-field="respWeAssoc.workEffortTypeIdRef"/>
        				<condition-expr field-name="orgUnitId" from-field="parameters.orgUnitId"/>
        				<condition-expr field-name="estimatedStartDate" operator="less-equals" from-field="parameters.estimatedCompletionDate"/>
        				<condition-expr field-name="estimatedCompletionDate" operator="greater-equals" from-field="parameters.estimatedStartDate"/>
        			</condition-list>
        		</entity-condition>
        		
        		<if-not-empty field="workEffortList">
        			<iterate entry="workEffort" list="workEffortList">
        			    <clear-field field="createWorkEffortAssocParams"/>
        				<set field="createWorkEffortAssocParams.entityName" value="WorkEffortAssoc"/>      				
                    	<set field="createWorkEffortAssocParams.operation" value="CREATE"/>
                    	<if-compare field="respWeAssoc.wefromWetoEnumId" operator="equals" value="WETAFROM">
                    		<set field="createWorkEffortAssocParams.parameters.assocWeight" default-value="100" from-field="parameters.assocWeightFROMHasResp" type="Double"/>
                    		<set field="createWorkEffortAssocParams.parameters.workEffortIdFrom" from-field="parameters.workEffortId"/>
                    		<set field="createWorkEffortAssocParams.parameters.workEffortIdTo" from-field="workEffort.workEffortId"/>
                    	</if-compare>
                    	<if-compare field="respWeAssoc.wefromWetoEnumId" operator="equals" value="WETATO">
                    		<set field="createWorkEffortAssocParams.parameters.assocWeight" default-value="100" from-field="parameters.assocWeightTOHasResp" type="Double"/>
                    		<set field="createWorkEffortAssocParams.parameters.workEffortIdFrom" from-field="workEffort.workEffortId"/>
                    		<set field="createWorkEffortAssocParams.parameters.workEffortIdTo" from-field="parameters.workEffortId"/>
                    	</if-compare>
                    	<set field="createWorkEffortAssocParams.parameters.workEffortAssocTypeId" from-field="respWeAssoc.workEffortAssocTypeId"/>
                    	<set field="createWorkEffortAssocParams.parameters.fromDate" from-field="parameters.estimatedStartDate" type="Timestamp"/>
                    	<set field="createWorkEffortAssocParams.parameters.thruDate" from-field="parameters.estimatedCompletionDate" type="Timestamp"/>
                    	<set field="createWorkEffortAssocParams.parameters.sequenceNum" value="1" type="Long"/> 
                    	<call-service service-name="crudServiceDefaultOrchestration_WorkEffortAssoc" in-map-name="createWorkEffortAssocParams"/>    			
        			</iterate>
        		</if-not-empty>
        	</iterate>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="deleteResponsibleWorkEffortAssoc" short-description="deleteResponsibleWorkEffortAssoc">
        <entity-and list="respWeAssocList" entity-name="WorkEffortTypeAssoc">
        	<field-map field-name="workEffortTypeId" from-field="parameters.workEffortTypeId"/>
        	<field-map field-name="hasResp" value="Y"/>
        </entity-and>
        <if-not-empty field="respWeAssocList">
        	<iterate entry="respWeAssoc" list="respWeAssocList">
        		<clear-field field="workEffortAssocList"/>
        		
        		<if-compare field="respWeAssoc.wefromWetoEnumId" operator="equals" value="WETAFROM">
        			<entity-and list="workEffortAssocList" entity-name="WorkEffortAssocWeFromAndToView">
        				<field-map field-name="workEffortIdFrom" from-field="parameters.workEffortId"/>
        				<field-map field-name="workEffortAssocTypeId" from-field="respWeAssoc.workEffortAssocTypeId"/>
        				<field-map field-name="wetWorkEffortTypeId" from-field="respWeAssoc.workEffortTypeIdRef"/>
        				<field-map field-name="wetOrgUnitId" from-field="parameters.orgUnitId"/>
        			</entity-and>	        		
        		</if-compare>
        		<if-compare field="respWeAssoc.wefromWetoEnumId" operator="equals" value="WETATO">
        			<entity-and list="workEffortAssocList" entity-name="WorkEffortAssocWeFromAndToView">
        			    <field-map field-name="workEffortIdTo" from-field="parameters.workEffortId"/>
        				<field-map field-name="workEffortAssocTypeId" from-field="respWeAssoc.workEffortAssocTypeId"/>
        				<field-map field-name="wefWorkEffortTypeId" from-field="respWeAssoc.workEffortTypeIdRef"/>
        				<field-map field-name="wefOrgUnitId" from-field="parameters.orgUnitId"/>
        			</entity-and>	        		
        		</if-compare>
        		
        		<if-not-empty field="workEffortAssocList">
        			<iterate entry="workEffortAssoc" list="workEffortAssocList">
        			    <clear-field field="deleteWorkEffortAssocParams"/>
        				
        				<set field="deleteWorkEffortAssocParams.entityName" value="WorkEffortAssoc"/>      				
                    	<set field="deleteWorkEffortAssocParams.operation" value="DELETE"/>
                    	<if-compare field="respWeAssoc.wefromWetoEnumId" operator="equals" value="WETAFROM">
                    		<set field="deleteWorkEffortAssocParams.parameters.workEffortIdFrom" from-field="parameters.workEffortId"/>
                    		<set field="deleteWorkEffortAssocParams.parameters.workEffortIdTo" from-field="workEffortAssoc.workEffortIdTo"/>
                    	</if-compare>
                    	<if-compare field="respWeAssoc.wefromWetoEnumId" operator="equals" value="WETATO">
                    		<set field="deleteWorkEffortAssocParams.parameters.workEffortIdFrom" from-field="workEffortAssoc.workEffortIdFrom"/>
                    		<set field="deleteWorkEffortAssocParams.parameters.workEffortIdTo" from-field="parameters.workEffortId"/>
                    	</if-compare>
                    	<set field="deleteWorkEffortAssocParams.parameters.workEffortAssocTypeId" from-field="respWeAssoc.workEffortAssocTypeId"/>
                    	<set field="deleteWorkEffortAssocParams.parameters.fromDate" from-field="workEffortAssoc.fromDate" type="Timestamp"/>
                    	<call-service service-name="crudServiceDefaultOrchestration_WorkEffortAssoc" in-map-name="deleteWorkEffortAssocParams"/>        			
        			</iterate>
        		</if-not-empty>        	
        	</iterate>
        </if-not-empty>    
    </simple-method>
    
    <simple-method method-name="updateResponsibleWorkEffortAssoc" short-description="updateResponsibleWorkEffortAssoc">
        <entity-and list="respWeAssocList" entity-name="WorkEffortTypeAssoc">
        	<field-map field-name="workEffortTypeId" from-field="parameters.workEffortTypeId"/>
        	<field-map field-name="hasResp" value="Y"/>
        </entity-and>
        <if-not-empty field="respWeAssocList">
        	<iterate entry="respWeAssoc" list="respWeAssocList">
        		<clear-field field="workEffortAssocList"/>
        		
        		<if-compare field="respWeAssoc.wefromWetoEnumId" operator="equals" value="WETAFROM">
        			<entity-and list="workEffortAssocList" entity-name="WorkEffortAssocWeFromAndToView">
        				<field-map field-name="workEffortIdFrom" from-field="parameters.workEffortId"/>
        				<field-map field-name="workEffortAssocTypeId" from-field="respWeAssoc.workEffortAssocTypeId"/>
        				<field-map field-name="wetWorkEffortTypeId" from-field="respWeAssoc.workEffortTypeIdRef"/>
        				<field-map field-name="wetOrgUnitId" from-field="parameters.orgUnitId"/>
        			</entity-and>	        		
        		</if-compare>
        		<if-compare field="respWeAssoc.wefromWetoEnumId" operator="equals" value="WETATO">
        			<entity-and list="workEffortAssocList" entity-name="WorkEffortAssocWeFromAndToView">
        			    <field-map field-name="workEffortIdTo" from-field="parameters.workEffortId"/>
        				<field-map field-name="workEffortAssocTypeId" from-field="respWeAssoc.workEffortAssocTypeId"/>
        				<field-map field-name="wefWorkEffortTypeId" from-field="respWeAssoc.workEffortTypeIdRef"/>
        				<field-map field-name="wefOrgUnitId" from-field="parameters.orgUnitId"/>
        			</entity-and>	        		
        		</if-compare>
        		
        		<if-not-empty field="workEffortAssocList">
        			<iterate entry="workEffortAssoc" list="workEffortAssocList">
        			    <clear-field field="updateWorkEffortAssocParams"/>
        				
        				<set field="updateWorkEffortAssocParams.entityName" value="WorkEffortAssoc"/>      				
                    	<set field="updateWorkEffortAssocParams.operation" value="UPDATE"/>
                    	<if-compare field="respWeAssoc.wefromWetoEnumId" operator="equals" value="WETAFROM">
                    		<set field="updateWorkEffortAssocParams.parameters.assocWeight" from-field="parameters.assocWeightFROMHasResp"/>
                    		<set field="updateWorkEffortAssocParams.parameters.workEffortIdFrom" from-field="parameters.workEffortId"/>
                    		<set field="updateWorkEffortAssocParams.parameters.workEffortIdTo" from-field="workEffortAssoc.workEffortIdTo"/>
                    	</if-compare>
                    	<if-compare field="respWeAssoc.wefromWetoEnumId" operator="equals" value="WETATO">
                    		<set field="updateWorkEffortAssocParams.parameters.assocWeight" from-field="parameters.assocWeightTOHasResp"/>
                    		<set field="updateWorkEffortAssocParams.parameters.workEffortIdFrom" from-field="workEffortAssoc.workEffortIdFrom"/>
                    		<set field="updateWorkEffortAssocParams.parameters.workEffortIdTo" from-field="parameters.workEffortId"/>
                    	</if-compare>
                    	<set field="updateWorkEffortAssocParams.parameters.workEffortAssocTypeId" from-field="respWeAssoc.workEffortAssocTypeId"/>
                    	<set field="updateWorkEffortAssocParams.parameters.fromDate" from-field="workEffortAssoc.fromDate" type="Timestamp"/>
                    	<call-service service-name="crudServiceDefaultOrchestration_WorkEffortAssoc" in-map-name="updateWorkEffortAssocParams"/>        			
        			</iterate>
        		</if-not-empty>        	
        	</iterate>
        </if-not-empty>    
    </simple-method>
	
	<simple-method method-name="manageUniqueWorkEffortAssoc" short-description="manage Unique WorkEffortAssoc">
		<log level="verbose" message="For ${parameters.workEffortAssocTypeId} - FROM ${parameters.workEffortIdFrom} - TO ${parameters.workEffortIdTo} - [${parameters.fromDate} - ${parameters.thruDate}]"/>
 		<if-compare operator="equals" value="WETATO" field="parameters.wefromWetoEnumId">
	        <entity-condition list="workEffortAssocList" entity-name="WorkEffortAndTypeAssocToView2">
	        	<condition-list>
	            	<condition-expr field-name="workEffortId" from-field="parameters.workEffortIdTo"/>
					<condition-expr field-name="isUnique" value="Y"/>
	        		<condition-expr field-name="workEffortAssocTypeId" from-field="parameters.workEffortAssocTypeId"/>
	        		<condition-expr field-name="fromWorkEffortTypeId" operator="equals" from-field="parameters.workEffortTypeIdFrom"/>
            		<condition-expr field-name="fromWorkEffortId" operator="not-equals" value="${null}"/>
            	</condition-list>
			</entity-condition>
	        <else>
		        <entity-condition list="workEffortAssocList" entity-name="WorkEffortAndTypeAssocFromView">
		        	<condition-list>
		            	<condition-expr field-name="workEffortId" from-field="parameters.workEffortIdFrom"/>
						<condition-expr field-name="isUnique" value="Y"/>
		        		<condition-expr field-name="workEffortAssocTypeId" from-field="parameters.workEffortAssocTypeId"/>
		        		<condition-expr field-name="toWorkEffortTypeId" operator="equals" from-field="parameters.workEffortTypeIdTo"/>
            			<condition-expr field-name="toWorkEffortId" operator="not-equals" value="${null}"/>
	            	</condition-list>
				</entity-condition>
	        </else>
        </if-compare>
        
        <log level="verbose" message="workEffortAssocList = ${workEffortAssocList}" />
        <set field="res" value="${bsh: return workEffortAssocList.size();}"/>
                    
		<if-compare field="res" value="1" operator="greater">
        	<add-error>
            	<fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortAssocNotUnique"/>
            </add-error>
            <check-errors/>
        </if-compare>		
			            				
   		<!-- Gestione associative univoche unique -->
   		<if>
        	<condition>
            	<and>
                	<not>
                    	<if-empty field="parameters.workEffortAssocOtherFieldValue"/>
                 	</not>
     			</and>
     		</condition>
     		<then>
				<if-empty field="workEffortAssocList">
					<clear-field field="workEffortAssocMap"/>
					<set field="workEffortAssocMap.entityName" value="WorkEffortAssoc"/>
					<set field="workEffortAssocMap.operation" value="CREATE"/>
					
					<entity-one value-field="workEffortFrom" entity-name="WorkEffort" auto-field-map="false">
					    <field-map field-name="workEffortId" from-field="parameters.workEffortIdFrom"/>
					</entity-one>
					<entity-one value-field="workEffortTo" entity-name="WorkEffort" auto-field-map="false">
					    <field-map field-name="workEffortId" from-field="parameters.workEffortIdTo"/>
					</entity-one>
					<if-compare-field operator="greater-equals" field="workEffortFrom.estimatedStartDate" to-field="workEffortTo.estimatedStartDate" type="Timestamp">
					    <set field="assocStartDate" from-field="workEffortFrom.estimatedStartDate" type="Timestamp"/>
					<else>
					    <set field="assocStartDate" from-field="workEffortTo.estimatedStartDate" type="Timestamp"/>
					</else>
					</if-compare-field>					
					<if-compare-field operator="less-equals" field="workEffortFrom.estimatedCompletionDate" to-field="workEffortTo.estimatedCompletionDate" type="Timestamp">
					    <set field="assocCompletionDate" from-field="workEffortFrom.estimatedCompletionDate" type="Timestamp"/>
					<else>
					    <set field="assocCompletionDate" from-field="workEffortTo.estimatedCompletionDate" type="Timestamp"/>
					</else>
					</if-compare-field>				
			
					<set field="workEffortAssocMap.parameters.workEffortIdFrom" from-field="parameters.workEffortIdFrom"/>
					<set field="workEffortAssocMap.parameters.workEffortIdTo" from-field="parameters.workEffortIdTo"/>
					<set field="workEffortAssocMap.parameters.workEffortAssocTypeId" from-field="parameters.workEffortAssocTypeId"/>
					<set field="workEffortAssocMap.parameters.assocWeight" from-field="parameters.assocWeight"/>
					<set field="workEffortAssocMap.parameters.fromDate" from-field="assocStartDate" type="Timestamp"/>
				    <set field="workEffortAssocMap.parameters.thruDate" from-field="assocCompletionDate" type="Timestamp"/>
				    <set field="workEffortAssocMap.parameters.sequenceNum" value="1" type="Long"/>
			
			        <log level="always" message="CREATE workEffortAssocMap.parameters = ${workEffortAssocMap.parameters}" />
			        <call-service service-name="crudServiceDefaultOrchestration_WorkEffortAssoc" in-map-name="workEffortAssocMap"/>
			        <check-errors/>
			        <else>
			        	<!-- essendo la relazione unica, o sto cambiando obiettivo relazionato, oppure update di altri campi: -->
			        	<first-from-list entry="workEffortAssocToUpdate" list="workEffortAssocList"/>
			        	<log level="verbose" message="For workEffortAssocToUpdate.workEffortIdFrom ${workEffortAssocToUpdate.workEffortIdFrom}"/>
				 		<log level="verbose" message="For workEffortAssocToUpdate.workEffortIdTo ${workEffortAssocToUpdate.workEffortIdTo}"/>
				 		<log level="verbose" message="For workEffortAssocToUpdate.fromWorkEffortId ${workEffortAssocToUpdate.fromWorkEffortId}"/>
				 		<log level="verbose" message="For workEffortAssocToUpdate.toWorkEffortId ${workEffortAssocToUpdate.toWorkEffortId}"/>
			        	
                 		<if>
                 			<condition>
                 				<or>
                 					<and>
                 						<if-compare-field operator="equals" field="workEffortAssocToUpdate.workEffortId" to-field="parameters.workEffortIdFrom"></if-compare-field>
                 						<if-compare-field operator="not-equals" field="workEffortAssocToUpdate.toWorkEffortId" to-field="parameters.workEffortIdTo"></if-compare-field>
	                 				</and>
                 					<and>
	                 					<if-compare-field operator="not-equals" field="workEffortAssocToUpdate.fromWorkEffortId" to-field="parameters.workEffortIdFrom"></if-compare-field>
	                 					<if-compare-field operator="equals" field="workEffortAssocToUpdate.workEffortId" to-field="parameters.workEffortIdTo"></if-compare-field>
	                 				</and>
                 				</or>
                 			</condition>
                			<then>
                				<log level="verbose" message="DELETE workEffortAssocList = ${workEffortAssocList}" />
                				
                				<first-from-list list="workEffortAssocList" entry="workEffortAssocView" />
						    	<log level="verbose" message="DELETE workEffortAssocView = ${workEffortAssocView}" />
						    	
						    	<if-compare operator="equals" value="WETATO" field="parameters.wefromWetoEnumId">
						        	<get-related-one relation-name="AssocToWorkEffortAssoc" to-value-field="workEffortAssoc" value-field="workEffortAssocView"/>
						        	<log level="always" message="DELETE workEffortAssoc = ${workEffortAssoc}" />
						        	<if-not-empty field="workEffortAssoc">
					        			<remove-value value-field="workEffortAssoc"/>
					        		</if-not-empty>
						        	<else>
						        		<get-related-one relation-name="AssocFromWorkEffortAssoc" to-value-field="workEffortAssoc" value-field="workEffortAssocView"/>
							        	<log level="always" message="DELETE workEffortAssoc = ${workEffortAssoc}" />
							        	<if-not-empty field="workEffortAssoc">
						        			<remove-value value-field="workEffortAssoc"/>
						        		</if-not-empty>
						        	</else>
					        	</if-compare>
                					
                				<clear-field field="workEffortAssocMap"/>
								<set field="workEffortAssocMap.entityName" value="WorkEffortAssoc"/>
								<set field="workEffortAssocMap.operation" value="CREATE"/>
								
								<entity-one value-field="workEffortFrom" entity-name="WorkEffort" auto-field-map="false">
					    			<field-map field-name="workEffortId" from-field="parameters.workEffortIdFrom"/>
								</entity-one>
								<entity-one value-field="workEffortTo" entity-name="WorkEffort" auto-field-map="false">
					    			<field-map field-name="workEffortId" from-field="parameters.workEffortIdTo"/>
								</entity-one>
								<if-compare-field operator="greater-equals" field="workEffortFrom.estimatedStartDate" to-field="workEffortTo.estimatedStartDate" type="Timestamp">
					    			<set field="assocStartDate" from-field="workEffortFrom.estimatedStartDate" type="Timestamp"/>
								<else>
					    			<set field="assocStartDate" from-field="workEffortTo.estimatedStartDate" type="Timestamp"/>
								</else>
								</if-compare-field>					
								<if-compare-field operator="less-equals" field="workEffortFrom.estimatedCompletionDate" to-field="workEffortTo.estimatedCompletionDate" type="Timestamp">
					    			<set field="assocCompletionDate" from-field="workEffortFrom.estimatedCompletionDate" type="Timestamp"/>
								<else>
					    			<set field="assocCompletionDate" from-field="workEffortTo.estimatedCompletionDate" type="Timestamp"/>
								</else>
								</if-compare-field>									
						
								<set field="workEffortAssocMap.parameters.workEffortIdFrom" from-field="parameters.workEffortIdFrom"/>
								<set field="workEffortAssocMap.parameters.workEffortIdTo" from-field="parameters.workEffortIdTo"/>
								<set field="workEffortAssocMap.parameters.workEffortAssocTypeId" from-field="parameters.workEffortAssocTypeId"/>
								<set field="workEffortAssocMap.parameters.assocWeight" from-field="parameters.assocWeight"/>
								<set field="workEffortAssocMap.parameters.fromDate" from-field="assocStartDate" type="Timestamp"/>
							    <set field="workEffortAssocMap.parameters.thruDate" from-field="assocCompletionDate" type="Timestamp"/>
							    <set field="workEffortAssocMap.parameters.sequenceNum" value="1" type="Long"/>
						
						        <log level="always" message="CREATE workEffortAssocMap.parameters = ${workEffortAssocMap.parameters}" />
						        <call-service service-name="crudServiceDefaultOrchestration_WorkEffortAssoc" in-map-name="workEffortAssocMap"/>
                			</then>
                			<else>         			    
                			    <if-compare operator="equals" value="WETATO" field="parameters.wefromWetoEnumId">
                			    	<entity-one value-field="woekEffortAssoc" entity-name="WorkEffortAssoc" auto-field-map="false">
                			        	<field-map field-name="workEffortIdFrom" from-field="workEffortAssocToUpdate.fromWorkEffortId"/>
                			        	<field-map field-name="workEffortIdTo" from-field="workEffortAssocToUpdate.workEffortId"/>
                			        	<field-map field-name="workEffortAssocTypeId" from-field="workEffortAssocToUpdate.workEffortAssocTypeId"/>
                			        	<field-map field-name="fromDate" from-field="workEffortAssocToUpdate.fromDate"/>
                			    	</entity-one>
                			    <else>
                			    	<entity-one value-field="workEffortAssoc" entity-name="WorkEffortAssoc" auto-field-map="false">
                			        	<field-map field-name="workEffortIdFrom" from-field="workEffortAssocToUpdate.workEffortId"/>
                			        	<field-map field-name="workEffortIdTo" from-field="workEffortAssocToUpdate.toWorkEffortId"/>
                			        	<field-map field-name="workEffortAssocTypeId" from-field="workEffortAssocToUpdate.workEffortAssocTypeId"/>
                			        	<field-map field-name="fromDate" from-field="workEffortAssocToUpdate.fromDate"/>
                			    	</entity-one>
                			    </else> 
                			    </if-compare>            			   
                			    <if-not-empty field="workEffortAssoc">
                			        <entity-one value-field="workEffortFrom" entity-name="WorkEffort" auto-field-map="false">
					    				<field-map field-name="workEffortId" from-field="parameters.workEffortIdFrom"/>
									</entity-one>
									<entity-one value-field="workEffortTo" entity-name="WorkEffort" auto-field-map="false">
					    				<field-map field-name="workEffortId" from-field="parameters.workEffortIdTo"/>
									</entity-one>
						
									<if-compare-field operator="less-equals" field="workEffortFrom.estimatedCompletionDate" to-field="workEffortTo.estimatedCompletionDate" type="Timestamp">
					    				<set field="assocCompletionDate" from-field="workEffortFrom.estimatedCompletionDate" type="Timestamp"/>
									<else>
					    				<set field="assocCompletionDate" from-field="workEffortTo.estimatedCompletionDate" type="Timestamp"/>
									</else>				
									</if-compare-field>	
					   				<set field="workEffortAssoc.assocWeight" from-field="parameters.assocWeight"/>
					   				<set field="workEffortAssoc.sequenceNum" from-field="parameters.sequenceNum" type="Long" default-value="1"/>
					   				<set field="workEffortAssoc.thruDate" from-field="assocCompletionDate" type="Timestamp"/>
					   				<store-value value-field="workEffortAssoc"/>
                			    </if-not-empty>
                			</else>
                		</if>
                 		<check-errors/>
                	</else>
                </if-empty>
			</then>
			<else>
				<if-not-empty field="workEffortAssocList">
			    	<log level="verbose" message="DELETE workEffortAssocList = ${workEffortAssocList}" />
			    	<first-from-list list="workEffortAssocList" entry="workEffortAssocView" />
			    	<log level="verbose" message="DELETE workEffortAssocView = ${workEffortAssocView}" />
			    	
			    	<if-compare operator="equals" value="WETATO" field="parameters.wefromWetoEnumId">
			        	<get-related-one relation-name="AssocToWorkEffortAssoc" to-value-field="workEffortAssoc" value-field="workEffortAssocView"/>
			        	<log level="always" message="DELETE workEffortAssoc = ${workEffortAssoc}" />
			        	<if-not-empty field="workEffortAssoc">
		        			<remove-value value-field="workEffortAssoc"/>
		        		</if-not-empty>
			        	<else>
			        		<get-related-one relation-name="AssocFromWorkEffortAssoc" to-value-field="workEffortAssoc" value-field="workEffortAssocView"/>
				        	<log level="always" message="DELETE workEffortAssoc = ${workEffortAssoc}" />
				        	<if-not-empty field="workEffortAssoc">
			        			<remove-value value-field="workEffortAssoc"/>
			        		</if-not-empty>
			        	</else>
		        	</if-compare>
	        	</if-not-empty>
			</else>
		</if>
  	</simple-method>
  	
  	<!-- controllo associazioni obbligatorie -->
    <simple-method method-name="checkWorkEffortStatusHasMandatoryAssocEmpty" short-description="check HasMandatoryAssoc is Empty">
        <call-class-method class-name="com.mapsengineering.base.events.LanguageLocaleEvent" method-name="isPrimaryLanguage" ret-field="isPrimaryLang">
			<field field="locale" type="java.util.Locale"/>
		</call-class-method>
        <!-- checkWorkEffortStatusHasMandatoryAssocEmpty -->
        <log level="always" message="checkWorkEffortStatusHasMandatoryAssocEmpty parameters.workEffortId ${parameters.workEffortId}, isPrimaryLang ${isPrimaryLang}"/>
        <entity-one entity-name="WorkEffort" value-field="workEffortRoot">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-one>
        <log level="always" message="checkWorkEffortStatusHasMandatoryAssocEmpty workEffortRoot ${workEffortRoot}"/>
        <set field="hasMandatoryAssocEmpty" type="Boolean" value="false"/>
        <if-not-empty field="workEffortRoot">
            
            <get-related-one relation-name="WorkEffortType" to-value-field="workEffortTypeRoot" value-field="workEffortRoot"/>
            <log level="always" message="checkWorkEffortStatusHasMandatoryAssocEmpty workEffortTypeRoot.isRoot ${workEffortTypeRoot.isRoot}"/>
        	<if-compare operator="equals" value="Y" field="workEffortTypeRoot.isRoot"> 
		        <entity-and list="workEffortList" entity-name="WorkEffort">
		            <field-map field-name="workEffortParentId" from-field="parameters.workEffortId"/>
		            <order-by field-name="workEffortId"/>
		        </entity-and>
		
		        <iterate entry="workEffort" list="workEffortList">
        			<!-- if empty assoc for workEffort then addWorkEffortToErrorMsg = true, otherwise false-->
		        	<set field="addWorkEffortToErrorMsg" type="Boolean" value="false"/>
		                   
		            <clear-field field="workEffortAssocListTo"/>       
			        <entity-condition list="workEffortAssocListTo" entity-name="WorkEffortAndTypeAssocToView2">
			        	<condition-list>
			            	<condition-expr field-name="workEffortId" from-field="workEffort.workEffortId"/>
							<condition-expr field-name="isMandatory" value="Y"/>
			        		<condition-expr field-name="fromWorkEffortId" operator="equals" value="${null}"/>
			           	</condition-list>
					</entity-condition>
			        <set field="resTo" value="${bsh: return workEffortAssocListTo.size();}"/>
					                    
			        <clear-field field="workEffortAssocListFrom"/>       
			        <entity-condition list="workEffortAssocListFrom" entity-name="WorkEffortAndTypeAssocFromView">
			        	<condition-list>
			            	<condition-expr field-name="workEffortId" from-field="workEffort.workEffortId"/>
							<condition-expr field-name="isMandatory" value="Y"/>
			        		<condition-expr field-name="toWorkEffortId" operator="equals" value="${null}"/>
			           	</condition-list>
					</entity-condition>
			        <set field="resFrom" value="${bsh: return workEffortAssocListFrom.size();}"/>
						
					<if>
						<condition>
							<or>
								<if-compare field="resTo" value="1" operator="greater-equals"/>
								<if-compare field="resFrom" value="1" operator="greater-equals"/>
							</or>
						</condition>
						<then>
        					<set field="hasMandatoryAssocEmpty" type="Boolean" value="true"/>
		                	<set field="addWorkEffortToErrorMsg" type="Boolean" value="true"/>
						</then>
					</if>
						
					<if-compare operator="equals" value="true" field="addWorkEffortToErrorMsg">
					    <if-not-empty field="workEffortAssocListFrom">
					        <iterate entry="workEffortAssocFrom" list="workEffortAssocListFrom">
					            <property-to-field resource="WorkeffortExtErrorLabels" property="MandatoryFieldMissing" field="errorAssoc"/>
					            <if>
							    	<condition>
							    		<if-compare field="isPrimaryLang" value="true" operator="equals" type="Boolean"/>
							    	</condition>
							    	<then>
							    		<string-append string=" ${workEffort.workEffortName} ---&gt;" field="errorAssoc"/>
							    		<string-append string=" ${workEffortAssocFrom.comments}" field="errorAssoc"/>
                           			</then>
							    	<else>
							    		<if-not-empty field="workEffort.workEffortNameLang">
						        		    <string-append string=" ${workEffort.workEffortNameLang} ---&gt;" field="errorAssoc"/>
						        		    <else>
						        		    	<string-append string=" ${workEffort.workEffortName} ---&gt;" field="errorAssoc"/>
						        		    </else>
						        		</if-not-empty>
						        		<if-not-empty field="workEffortAssocFrom.commentsLang">
						        		    <string-append string=" ${workEffortAssocFrom.commentsLang}" field="errorAssoc"/>
						        		    <else>
						        		    	<string-append string=" ${workEffortAssocFrom.comments}" field="errorAssoc"/>
						        		    </else>
						        		</if-not-empty>
							    	</else>
							    </if>
					            <string-append string="${errorAssoc}" field="errorMsg"/>
			                    <string-append string="&lt;br&gt;" field="errorMsg"/> 
					        </iterate>
					    </if-not-empty>
					    <if-not-empty field="workEffortAssocListTo">
					        <iterate entry="workEffortAssocTo" list="workEffortAssocListTo">
					            <property-to-field resource="WorkeffortExtErrorLabels" property="MandatoryFieldMissing" field="errorAssoc"/>
					            <if>
							    	<condition>
							    		<if-compare field="isPrimaryLang" value="true" operator="equals" type="Boolean"/>
							    	</condition>
							    	<then>
							    		<string-append string=" ${workEffort.workEffortName} ---&gt; " field="errorAssoc"/>
							    		<string-append string=" ${workEffortAssocTo.comments}" field="errorAssoc"/>
                           			</then>
							    	<else>
							    		<if-not-empty field="workEffort.workEffortNameLang">
						        		    <string-append string=" ${workEffort.workEffortNameLang} ---&gt; " field="errorAssoc"/>
						        		    <else>
						        		    	<string-append string=" ${workEffort.workEffortName} ---&gt; " field="errorAssoc"/>
						        		    </else>
						        		</if-not-empty>
						        		<if-not-empty field="workEffortAssocTo.commentsLang">
						        		    <string-append string=" ${workEffortAssocTo.commentsLang}" field="errorAssoc"/>
						        		    <else>
						        		    	<string-append string=" ${workEffortAssocTo.comments}" field="errorAssoc"/>
						        		    </else>
						        		</if-not-empty>
							    	</else>
							    </if>
							    <string-append string="${errorAssoc}" field="errorMsg"/>
			                    <string-append string="&lt;br&gt;" field="errorMsg"/> 
					        </iterate>
					    </if-not-empty>
		         	</if-compare>
		        </iterate>
       		</if-compare>
       	</if-not-empty>
        <log level="always" message="###### parameters.workEffortId = ${parameters.workEffortId} hasMandatoryAssocEmpty = ${hasMandatoryAssocEmpty}, errorMsg = ${errorMsg}"/>
        <field-to-result field="hasMandatoryAssocEmpty"/>
        <if-not-empty field="errorMsg">
        	<field-to-result field="errorMsg"/>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="checkWorkEffortStatusHasMandatoryIndicator" short-description="checkWorkEffortStatusHasMandatoryIndicator">
        <call-class-method class-name="com.mapsengineering.base.events.LanguageLocaleEvent" method-name="isPrimaryLanguage" ret-field="isPrimaryLang">
			<field field="locale" type="java.util.Locale"/>
		</call-class-method>
        <set field="hasMandatoryIndicatorEmpty" value="false" type="Boolean"/>
        <entity-one entity-name="WorkEffort" value-field="workEffortRoot">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-one>
        <if-not-empty field="workEffortRoot">
            <get-related-one relation-name="WorkEffortType" to-value-field="workEffortTypeRoot" value-field="workEffortRoot"/>
            <if-compare operator="equals" value="Y" field="workEffortTypeRoot.isRoot">
            	<entity-and list="workEffortList" entity-name="WorkEffort">
            		<field-map field-name="workEffortParentId" from-field="parameters.workEffortId"/>
            	</entity-and>
            	<if-not-empty field="workEffortList">
            		<iterate entry="workEffort" list="workEffortList">
            		    <clear-field field="workEffortTypeContentList"/>
            			<entity-condition list="workEffortTypeContentList" entity-name="WorkEffortTypeContent">
            				<condition-list combine="and">
            				    <condition-expr field-name="workEffortTypeId" from-field="workEffort.workEffortTypeId"/>
            				    <condition-expr field-name="weTypeContentTypeId" value="FOLDER"/>
            				    <condition-expr field-name="contentId" operator="like" value="%WEFLD_IND%"/>
            				    <condition-expr field-name="isMandatory" value="Y"/>
            				</condition-list>
            			</entity-condition>
            			<if-not-empty field="workEffortTypeContentList">           			    
            				<iterate entry="workEffortTypeContent" list="workEffortTypeContentList">
            				    <clear-field field="workEffortMeasureList"/>
            					<entity-and list="workEffortMeasureList" entity-name="WorkEffortMeasureByWorkEffortPurposeAccount">
            						<field-map field-name="workEffortId" from-field="workEffort.workEffortId"/>
            						<field-map field-name="workEffortPurposeTypeId" from-field="workEffortTypeContent.workEffortPurposeTypeId"/>
            					</entity-and>
            					<if-empty field="workEffortMeasureList">
            						<set field="hasMandatoryIndicatorEmpty" value="true" type="Boolean"/>
            						<property-to-field resource="WorkeffortExtErrorLabels" property="MandatoryFieldMissing" field="errorIndicator"/>
            						<if>
								    	<condition>
								    		<if-compare field="isPrimaryLang" value="true" operator="equals" type="Boolean"/>
								    	</condition>
								    	<then>
								    		<string-append string=" ${workEffort.workEffortName} ---&gt; " field="errorIndicator"/>
								    		<string-append string=" ${workEffortTypeContent.etch}" field="errorIndicator"/>
	                           			</then>
								    	<else>
								    		<if-not-empty field="workEffort.workEffortNameLang">
							        		    <string-append string=" ${workEffort.workEffortNameLang} ---&gt; " field="errorIndicator"/>
							        		    <else>
							        		    	<string-append string=" ${workEffort.workEffortName} ---&gt; " field="errorIndicator"/>
							        		    </else>
							        		</if-not-empty>
							        		<if-not-empty field="workEffortTypeContent.etchLang">
							        		    <string-append string=" ${workEffortTypeContent.etchLang}" field="errorIndicator"/>
							        		    <else>
							        		    	<string-append string=" ${workEffortTypeContent.etch}" field="errorIndicator"/>
							        		    </else>
							        		</if-not-empty>
								    	</else>
								    </if>
						            <string-append string="${errorIndicator}" field="errorMsg"/>
			                    	<string-append string="&lt;br&gt;" field="errorMsg"/> 
            					</if-empty>
            				</iterate>
            			</if-not-empty>
            		</iterate>
            	</if-not-empty>
            </if-compare>       
        </if-not-empty>
        <field-to-result field="hasMandatoryIndicatorEmpty"/>
        <if-not-empty field="errorMsg">
        	<field-to-result field="errorMsg"/>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="checkWorkEffortStatusHasMandatoryRoleEmpty" short-description="checkWorkEffortStatusHasMandatoryRoleEmpty">
        <call-class-method class-name="com.mapsengineering.base.events.LanguageLocaleEvent" method-name="isPrimaryLanguage" ret-field="isPrimaryLang">
			<field field="locale" type="java.util.Locale"/>
		</call-class-method>
        <set field="hasMandatoryRoleEmpty" type="Boolean" value="false"/>
        <entity-and list="workEffortList" entity-name="WorkEffort">
            <field-map field-name="workEffortParentId" from-field="parameters.workEffortId"/>
        </entity-and>
        <if-not-empty field="workEffortList">
            <iterate entry="workEffort" list="workEffortList">
                <entity-and list="workEffortTypeAndRoleList" entity-name="WorkEffortTypeAndRole">
                    <field-map field-name="workEffortTypeId" from-field="workEffort.workEffortTypeId"/>
                    <field-map field-name="isMandatory" value="Y"/>
                </entity-and>
                <if-not-empty field="workEffortTypeAndRoleList">
                    <iterate entry="workEffortTypeAndRole" list="workEffortTypeAndRoleList">
                        <entity-and list="workEffortPartyAssignmentList" entity-name="WorkEffortPartyAssignment">
                            <field-map field-name="workEffortId" from-field="workEffort.workEffortId"/>
                            <field-map field-name="roleTypeId" from-field="workEffortTypeAndRole.roleTypeId"/>
                        </entity-and>
                        <if-empty field="workEffortPartyAssignmentList">
                            <set field="hasMandatoryRoleEmpty" type="Boolean" value="true"/>
                            <property-to-field resource="WorkeffortExtErrorLabels" property="MandatoryFieldMissing" field="errorRole"/>
                            <if>
						    	<condition>
						    		<if-compare field="isPrimaryLang" value="true" operator="equals" type="Boolean"/>
						    	</condition>
						    	<then>
						    		<string-append string=" ${workEffort.workEffortName} ---&gt; " field="errorRole"/>
						    		<string-append string=" ${workEffortTypeAndRole.description}" field="errorRole"/>
                          			</then>
						    	<else>
						    		<if-not-empty field="workEffort.workEffortNameLang">
					        		    <string-append string=" ${workEffort.workEffortNameLang} ---&gt; " field="errorRole"/>
					        		    <else>
					        		    	<string-append string=" ${workEffort.workEffortName} ---&gt; " field="errorRole"/>
					        		    </else>
					        		</if-not-empty>
					        		<if-not-empty field="workEffortTypeAndRole.descriptionLang">
					        		    <string-append string=" ${workEffortTypeAndRole.descriptionLang}" field="errorRole"/>
					        		    <else>
					        		    	<string-append string=" ${workEffortTypeAndRole.description}" field="errorRole"/>
					        		    </else>
					        		</if-not-empty>
						    	</else>
						    </if>
				            <string-append string="${errorRole}" field="errorMsg"/>
			                <string-append string="&lt;br&gt;" field="errorMsg"/>                           
                        </if-empty>
                    </iterate>
                </if-not-empty>
            </iterate>
        </if-not-empty>
        <field-to-result field="hasMandatoryRoleEmpty"/>
        <if-not-empty field="errorMsg">
        	<field-to-result field="errorMsg"/>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="crudServiceOperation_WorkEffortContentView" short-description="crudServiceOperation_WorkEffortContentView"> 
        <if-compare operator="equals" value="UPDATE" field="parameters.operation">
            <entity-one value-field="workEffortContent" entity-name="WorkEffortContent">
                <field-map field-name="workEffortId" from-field="parameters.parameters.workEffortId"/>
                <field-map field-name="contentId" from-field="parameters.parameters.contentId"/>
                <field-map field-name="workEffortContentTypeId" from-field="parameters.parameters.workEffortContentTypeId"/>
                <field-map field-name="fromDate" from-field="parameters.parameters.fromDate"/>
            </entity-one>
            <if-not-empty field="workEffortContent">
                <set field="workEffortContent.thruDate" from-field="parameters.parameters.thruDate" type="Timestamp"/>
                <store-value value-field="workEffortContent"/>
            </if-not-empty>
            <entity-one value-field="content" entity-name="Content">
                <field-map field-name="contentId" from-field="parameters.parameters.contentId"/>
            </entity-one>
            <if-not-empty field="content">
                <set field="content.description" from-field="parameters.parameters.description"/>
                <set field="content.descriptionLang" from-field="parameters.parameters.descriptionLang"/>
                <store-value value-field="content"/>
            </if-not-empty>
        </if-compare>
        <if-compare operator="equals" value="DELETE" field="parameters.operation">
            <entity-one value-field="workEffortContent" entity-name="WorkEffortContent">
                <field-map field-name="workEffortId" from-field="parameters.parameters.workEffortId"/>
                <field-map field-name="contentId" from-field="parameters.parameters.contentId"/>
                <field-map field-name="workEffortContentTypeId" from-field="parameters.parameters.workEffortContentTypeId"/>
                <field-map field-name="fromDate" from-field="parameters.parameters.fromDate"/>
            </entity-one>
            <if-not-empty field="workEffortContent">
                <remove-value value-field="workEffortContent"/>
            </if-not-empty>          
            <entity-one value-field="content" entity-name="Content">
                <field-map field-name="contentId" from-field="parameters.parameters.contentId"/>
            </entity-one>
            <if-not-empty field="content">
                <remove-value value-field="content"/>
            </if-not-empty>
            <entity-one value-field="dataResource" entity-name="DataResource">
                <field-map field-name="dataResourceId" from-field="parameters.parameters.dataResourceId"/>
            </entity-one>
            <if-not-empty field="dataResource">
                <remove-value value-field="dataResource"/>
            </if-not-empty>          
        </if-compare>
    </simple-method>
    
    <simple-method method-name="deleteWorkEffortExt" short-description="deleteWorkEffortExt">
    	<entity-one value-field="weToDelete" entity-name="WorkEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-one>
        <get-related-one relation-name="WorkEffortType" to-value-field="wType" value-field="weToDelete"/>
        
        <!-- GN-3786 -->
        <if-compare operator="not-equals" field="parameters.isObiettivo" value="Y">	
        	<if-not-empty field="wType">
        	    <clear-field field="workEffortTypeContent"/>
			    <entity-one value-field="workEffortTypeContent" entity-name="WorkEffortTypeContent" auto-field-map="false">
				    <field-map field-name="workEffortTypeId" from-field="wType.workEffortTypeId"/>
					<field-map field-name="contentId" value="WEFLD_MAIN"/>
				</entity-one>
				<if>
				    <condition>
					    <and>
						    <not>
							    <if-empty field="workEffortTypeContent"/>
							</not>
							<not>
								<if-empty field="workEffortTypeContent.params"/>
							</not>
						</and>
					</condition>
					<then>
					    <call-bsh>
						    <![CDATA[
		   					    wetcContext = new java.util.HashMap();
		       					org.ofbiz.base.util.BshUtil.eval(workEffortTypeContent.get("params"), wetcContext);
		   						result = new java.util.HashMap();
							    if (org.ofbiz.base.util.UtilValidate.isNotEmpty(wetcContext.get("deletePrevious"))) {
							        result.put("deletePrevious", wetcContext.get("deletePrevious"));
							    }	
							    if (org.ofbiz.base.util.UtilValidate.isNotEmpty(wetcContext.get("deleteCopy"))) {
							        result.put("deleteCopy", wetcContext.get("deleteCopy"));
							    }								    						    								           
							    return result;								
							]]>
						</call-bsh>
						<if-compare operator="equals" value="N" field="deletePrevious">
						    <if-not-empty field="weToDelete">
							    <if-not-empty field="weToDelete.workEffortParentId">
								    <entity-one value-field="workEffortPeriod" entity-name="WorkEffortAndTypePeriodAndThruDate" auto-field-map="false">
									    <field-map field-name="workEffortId" from-field="weToDelete.workEffortParentId"/>
									</entity-one>
									<else>
									    <entity-one value-field="workEffortPeriod" entity-name="WorkEffortAndTypePeriodAndThruDate" auto-field-map="false">
									        <field-map field-name="workEffortId" from-field="weToDelete.workEffortId"/>
									    </entity-one>
									</else>
								</if-not-empty>
								<if-not-empty field="workEffortPeriod">
								    <if-compare operator="equals" value="GLFISCTYPE_ACTUAL" field="workEffortPeriod.glFiscalTypeEnumId">
									    <set field="periodFromDate" from-field="workEffortPeriod.thruDate" type="Timestamp"/>
									    <else>
									        <set field="periodFromDate" from-field="workEffortPeriod.fromDate" type="Timestamp"/>
									    </else>
									</if-compare>
									<if-not-empty field="periodFromDate">
									    <if-compare-field operator="less" field="weToDelete.estimatedStartDate" to-field="periodFromDate" type="Timestamp">
                                	        <add-error>
                                    	        <fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortRootElementPreviousPeriod"/>
                                    		</add-error>                       		                   
                                    		<check-errors/>									                        
									    </if-compare-field>
									</if-not-empty>
							    </if-not-empty>
							</if-not-empty>
						</if-compare>
						<if-compare operator="equals" value="Y" field="deleteCopy">
						    <entity-and list="workEffortAssocCopyList" entity-name="WorkEffortAssoc">
						        <field-map field-name="workEffortIdTo" from-field="weToDelete.workEffortId"/>
						        <field-map field-name="workEffortAssocTypeId" value="COPY"/>
						    </entity-and>
						    <if-not-empty field="workEffortAssocCopyList">
						        <iterate entry="workEffortAssocCopyItem" list="workEffortAssocCopyList">
						            <entity-and list="workEffortAssocToDeleteList" entity-name="WorkEffortAssoc">
						                <field-map field-name="workEffortIdFrom" from-field="workEffortAssocCopyItem.workEffortIdFrom"/>
						                <field-map field-name="workEffortIdTo" from-field="weToDelete.workEffortParentId"/>
						            </entity-and>
						            <if-not-empty field="workEffortAssocToDeleteList">
						                <iterate entry="workEffortAssocToDeleteItem" list="workEffortAssocToDeleteList">
						                    <remove-value value-field="workEffortAssocToDeleteItem"/>
						                </iterate>
						            </if-not-empty>
						        </iterate>
						    </if-not-empty>
						</if-compare>
					</then>
				</if>
        	</if-not-empty>           
        </if-compare>
        
        <if-compare field="wType.isRoot" operator="equals" value="Y">
            <entity-condition list="hierarchyList" entity-name="WorkEffort">
                <condition-list>
                    <condition-expr field-name="workEffortParentId" from-field="parameters.workEffortId"/>
                    <condition-expr field-name="workEffortId" operator="not-equals" from-field="parameters.workEffortId"/>
                </condition-list>
            </entity-condition>
            <if-not-empty field="hierarchyList">
                <if-compare operator="equals" value="Y" field="parameters.copyWorkEffort">
                    <remove-list list="hierarchyList"/>
                    <else>
                        <add-error>
                            <fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortRootNotDeletable"/>
                        </add-error>
                        <check-errors/>
                    </else>
                </if-compare>
            </if-not-empty>
            <entity-condition list="emplPositionTypeList" entity-name="EmplPositionType">
                <condition-list>
                    <condition-expr field-name="templateId" from-field="parameters.workEffortId"/>
                </condition-list>
            </entity-condition>
            <if-not-empty field="emplPositionTypeList">
                <add-error>
                    <fail-property resource="WorkeffortExtErrorLabels" property="WorkEffortTemplateNotDeletable"/>
                </add-error>
                <check-errors/>
            </if-not-empty>
        </if-compare>
        
        <entity-condition list="workEffortAssocAttributeList" entity-name="WorkEffortAssocAttribute">
            <condition-list combine="or">
                <condition-expr field-name="workEffortIdFrom" operator="equals" from-field="parameters.workEffortId"/>
                <condition-expr field-name="workEffortIdTo" operator="equals" from-field="parameters.workEffortId"/>
            </condition-list>
        </entity-condition>
        <remove-list list="workEffortAssocAttributeList"/>

        <entity-condition list="workEffortAssocList" entity-name="WorkEffortAssoc">
            <condition-list combine="or">
                <condition-expr field-name="workEffortIdFrom" operator="equals" from-field="parameters.workEffortId"/>
                <condition-expr field-name="workEffortIdTo" operator="equals" from-field="parameters.workEffortId"/>
            </condition-list>
        </entity-condition>
        <remove-list list="workEffortAssocList"/> 
        
        <entity-condition list="workEffortMeasureList" entity-name="WorkEffortMeasure">
            <condition-list>
                <condition-expr field-name="weOtherGoalEnumId" value="WEMOMG_WEFF"/>
                <condition-expr field-name="workEffortId" from-field="parameters.workEffortId"/>
            </condition-list>
        </entity-condition>
        <iterate entry="workEffortMeasure" list="workEffortMeasureList">
            <entity-condition list="acctgTransEntryList" entity-name="AcctgTransEntry">
                <condition-expr field-name="voucherRef" from-field="workEffortMeasure.workEffortMeasureId"/>
            </entity-condition>
            <remove-list list="acctgTransEntryList"/>

            <entity-condition list="acctgTransList" entity-name="AcctgTrans">
                <condition-expr field-name="voucherRef" from-field="workEffortMeasure.workEffortMeasureId"/>
            </entity-condition>
            <remove-list list="acctgTransList"/>
        </iterate>
        
        <entity-condition list="workEffortMeasureListFull" entity-name="WorkEffortMeasure">
            <condition-expr field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-condition>
        <iterate entry="workEffortMeasure" list="workEffortMeasureListFull">
            <entity-condition list="workEffortMeasRatScList" entity-name="WorkEffortMeasRatSc">
                <condition-expr field-name="workEffortMeasureId" from-field="workEffortMeasure.workEffortMeasureId"/>
            </entity-condition>
            <remove-list list="workEffortMeasRatScList"/>

            <entity-condition list="transEntryList" entity-name="AcctgTransEntry">
                <condition-expr field-name="voucherRef" from-field="workEffortMeasure.workEffortMeasureId"/>
            </entity-condition>
            <remove-list list="transEntryList"/>
            <entity-condition list="transList" entity-name="AcctgTrans">
                <condition-expr field-name="voucherRef" from-field="workEffortMeasure.workEffortMeasureId"/>
            </entity-condition>
            <remove-list list="transList"/>

            <remove-value value-field="workEffortMeasure"/>
        </iterate>
        
		<entity-condition list="timeEntryList" entity-name="TimeEntry">
            <condition-expr field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-condition>
        <iterate entry="timeEntry" list="timeEntryList">
            <entity-condition list="timesheetRoleList" entity-name="TimesheetRole">
                <condition-expr field-name="timesheetId" from-field="timeEntry.timesheetId"/>
            </entity-condition>
            <remove-list list="timesheetRoleList"/>

            <remove-value value-field="timeEntry"/>

            <remove-related relation-name="Timesheet" value-field="timeEntry"/>
        </iterate>
        
        <entity-condition list="workEffortAttributeList" entity-name="WorkEffortAttribute">
            <condition-expr field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-condition>
        <remove-list list="workEffortAttributeList"/>

        <entity-condition list="workEffortNoteList" entity-name="WorkEffortNote">
            <condition-expr field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-condition>
        <iterate entry="workEffortNote" list="workEffortNoteList">
            <remove-value value-field="workEffortNote"/>

            <remove-related relation-name="NoteData" value-field="workEffortNote"/>
        </iterate>
        
        <entity-condition list="workEffortPartyAssignmentList" entity-name="WorkEffortPartyAssignment">
            <condition-expr field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-condition>
        <remove-list list="workEffortPartyAssignmentList"/>
        
        <entity-condition list="workEffortReviewList" entity-name="WorkEffortReview">
            <condition-expr field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-condition>
        <remove-list list="workEffortReviewList"/>
        
        <entity-condition list="workEffortRoleAssignmentList" entity-name="WorkEffortRoleAssignment">
            <condition-expr field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-condition>
        <remove-list list="workEffortRoleAssignmentList"/>

        <entity-condition list="workEffortContentList" entity-name="WorkEffortContent">
            <condition-expr field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-condition>
        <iterate entry="workEffortContent" list="workEffortContentList">
            <get-related-one relation-name="Content" to-value-field="content" value-field="workEffortContent"/>
            <remove-value value-field="workEffortContent"/>

            <remove-value value-field="content"/>

            <remove-related relation-name="DataResource" value-field="content"/>
        </iterate> 
        
        <if-not-empty field="weToDelete.workEffortParentId">
            <clear-field field="weToDelete.workEffortParentId"/>
            <store-value value-field="weToDelete"/>
        </if-not-empty>
        
        <entity-condition list="workEffortStatusList" entity-name="WorkEffortStatus">
            <condition-expr field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-condition>
        <remove-list list="workEffortStatusList"/>

        <entity-condition list="tList" entity-name="AcctgTrans">
            <condition-expr field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-condition>
        <iterate entry="acctgTrans" list="tList">
            <entity-condition list="teList" entity-name="AcctgTransEntry">
                <condition-expr field-name="acctgTransId" from-field="acctgTrans.acctgTransId"/>
            </entity-condition>
            <remove-list list="teList"/>
        </iterate>
        <remove-list list="tList"/> 
        
        <if-not-empty field="weToDelete.workEffortSnapshotId">
            <entity-condition list="acctgTransList" entity-name="AcctgTrans">
                <condition-list combine="and">
                    <condition-expr field-name="workEffortSnapshotId" from-field="weToDelete.workEffortSnapshotId"/>
	                <condition-expr field-name="workEffortRevisionId" from-field="weToDelete.workEffortRevisionId"/>
                </condition-list>
	        </entity-condition>
	        <iterate entry="acctgTrans" list="acctgTransList">
	            <entity-condition list="acctgTransEntryList" entity-name="AcctgTransEntry">
	                <condition-expr field-name="acctgTransId" from-field="acctgTrans.acctgTransId"/>
	            </entity-condition>
	            <remove-list list="acctgTransEntryList"/>
	        </iterate>
	        <remove-list list="acctgTransList"/>
        </if-not-empty> 
        
        <entity-condition list="communicationEventWorkEffortList" entity-name="CommunicationEventWorkEff">
            <condition-list>
                <condition-expr field-name="workEffortId" from-field="parameters.workEffortId"/>
            </condition-list>
        </entity-condition>
        <if-not-empty field="communicationEventWorkEffortList">
            <remove-list list="communicationEventWorkEffortList"/>
        </if-not-empty>
						
		<entity-condition list="childList" entity-name="WorkEffort">
            <condition-expr field-name="workEffortParentId" from-field="parameters.workEffortId"/>
        </entity-condition>
        <iterate entry="child" list="childList">
            <!-- GN-3307 -->
            <entity-condition list="communicationEventWorkEffortChildList" entity-name="CommunicationEventWorkEff">
                <condition-list>
                    <condition-expr field-name="workEffortId" from-field="child.workEffortId"/>
                </condition-list>
            </entity-condition>
            <if-not-empty field="communicationEventWorkEffortChildList">
                <remove-list list="communicationEventWorkEffortChildList"/>
            </if-not-empty>
                            
            <clear-field field="child.workEffortParentId"/>
            <store-value value-field="child"/>
        </iterate>

		<entity-condition list="workEffortKeywordList" entity-name="WorkEffortKeyword">
            <condition-expr field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-condition>
        <remove-list list="workEffortKeywordList"/>
							
        <remove-value value-field="weToDelete"/>
        <check-errors/>                                                                       																        
    </simple-method>
</simple-methods>
