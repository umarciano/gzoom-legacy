CREATE
	VIEW PARTY_TEMPLATE_VIEW AS SELECT
		PH.PARTY_ID,
		CASE
			WHEN PH.FROM_DATE IS NULL THEN '2000-01-01 00:00:00'
			ELSE PH.FROM_DATE
		END AS FROM_DATE,
		PH.THRU_DATE,
		EP.TEMPLATE_ID,
		EP.EMPL_POSITION_TYPE_ID,
		WE.WORK_EFFORT_TYPE_ID AS TEMPLATE_TYPE_ID,
		WT.PARENT_TYPE_ID
	FROM
		PARTY_HISTORY PH
	INNER JOIN EMPL_POSITION_TYPE EP ON
		EP.EMPL_POSITION_TYPE_ID = PH.EMPL_POSITION_TYPE_ID
	INNER JOIN WORK_EFFORT WE ON
		WE.WORK_EFFORT_ID = EP.TEMPLATE_ID
    INNER JOIN WORK_EFFORT_TYPE WT ON
        WT.WORK_EFFORT_TYPE_ID = WE.WORK_EFFORT_TYPE_ID
UNION SELECT
		PER.PARTY_ID,
		CASE
			WHEN PER.EMPL_POSITION_TYPE_DATE IS NULL THEN '2000-01-01 00:00:00'
			ELSE PER.EMPL_POSITION_TYPE_DATE
		END AS FROM_DATE,
		'2099-12-31 00:00:00' AS THRU_DATE,
		EP.TEMPLATE_ID,
		EP.EMPL_POSITION_TYPE_ID,
		WE.WORK_EFFORT_TYPE_ID AS TEMPLATE_TYPE_ID,
		WT.PARENT_TYPE_ID
	FROM
		PERSON PER
	INNER JOIN EMPL_POSITION_TYPE EP ON
		EP.EMPL_POSITION_TYPE_ID = PER.EMPL_POSITION_TYPE_ID
	INNER JOIN WORK_EFFORT WE ON
		WE.WORK_EFFORT_ID = EP.TEMPLATE_ID
    INNER JOIN WORK_EFFORT_TYPE WT ON
        WT.WORK_EFFORT_TYPE_ID = WE.WORK_EFFORT_TYPE_ID;

-- ===============================
 -- VISTE PER CREAZIONE SCHEDE INDIVIDUALI BASATE SU ALLOCATION
 -- ===============================

CREATE
	VIEW ORG_ALLOCATION_VIEW AS SELECT
		PREL.PARTY_ID_TO AS PARTY_ID,
		PREL.FROM_DATE,
		CASE
			WHEN PREL.THRU_DATE IS NULL THEN '2099-12-31 00:00:00'
			ELSE PREL.THRU_DATE
		END AS THRU_DATE,
		PREL.PARTY_ID_FROM AS ORG_UNIT_ID,
		PREL.ROLE_TYPE_ID_FROM AS ORG_UNIT_ROLE_TYPE_ID,
		CASE
			WHEN PREL.RELATIONSHIP_VALUE IS NULL THEN 0
			ELSE PREL.RELATIONSHIP_VALUE
		END AS VALUE
	FROM
		PARTY_RELATIONSHIP PREL
	WHERE
		PREL.PARTY_RELATIONSHIP_TYPE_ID = 'ORG_ALLOCATION';


 CREATE
	VIEW FROM_DATE_ALLOCATION_VIEW AS SELECT
		DISTINCT PARTY_ID,
		FROM_DATE
	FROM
		ORG_ALLOCATION_VIEW
UNION SELECT
		DISTINCT PARTY_ID,
		FROM_DATE
	FROM
		PARTY_TEMPLATE_VIEW;


 CREATE
	VIEW THRU_DATE_ALLOCATION_VIEW AS SELECT
		DISTINCT PARTY_ID,
		THRU_DATE
	FROM
		ORG_ALLOCATION_VIEW
UNION SELECT
		DISTINCT PARTY_ID,
		THRU_DATE
	FROM
		PARTY_TEMPLATE_VIEW;


 CREATE
	VIEW FROM_DATE_ALLOCATION_VIEW_TOT AS SELECT
		FV.PARTY_ID,
		FV.FROM_DATE
	FROM
		FROM_DATE_ALLOCATION_VIEW FV
UNION SELECT
		TD.PARTY_ID,
		TD.THRU_DATE + 1
	FROM
		THRU_DATE_ALLOCATION_VIEW TD
	WHERE
		EXISTS(
			SELECT
				*
			FROM
				THRU_DATE_ALLOCATION_VIEW TD1
			WHERE
				TD1.PARTY_ID = TD.PARTY_ID
				AND TD1.THRU_DATE > TD.THRU_DATE
		);


 CREATE
	VIEW THRU_DATE_ALLOCATION_VIEW_TOT AS SELECT
		FV.PARTY_ID,
		FV.THRU_DATE
	FROM
		THRU_DATE_ALLOCATION_VIEW FV
UNION SELECT
		TD.PARTY_ID,
		TD.FROM_DATE - 1
	FROM
		FROM_DATE_ALLOCATION_VIEW TD
	WHERE
		EXISTS(
			SELECT
				*
			FROM
				FROM_DATE_ALLOCATION_VIEW TD1
			WHERE
				TD1.PARTY_ID = TD.PARTY_ID
				AND TD1.FROM_DATE < TD.FROM_DATE
		);


 CREATE
	VIEW FROM_THRU_DATE_ALLOCATION_VIEW AS SELECT
		FV.PARTY_ID,
		FV.FROM_DATE,
		(
			SELECT
				MIN( TV.THRU_DATE )
			FROM
				THRU_DATE_ALLOCATION_VIEW_TOT TV
			WHERE
				TV.PARTY_ID = FV.PARTY_ID
				AND TV.THRU_DATE >= FV.FROM_DATE
		) AS THRU_DATE
	FROM
		FROM_DATE_ALLOCATION_VIEW_TOT FV;


 CREATE
	VIEW ALLOCATION_TEMPLATE_VIEW AS SELECT
		FTV.PARTY_ID,
		FTV.FROM_DATE,
		FTV.THRU_DATE,
		POV.ORGANIZATION_ID,
		OV.ORG_UNIT_ID,
		OV.VALUE AS EFFORT,
		OV.ORG_UNIT_ROLE_TYPE_ID,
		PTV.TEMPLATE_ID,
		PTV.EMPL_POSITION_TYPE_ID,
		PTV.TEMPLATE_TYPE_ID,
		EVAL.PARTY_ID_TO AS EVALUATOR,
		APPR.PARTY_ID_TO AS APPROVER,
		PTV.PARENT_TYPE_ID
	FROM
		FROM_THRU_DATE_ALLOCATION_VIEW FTV
	INNER JOIN ORG_ALLOCATION_VIEW OV ON
		FTV.PARTY_ID = OV.PARTY_ID
		AND FTV.FROM_DATE <= OV.THRU_DATE
		AND FTV.THRU_DATE >= OV.FROM_DATE
	INNER JOIN PARTY_TEMPLATE_VIEW PTV ON
		FTV.PARTY_ID = PTV.PARTY_ID
		AND FTV.FROM_DATE <= PTV.THRU_DATE
		AND FTV.THRU_DATE >= PTV.FROM_DATE
	INNER JOIN PARTY_PARENT_ROLE POV ON
		POV.PARTY_ID = OV.ORG_UNIT_ID AND POV.ROLE_TYPE_ID = 'ORGANIZATION_UNIT'
	LEFT OUTER JOIN PARTY_RELATIONSHIP EVAL ON
		EVAL.PARTY_ID_FROM = FTV.PARTY_ID
		AND EVAL.ROLE_TYPE_ID_FROM = 'WEM_EVAL_IN_CHARGE'
		AND EVAL.ROLE_TYPE_ID_TO = 'WEM_EVAL_MANAGER'
		AND EVAL.FROM_DATE <= FTV.THRU_DATE
		AND (EVAL.THRU_DATE IS NULL OR EVAL.THRU_DATE >= FTV.THRU_DATE)
	LEFT OUTER JOIN PARTY_RELATIONSHIP APPR ON
		APPR.PARTY_ID_FROM = FTV.PARTY_ID
		AND APPR.ROLE_TYPE_ID_FROM = 'WEM_EVAL_IN_CHARGE'
		AND APPR.ROLE_TYPE_ID_TO = 'WEM_EVAL_APPROVER'
		AND APPR.FROM_DATE <= FTV.THRU_DATE
		AND (APPR.THRU_DATE IS NULL OR APPR.THRU_DATE >= FTV.THRU_DATE);

-- ===============================
 -- VISTE PER CREAZIONE SCHEDE INDIVIDUALI BASATE SU EMPLOYMENT
 -- ===============================

 CREATE
	VIEW ORG_EMPLOYMENT_VIEW AS SELECT
		PREL.PARTY_ID_TO AS PARTY_ID,
		PREL.FROM_DATE,
		CASE
			WHEN PREL.THRU_DATE IS NULL THEN '2099-12-31 00:00:00'
			ELSE PREL.THRU_DATE
		END AS THRU_DATE,
		PREL.PARTY_ID_FROM AS ORG_UNIT_ID,
		PREL.ROLE_TYPE_ID_FROM AS ORG_UNIT_ROLE_TYPE_ID,
		CASE
			WHEN PREL.RELATIONSHIP_VALUE IS NULL THEN 0
			ELSE PREL.RELATIONSHIP_VALUE
		END AS VALUE
	FROM
		PARTY_RELATIONSHIP PREL
	WHERE
		PREL.PARTY_RELATIONSHIP_TYPE_ID = 'ORG_EMPLOYMENT';


 CREATE
	VIEW FROM_DATE_EMPLOYMENT_VIEW AS SELECT
		DISTINCT PARTY_ID,
		FROM_DATE
	FROM
		ORG_EMPLOYMENT_VIEW
UNION SELECT
		DISTINCT PARTY_ID,
		FROM_DATE
	FROM
		PARTY_TEMPLATE_VIEW;


 CREATE
	VIEW THRU_DATE_EMPLOYMENT_VIEW AS SELECT
		DISTINCT PARTY_ID,
		THRU_DATE
	FROM
		ORG_EMPLOYMENT_VIEW
UNION SELECT
		DISTINCT PARTY_ID,
		THRU_DATE
	FROM
		PARTY_TEMPLATE_VIEW;


 CREATE
	VIEW FROM_DATE_EMPLOYMENT_VIEW_TOT AS SELECT
		FV.PARTY_ID,
		FV.FROM_DATE
	FROM
		FROM_DATE_EMPLOYMENT_VIEW FV
UNION SELECT
		TD.PARTY_ID,
		TD.THRU_DATE + 1
	FROM
		THRU_DATE_EMPLOYMENT_VIEW TD
	WHERE
		EXISTS(
			SELECT
				*
			FROM
				THRU_DATE_EMPLOYMENT_VIEW TD1
			WHERE
				TD1.PARTY_ID = TD.PARTY_ID
				AND TD1.THRU_DATE > TD.THRU_DATE
		);


 CREATE
	VIEW THRU_DATE_EMPLOYMENT_VIEW_TOT AS SELECT
		FV.PARTY_ID,
		FV.THRU_DATE
	FROM
		THRU_DATE_EMPLOYMENT_VIEW FV
UNION SELECT
		TD.PARTY_ID,
		TD.FROM_DATE - 1
	FROM
		FROM_DATE_EMPLOYMENT_VIEW TD
	WHERE
		EXISTS(
			SELECT
				*
			FROM
				FROM_DATE_EMPLOYMENT_VIEW TD1
			WHERE
				TD1.PARTY_ID = TD.PARTY_ID
				AND TD1.FROM_DATE < TD.FROM_DATE
		);


 CREATE
	VIEW FROM_THRU_DATE_EMPLOYMENT_VIEW AS SELECT
		FV.PARTY_ID,
		FV.FROM_DATE,
		(
			SELECT
				MIN( TV.THRU_DATE )
			FROM
				THRU_DATE_EMPLOYMENT_VIEW_TOT TV
			WHERE
				TV.PARTY_ID = FV.PARTY_ID
				AND TV.THRU_DATE >= FV.FROM_DATE
		) AS THRU_DATE
	FROM
		FROM_DATE_EMPLOYMENT_VIEW_TOT FV;


 CREATE
	VIEW EMPLOYMENT_TEMPLATE_VIEW AS SELECT
		FTV.PARTY_ID,
		FTV.FROM_DATE,
		FTV.THRU_DATE,
		POV.ORGANIZATION_ID,
		OV.ORG_UNIT_ID,
		OV.ORG_UNIT_ROLE_TYPE_ID,
		OV.VALUE AS EFFORT,
		PTV.TEMPLATE_ID,
		PTV.EMPL_POSITION_TYPE_ID,
		PTV.TEMPLATE_TYPE_ID,
		EVAL.PARTY_ID_TO AS EVALUATOR,
		APPR.PARTY_ID_TO AS APPROVER,
		PTV.PARENT_TYPE_ID
	FROM
		FROM_THRU_DATE_EMPLOYMENT_VIEW FTV
	INNER JOIN ORG_EMPLOYMENT_VIEW OV ON
		FTV.PARTY_ID = OV.PARTY_ID
		AND FTV.FROM_DATE <= OV.THRU_DATE
		AND FTV.THRU_DATE >= OV.FROM_DATE
	INNER JOIN PARTY_TEMPLATE_VIEW PTV ON
		FTV.PARTY_ID = PTV.PARTY_ID
		AND FTV.FROM_DATE <= PTV.THRU_DATE
		AND FTV.THRU_DATE >= PTV.FROM_DATE
	INNER JOIN PARTY_PARENT_ROLE POV ON
		POV.PARTY_ID = OV.ORG_UNIT_ID AND POV.ROLE_TYPE_ID = 'ORGANIZATION_UNIT'
	LEFT OUTER JOIN PARTY_RELATIONSHIP EVAL ON
		EVAL.PARTY_ID_FROM = FTV.PARTY_ID
		AND EVAL.ROLE_TYPE_ID_FROM = 'WEM_EVAL_IN_CHARGE'
		AND EVAL.ROLE_TYPE_ID_TO = 'WEM_EVAL_MANAGER'
		AND EVAL.FROM_DATE <= FTV.THRU_DATE
		AND (EVAL.THRU_DATE IS NULL OR EVAL.THRU_DATE >= FTV.THRU_DATE)
	LEFT OUTER JOIN PARTY_RELATIONSHIP APPR ON
		APPR.PARTY_ID_FROM = FTV.PARTY_ID
		AND APPR.ROLE_TYPE_ID_FROM = 'WEM_EVAL_IN_CHARGE'
		AND APPR.ROLE_TYPE_ID_TO = 'WEM_EVAL_APPROVER'
		AND APPR.FROM_DATE <= FTV.THRU_DATE
		AND (APPR.THRU_DATE IS NULL OR APPR.THRU_DATE >= FTV.THRU_DATE);